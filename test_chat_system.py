#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
"""

import sys
import asyncio
import pytest
from pathlib import Path
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from chat_models import ChatManager, ClientProfile, ClientChat, ChatMessage
from chat_utils import (
    get_chat_management_keyboard, format_chat_info, format_chat_memory,
    create_chat_context_prompt
)
from chat_handlers import ChatHandlers
from state_manager import StateManager
from models import UserState

def test_client_profile():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print("=== TEST: Client Profile ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–º–µ–Ω–µ–º
    profile1 = ClientProfile()
    print(f"‚úÖ Auto profile created: {profile1.name}")
    assert profile1.name.startswith("–ö–ª–∏–µ–Ω—Ç_")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–º–µ–Ω–µ–º
    profile2 = ClientProfile(name="–ú–∞–∫—Å–∏–º", description="VIP –∫–ª–∏–µ–Ω—Ç")
    print(f"‚úÖ Named profile created: {profile2.name}")
    assert profile2.name == "–ú–∞–∫—Å–∏–º"
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data = profile2.to_dict()
    profile3 = ClientProfile.from_dict(data)
    
    assert profile3.name == profile2.name
    assert profile3.description == profile2.description
    print("‚úÖ Serialization/deserialization works")

def test_chat_message():
    """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    print("\n=== TEST: Chat Message ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = ChatMessage("user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "text")
    print(f"‚úÖ Message created: {message.content[:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    assert message.message_id is not None
    assert message.timestamp is not None
    print("‚úÖ Auto fields generated")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data = message.to_dict()
    message2 = ChatMessage.from_dict(data)
    
    assert message2.content == message.content
    assert message2.role == message.role
    print("‚úÖ Message serialization works")

def test_client_chat():
    """–¢–µ—Å—Ç —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    print("\n=== TEST: Client Chat ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    profile = ClientProfile(name="–ê–Ω–Ω–∞", description="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
    chat = ClientChat(profile)
    print(f"‚úÖ Chat created for {chat.client_profile.name}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    chat.add_message(ChatMessage("user", "–ü—Ä–∏–≤–µ—Ç!", "text"))
    chat.add_message(ChatMessage("assistant", "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! üíï", "text"))
    chat.add_message(ChatMessage("user", "–ö–∞–∫ –¥–µ–ª–∞?", "text"))
    
    assert len(chat.messages) == 3
    print(f"‚úÖ Messages added: {len(chat.messages)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞
    original_stage = chat.conversation_stage
    for i in range(15):  # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞
        chat.add_message(ChatMessage("user", f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}", "text"))
    
    if chat.conversation_stage != original_stage:
        print(f"‚úÖ Conversation stage updated: {original_stage} -> {chat.conversation_stage}")
    else:
        print("‚ö†Ô∏è Conversation stage not updated (may be expected)")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    recent = chat.get_recent_messages(3)
    assert len(recent) <= 3
    print(f"‚úÖ Recent messages: {len(recent)}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = chat.get_context_summary()
    assert context is not None
    assert len(context) > 50
    print("‚úÖ Context summary generated")

def test_chat_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤"""
    print("\n=== TEST: Chat Manager ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = ChatManager(12345)
    print(f"‚úÖ Chat manager created for user {manager.user_id}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤
    chat1 = manager.create_chat("–ê–ª–µ–∫—Å–µ–π", "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    chat2 = manager.create_chat("–ú–∞—Ä–∏—è", "VIP –∫–ª–∏–µ–Ω—Ç")
    
    assert len(manager.chats) == 2
    print(f"‚úÖ Chats created: {len(manager.chats)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    active = manager.get_active_chat()
    assert active is not None
    assert active.client_profile.name == "–ê–ª–µ–∫—Å–µ–π"
    print(f"‚úÖ Active chat: {active.client_profile.name}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
    switch_result = manager.switch_chat(chat2.chat_id)
    assert switch_result == True
    new_active = manager.get_active_chat()
    assert new_active.client_profile.name == "–ú–∞—Ä–∏—è"
    print("‚úÖ Chat switching works")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    success = manager.add_message_to_active_chat("user", "–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ", "text")
    assert success == True
    assert len(manager.get_active_chat().messages) > 0
    print("‚úÖ Message added to active chat")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    chat_list = manager.get_chat_list()
    assert len(chat_list) == 2
    print(f"‚úÖ Chat list: {len(chat_list)} chats")

def test_chat_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —á–∞—Ç–æ–≤"""
    print("\n=== TEST: Chat Utils ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = get_chat_management_keyboard()
    assert keyboard is not None
    assert keyboard.keyboard is not None
    print(f"‚úÖ Management keyboard created: {len(keyboard.keyboard)} rows")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    profile = ClientProfile(name="–¢–µ—Å—Ç", description="–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    chat = ClientChat(profile)
    chat.add_message(ChatMessage("user", "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–µ–≤—å—é —á–∞—Ç–∞" * 3, "text"))
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    info = format_chat_info(chat)
    assert info is not None
    assert len(info) > 100
    print("‚úÖ Chat info formatting works")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    chat.client_memory["preferences"]["–ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç"] = "–∫—Ä–∞—Å–Ω—ã–π"
    chat.client_memory["interests"] = ["—Ñ–∏—Ç–Ω–µ—Å", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"]
    
    memory = format_chat_memory(chat)
    assert memory is not None
    assert "–ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç" in memory
    print("‚úÖ Memory formatting works")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    prompt = create_chat_context_prompt(chat, "–ö–∞–∫ –¥–µ–ª–∞?")
    assert prompt is not None
    assert len(prompt) > 200
    print("‚úÖ Context prompt creation works")

@pytest.mark.asyncio
async def test_chat_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–æ–≤"""
    print("\n=== TEST: Chat Handlers ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ mock –æ–±—ä–µ–∫—Ç–æ–≤
    state_manager = Mock()
    state_manager.get_user = Mock()
    state_manager.save_data = AsyncMock()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_manager
    user = Mock()
    chat_manager = ChatManager(12345)
    chat_manager.create_chat("–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", "–û–ø–∏—Å–∞–Ω–∏–µ")
    user.chat_manager = chat_manager
    
    state_manager.get_user.return_value = user
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = ChatHandlers(state_manager)
    print("‚úÖ Chat handlers created")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    callback_handlers = handlers.get_callback_handlers()
    assert callback_handlers is not None
    assert "chat_management" in callback_handlers
    print(f"‚úÖ Callback handlers: {len(callback_handlers)} handlers")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_chat_id = list(chat_manager.chats.keys())[0]
    param_handler = handlers.handle_callback_with_params(f"chat_switch_{test_chat_id}")
    assert param_handler is not None
    print("‚úÖ Parameterized callback handling works")

def test_user_state_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UserState"""
    print("\n=== TEST: UserState Integration ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = UserState()
    print("‚úÖ UserState created")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    assert hasattr(user, 'chat_manager')
    assert hasattr(user, 'waiting_for_chat_name')
    assert hasattr(user, 'waiting_for_chat_reply')
    print("‚úÖ New chat fields present")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ chat_manager
    from chat_models import ChatManager
    user.chat_manager = ChatManager(12345)
    user.waiting_for_chat_name = True
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data = user.to_dict()
    assert 'chat_manager' in data
    assert 'waiting_for_chat_name' in data
    print("‚úÖ Serialization includes chat fields")
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    user2 = UserState.from_dict(data)
    assert user2.chat_manager is not None
    assert user2.waiting_for_chat_name == True
    print("‚úÖ Deserialization works")

@pytest.mark.asyncio
async def test_all_chat_system():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤"""
    print("Testing Chat Management System")
    print("=" * 50)
    
    test_client_profile()
    test_chat_message()
    test_client_chat()
    test_chat_manager()
    test_chat_utils()
    await test_chat_handlers()
    test_user_state_integration()
    
    print("\n" + "=" * 50)
    print("SUCCESS: All tests completed!")
    print("‚úÖ Client profiles work correctly")
    print("‚úÖ Chat messages and history work")
    print("‚úÖ Chat management functions properly")
    print("‚úÖ Multiple chat switching works")
    print("‚úÖ Memory and context preservation works")
    print("‚úÖ User interface components ready")
    print("‚úÖ Integration with existing system complete")
    print("\nüéâ Chat system is ready for production!")

if __name__ == "__main__":
    asyncio.run(test_all_chat_system()) 