#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤ –æ–ø—Ä–æ—Å–∞.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from config import SURVEY_STEPS
from utils import get_survey_keyboard

def test_survey_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–≥–æ–≤ –æ–ø—Ä–æ—Å–∞\n")
    
    def parse_survey_callback(callback_data):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ _handle_survey_step"""
        print(f"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: '{callback_data}'")
        
        if not callback_data.startswith("survey_"):
            raise ValueError(f"Invalid survey callback format: {callback_data}")
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "survey_"
        data_without_prefix = callback_data[7:]  # len("survey_") = 7
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π underscore —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å value –æ—Ç step
        last_underscore_idx = data_without_prefix.rfind("_")
        if last_underscore_idx == -1:
            raise ValueError(f"Invalid survey callback data format: {callback_data}")
        
        step = data_without_prefix[:last_underscore_idx]
        value = data_without_prefix[last_underscore_idx + 1:]
        
        print(f"   ‚úÖ Step: '{step}'")
        print(f"   ‚úÖ Value: '{value}'")
        
        if step not in SURVEY_STEPS:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ '{step}'")
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–≥–∏: {list(SURVEY_STEPS.keys())}")
            return False
        
        print(f"   ‚úÖ –®–∞–≥ '{step}' –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        "survey_content_types_photos",
        "survey_content_types_videos", 
        "survey_content_types_messages",
        "survey_content_types_all",
        "survey_price_range_budget",
        "survey_price_range_medium",
        "survey_price_range_premium", 
        "survey_price_range_various",
        "survey_communication_style_flirty",
        "survey_communication_style_friendly",
        "survey_communication_style_professional",
        "survey_communication_style_mixed",
        "survey_notification_frequency_often",
        "survey_notification_frequency_daily",
        "survey_notification_frequency_occasional",
        "survey_notification_frequency_rarely"
    ]
    
    success_count = 0
    total_count = len(test_cases)
    
    for callback_data in test_cases:
        try:
            success = parse_survey_callback(callback_data)
            if success:
                success_count += 1
            print()
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}\n")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}/{total_count}")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        return False

def test_keyboard_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –æ–ø—Ä–æ—Å–∞\n")
    
    for step_name in SURVEY_STEPS.keys():
        print(f"üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞: '{step_name}'")
        try:
            keyboard = get_survey_keyboard(step_name)
            print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(keyboard.keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ –≤ –∫–Ω–æ–ø–∫–∞—Ö
            for row in keyboard.keyboard:
                for button in row:
                    callback_data = button.callback_data
                    print(f"      üîó Callback: {callback_data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                    expected_prefix = f"survey_{step_name}_"
                    if not callback_data.startswith(expected_prefix):
                        print(f"      ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö!")
                        return False
            
            print(f"   ‚úÖ –í—Å–µ callback –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}\n")
            return False
    
    print("üéâ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

def test_old_vs_new_parsing():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞\n")
    
    test_callback = "survey_content_types_photos"
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: '{test_callback}'\n")
    
    # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (—Å –æ—à–∏–±–∫–æ–π)
    print("‚ùå –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    parts = test_callback.split("_", 2)
    if len(parts) >= 3:
        old_step = parts[1]  # "content"
        old_value = parts[2]  # "types_photos"
        print(f"   Step: '{old_step}' (–Ω–µ–≤–µ—Ä–Ω–æ)")
        print(f"   Value: '{old_value}' (–Ω–µ–≤–µ—Ä–Ω–æ)")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: '{old_step}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SURVEY_STEPS ‚ùå\n")
    
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    print("‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    data_without_prefix = test_callback[7:]  # "content_types_photos"
    last_underscore_idx = data_without_prefix.rfind("_")  # 12
    new_step = data_without_prefix[:last_underscore_idx]  # "content_types"
    new_value = data_without_prefix[last_underscore_idx + 1:]  # "photos"
    
    print(f"   Step: '{new_step}' (–≤–µ—Ä–Ω–æ)")
    print(f"   Value: '{new_value}' (–≤–µ—Ä–Ω–æ)")
    
    if new_step in SURVEY_STEPS:
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: '{new_step}' –Ω–∞–π–¥–µ–Ω –≤ SURVEY_STEPS ‚úÖ")
        return True
    else:
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: '{new_step}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ SURVEY_STEPS ‚ùå")
        return False

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'ValueError: Unknown survey step: content'\n")
    
    all_tests_passed = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    all_tests_passed &= test_old_vs_new_parsing()
    all_tests_passed &= test_keyboard_generation()
    all_tests_passed &= test_survey_parsing()
    
    print("\n" + "="*60)
    if all_tests_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –û—à–∏–±–∫–∞ 'Unknown survey step: content' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞")
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print("="*60) 