"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è OnlyFans Assistant Bot
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—É–¥–∏—Ç—É —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import time
import logging
from functools import wraps
from typing import Dict, List, Optional
from config import ADMIN_IDS

logger = logging.getLogger("security")

def admin_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ admin –ø—Ä–∞–≤.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç ADMIN_IDS –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    @wraps(func)
    async def wrapper(bot, message, *args, **kwargs):
        user_id = message.from_user.id
        
        if user_id not in ADMIN_IDS:
            logger.warning(f"üö® SECURITY: Unauthorized access attempt by user {user_id}")
            from handlers import safe_reply_to
            await safe_reply_to(bot, message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        logger.info(f"‚úÖ SECURITY: Admin access granted for user {user_id}")
        return await func(bot, message, *args, **kwargs)
    return wrapper

def validate_user_input(user_input: str, max_length: int = 1000) -> str:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç prompt injection –∞—Ç–∞–∫.
    """
    if not isinstance(user_input, str):
        raise ValueError("Input must be string")
    
    if len(user_input) > max_length:
        raise ValueError(f"Input too long: {len(user_input)} > {max_length}")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è prompt injection
    dangerous_patterns = [
        ('${', '\\${'),          # Template injection
        ('{', '\\{'),            # Template placeholders
        ('}', '\\}'),            # Template placeholders  
        ('`', '\\`'),            # Code execution
        ('<script>', '&lt;script&gt;'),  # XSS
        ('</script>', '&lt;/script&gt;'), # XSS
        ('javascript:', 'javascript_'),   # JS injection
        ('data:', 'data_'),      # Data URLs
        ('vbscript:', 'vbscript_'), # VBScript
    ]
    
    cleaned_input = user_input
    for dangerous, safe in dangerous_patterns:
        cleaned_input = cleaned_input.replace(dangerous, safe)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: —É–¥–∞–ª—è–µ–º null bytes
    cleaned_input = cleaned_input.replace('\x00', '')
    
    if cleaned_input != user_input:
        logger.warning(f"üõ°Ô∏è SECURITY: Sanitized dangerous input from user")
    
    return cleaned_input

class RateLimiter:
    """
    Rate limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DoS –∞—Ç–∞–∫.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ API –∫–≤–æ—Ç.
    """
    
    def __init__(self, max_requests: int = 10, time_window: int = 60):
        self.requests: Dict[int, List[float]] = {}
        self.max_requests = max_requests
        self.time_window = time_window
        self.admin_max_requests = max_requests * 5  # –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if user_id in self.requests:
            self.requests[user_id] = [
                req_time for req_time in self.requests[user_id]
                if current_time - req_time < self.time_window
            ]
        else:
            self.requests[user_id] = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç: –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        max_limit = self.admin_max_requests if user_id in ADMIN_IDS else self.max_requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= max_limit:
            logger.warning(f"üö´ RATE LIMIT: User {user_id} exceeded limit ({len(self.requests[user_id])}/{max_limit})")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(current_time)
        return True
    
    def get_remaining_requests(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if user_id not in self.requests:
            return self.max_requests
        
        max_limit = self.admin_max_requests if user_id in ADMIN_IDS else self.max_requests
        return max(0, max_limit - len(self.requests[user_id]))
    
    def get_reset_time(self, user_id: int) -> Optional[float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞"""
        if user_id not in self.requests or not self.requests[user_id]:
            return None
        
        oldest_request = min(self.requests[user_id])
        reset_time = oldest_request + self.time_window
        return max(0, reset_time - time.time())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
rate_limiter = RateLimiter()
ai_rate_limiter = RateLimiter(max_requests=5, time_window=60)  # –°—Ç—Ä–æ–∂–µ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤

def rate_limit_check(limiter: RateLimiter = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit
    """
    if limiter is None:
        limiter = rate_limiter
    
    def decorator(func):
        @wraps(func)
        async def wrapper(bot, message, *args, **kwargs):
            user_id = message.from_user.id
            
            if not limiter.is_allowed(user_id):
                remaining_time = limiter.get_reset_time(user_id)
                from handlers import safe_reply_to
                
                if remaining_time:
                    await safe_reply_to(
                        bot, message, 
                        f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥."
                    )
                else:
                    await safe_reply_to(bot, message, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            return await func(bot, message, *args, **kwargs)
        return wrapper
    return decorator

def secure_format_prompt(template: str, **kwargs) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç prompt injection.
    """
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    cleaned_kwargs = {}
    for key, value in kwargs.items():
        if isinstance(value, str):
            cleaned_kwargs[key] = validate_user_input(value, max_length=2000)
        else:
            cleaned_kwargs[key] = str(value)[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    try:
        formatted = template.format(**cleaned_kwargs)
        return formatted
    except KeyError as e:
        logger.error(f"üö® SECURITY: Template formatting error: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return template.replace('{', '{{').replace('}', '}}')

def log_security_event(event_type: str, user_id: int, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    logger.warning(f"üîí SECURITY EVENT: {event_type} | User: {user_id} | {details}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
class SecurityStats:
    def __init__(self):
        self.blocked_attempts = 0
        self.rate_limited = 0
        self.input_sanitized = 0
        self.admin_accesses = 0
    
    def increment_blocked(self):
        self.blocked_attempts += 1
    
    def increment_rate_limited(self):
        self.rate_limited += 1
    
    def increment_sanitized(self):
        self.input_sanitized += 1
    
    def increment_admin_access(self):
        self.admin_accesses += 1
    
    def get_stats(self) -> dict:
        return {
            "blocked_attempts": self.blocked_attempts,
            "rate_limited": self.rate_limited,
            "input_sanitized": self.input_sanitized,
            "admin_accesses": self.admin_accesses
        }

security_stats = SecurityStats() 