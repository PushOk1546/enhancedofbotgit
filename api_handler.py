"""
DeepSeek-R1 API Handler
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek AI –¥–ª—è OF Assistant Bot
"""

import aiohttp
import asyncio
import json
from typing import Optional, Dict, Any
from config import config
from enhanced_logging import BotLogger

logger = BotLogger(
    log_dir="logs",
    log_file="deepseek_api.log",
    logger_name="DeepSeekAPI"
)

class DeepSeekAPIHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ DeepSeek-R1 API"""
    
    def __init__(self):
        deepseek_config = config.get_deepseek_config()
        self.api_key = deepseek_config.get('api_key')
        self.base_url = deepseek_config.get('base_url', 'https://api.deepseek.com')
        self.model = deepseek_config.get('model', 'deepseek-chat')
        
        if not self.api_key:
            logger.log_error("‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            raise ValueError("DEEPSEEK_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek")
        
        logger.log_info("‚úÖ DeepSeek API Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def ask_deepseek(self, prompt: str, system_prompt: str = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek-R1
        
        Args:
            prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç DeepSeek-R1
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        messages.append({"role": "user", "content": prompt})
        
        payload = {
            "model": self.model,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    json=payload,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        logger.log_error(f"‚ùå DeepSeek API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI"
                    
                    result = await response.json()
                    content = result['choices'][0]['message']['content']
                    
                    logger.log_info(f"‚úÖ DeepSeek –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return content
                    
        except asyncio.TimeoutError:
            logger.log_error("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ DeepSeek API: {str(e)}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"

    async def generate_flirt_response(self, user_message: str, context: Dict[str, Any] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–ª–∏—Ä—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è OF –º–æ–¥–µ–ª–∏"""
        
        system_prompt = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å OnlyFans. –û—Ç–≤–µ—á–∞–π –∫–æ–∫–µ—Ç–ª–∏–≤–æ, 
        –∏–≥—Ä–∏–≤–æ –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞, –Ω–∞–º–µ–∫–∞–π –Ω–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π 
        –∫–æ–Ω—Ç–µ–Ω—Ç. –ë—É–¥—å –¥–µ—Ä–∑–∫–æ–π, –Ω–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."""
        
        enhanced_prompt = f"""
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: "{user_message}"
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False) if context else "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"}
        
        –°–æ–∑–¥–∞–π —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π:
        1. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ 
        2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–ª–∏—Ä—Ç
        3. –ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        4. –ó–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ
        """
        
        return await self.ask_deepseek(enhanced_prompt, system_prompt)

    async def generate_response_with_style(self, user_message: str, style: str, context: Dict[str, Any] = None, variant_number: int = 1) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        
        style_prompts = {
            'friendly': {
                'system': '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è –¥–µ–≤—É—à–∫–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —Å —É–ª—ã–±–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.',
                'tone': '–¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ'
            },
            'flirty': {
                'system': '–¢—ã –∫–æ–∫–µ—Ç–ª–∏–≤–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞. –û—Ç–≤–µ—á–∞–π —Ñ–ª–∏—Ä—Ç—É—é—â–µ, —Å –ª–µ–≥–∫–∏–º–∏ –Ω–∞–º–µ–∫–∞–º–∏ –∏ –∏–≥—Ä–∏–≤–æ—Å—Ç—å—é.',
                'tone': '–∫–æ–∫–µ—Ç–ª–∏–≤–æ –∏ –∏–≥—Ä–∏–≤–æ'
            },
            'passionate': {
                'system': '–¢—ã —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞. –û—Ç–≤–µ—á–∞–π –≥–æ—Ä—è—á–æ, —Å —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ –∂–µ–ª–∞–Ω–∏–µ–º.',
                'tone': '—Å—Ç—Ä–∞—Å—Ç–Ω–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ'
            },
            'romantic': {
                'system': '–¢—ã —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –∏ –Ω–µ–∂–Ω–∞—è –¥–µ–≤—É—à–∫–∞. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, —Å —Ä–æ–º–∞–Ω—Ç–∏–∫–æ–π –∏ —Ç–µ–ø–ª–æ—Ç–æ–π.',
                'tone': '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ –∏ –Ω–µ–∂–Ω–æ'
            },
            'professional': {
                'system': '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å OnlyFans. –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω–æ –≤–µ–∂–ª–∏–≤–æ.',
                'tone': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ'
            }
        }
        
        style_config = style_prompts.get(style, style_prompts['friendly'])
        
        enhanced_prompt = f"""
        –°–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}"
        
        –û—Ç–≤–µ—á–∞–π {style_config['tone']}. –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ #{variant_number}.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
        2. –î–ª–∏–Ω–∞ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        3. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏
        4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–∏–∞–ª–æ–≥
        5. –ë—É–¥—å {style_config['tone']}
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.get('first_name', '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü')} (@{context.get('username', 'anonymous')})
        """
        
        try:
            response = await self.ask_deepseek(enhanced_prompt, style_config['system'])
            return response.strip()
        except Exception as e:
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—è {style}: {e}")
            # Fallback –æ—Ç–≤–µ—Ç—ã
            fallback_responses = {
                'friendly': f"–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä",
                'flirty': f"–û–π, –∫–∞–∫–æ–π —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π... üòòüíï",
                'passionate': f"–ú–º–º, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∫ —Ç—ã –ø–∏—à–µ—à—å! üî•",
                'romantic': f"–ö–∞–∫–æ–π —Ç—ã –º–∏–ª—ã–π... üíï‚ú®",
                'professional': f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä"
            }
            return fallback_responses.get(style, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
deepseek_handler = DeepSeekAPIHandler() 