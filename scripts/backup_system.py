#!/usr/bin/env python3
"""
üíæ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û BACKUP –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø üíæ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
"""

import os
import json
import shutil
import tarfile
import zipfile
import sqlite3
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
import hashlib
import tempfile

@dataclass
class BackupInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backup"""
    backup_id: str
    timestamp: str
    backup_type: str
    file_path: str
    size_bytes: int
    checksum: str
    description: str
    retention_days: int

class BackupSystem:
    def __init__(self):
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è backup
        self.config = {
            'auto_backup_enabled': True,
            'backup_interval_hours': 6,  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            'retention_days': 30,        # –•—Ä–∞–Ω–∏—Ç—å 30 –¥–Ω–µ–π
            'max_backups': 100,         # –ú–∞–∫—Å–∏–º—É–º 100 backup —Ñ–∞–π–ª–æ–≤
            'compress_backups': True,    # –°–∂–∏–º–∞—Ç—å backup
            'verify_backups': True,      # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        }
        
        # –§–∞–π–ª—ã –¥–ª—è backup
        self.backup_targets = {
            'users': {
                'files': ['premium_users.json', 'users.json'],
                'description': 'User data and subscriptions',
                'priority': 'critical'
            },
            'cache': {
                'files': ['response_cache.json'],
                'description': 'Response cache data',
                'priority': 'normal'
            },
            'monitoring': {
                'files': ['monitoring.db'],
                'description': 'Monitoring database',
                'priority': 'normal'
            },
            'config': {
                'files': ['monetization_config.py', 'config.py'],
                'description': 'System configuration',
                'priority': 'high'
            },
            'templates': {
                'files': ['adult_templates.py'],
                'description': 'Content templates',
                'priority': 'high'
            }
        }
        
        self.backup_history = []
        self.is_running = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é backup
        self.load_backup_history()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup
        if self.config['auto_backup_enabled']:
            self.start_auto_backup()
        
        print("üíæ Backup System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")

    def start_auto_backup(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup –≤ —Ñ–æ–Ω–µ"""
        def backup_worker():
            while self.is_running:
                try:
                    time.sleep(self.config['backup_interval_hours'] * 3600)
                    if self.is_running:
                        self.create_auto_backup()
                        self.cleanup_old_backups()
                except Exception as e:
                    print(f"‚ùå Auto backup error: {e}")
                    time.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        backup_thread = threading.Thread(target=backup_worker)
        backup_thread.daemon = True
        backup_thread.start()
        print("üîÑ Auto backup: –í–ö–õ–Æ–ß–ï–ù")

    def create_backup(self, backup_type: str = "manual", description: str = "", 
                     targets: List[str] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ backup"""
        timestamp = datetime.now()
        backup_id = f"backup_{timestamp.strftime('%Y%m%d_%H%M%S')}"
        
        if not targets:
            targets = list(self.backup_targets.keys())
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                backup_temp_path = Path(temp_dir) / backup_id
                backup_temp_path.mkdir()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
                collected_files = []
                for target in targets:
                    if target in self.backup_targets:
                        target_info = self.backup_targets[target]
                        target_dir = backup_temp_path / target
                        target_dir.mkdir()
                        
                        for file_name in target_info['files']:
                            if os.path.exists(file_name):
                                dest_path = target_dir / file_name
                                shutil.copy2(file_name, dest_path)
                                collected_files.append(file_name)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'backup_id': backup_id,
                    'timestamp': timestamp.isoformat(),
                    'backup_type': backup_type,
                    'description': description or f"Auto backup - {timestamp.strftime('%Y-%m-%d %H:%M')}",
                    'targets': targets,
                    'files_included': collected_files,
                    'created_by': 'backup_system',
                    'version': '1.0'
                }
                
                metadata_file = backup_temp_path / 'backup_metadata.json'
                with open(metadata_file, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, indent=2, ensure_ascii=False)
                
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                if self.config['compress_backups']:
                    archive_path = self.backup_dir / f"{backup_id}.tar.gz"
                    with tarfile.open(archive_path, 'w:gz') as tar:
                        tar.add(backup_temp_path, arcname=backup_id)
                else:
                    archive_path = self.backup_dir / f"{backup_id}.zip"
                    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zf:
                        for file_path in backup_temp_path.rglob('*'):
                            if file_path.is_file():
                                arcname = file_path.relative_to(backup_temp_path.parent)
                                zf.write(file_path, arcname)
                
                # –í—ã—á–∏—Å–ª—è–µ–º checksum
                checksum = self.calculate_file_checksum(archive_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup
                backup_info = BackupInfo(
                    backup_id=backup_id,
                    timestamp=timestamp.isoformat(),
                    backup_type=backup_type,
                    file_path=str(archive_path),
                    size_bytes=archive_path.stat().st_size,
                    checksum=checksum,
                    description=metadata['description'],
                    retention_days=self.config['retention_days']
                )
                
                self.backup_history.append(backup_info)
                self.save_backup_history()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if self.config['verify_backups']:
                    if self.verify_backup(backup_id):
                        print(f"‚úÖ Backup created and verified: {backup_id}")
                    else:
                        print(f"‚ö†Ô∏è Backup created but verification failed: {backup_id}")
                else:
                    print(f"‚úÖ Backup created: {backup_id}")
                
                return backup_id
                
        except Exception as e:
            print(f"‚ùå Backup creation failed: {e}")
            return ""

    def create_auto_backup(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup"""
        return self.create_backup(
            backup_type="auto",
            description=f"Automatic backup - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )

    def create_critical_backup(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ backup (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        critical_targets = [
            target for target, info in self.backup_targets.items()
            if info['priority'] == 'critical'
        ]
        
        return self.create_backup(
            backup_type="critical",
            description=f"Critical data backup - {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            targets=critical_targets
        )

    def restore_backup(self, backup_id: str, restore_path: str = None) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ backup"""
        backup_info = self.get_backup_info(backup_id)
        if not backup_info:
            print(f"‚ùå Backup {backup_id} not found")
            return False
        
        backup_path = Path(backup_info.file_path)
        if not backup_path.exists():
            print(f"‚ùå Backup file not found: {backup_path}")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            if not self.verify_backup(backup_id):
                print(f"‚ùå Backup integrity check failed: {backup_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            restore_point = self.create_restore_point()
            
            with tempfile.TemporaryDirectory() as temp_dir:
                extract_path = Path(temp_dir) / "extracted"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
                if backup_path.suffix == '.gz':
                    with tarfile.open(backup_path, 'r:gz') as tar:
                        tar.extractall(extract_path)
                else:
                    with zipfile.ZipFile(backup_path, 'r') as zf:
                        zf.extractall(extract_path)
                
                # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ backup
                backup_data_path = extract_path / backup_id
                if not backup_data_path.exists():
                    backup_data_path = extract_path
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_file = backup_data_path / 'backup_metadata.json'
                if metadata_file.exists():
                    with open(metadata_file, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                    print(f"üìã Restoring backup: {metadata.get('description', backup_id)}")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
                restored_files = []
                for target_dir in backup_data_path.iterdir():
                    if target_dir.is_dir() and target_dir.name != 'backup_metadata.json':
                        for file_path in target_dir.rglob('*'):
                            if file_path.is_file():
                                relative_path = file_path.relative_to(target_dir)
                                
                                if restore_path:
                                    dest_path = Path(restore_path) / relative_path
                                else:
                                    dest_path = Path.cwd() / relative_path
                                
                                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                dest_path.parent.mkdir(parents=True, exist_ok=True)
                                
                                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                                shutil.copy2(file_path, dest_path)
                                restored_files.append(str(dest_path))
                
                print(f"‚úÖ Backup restored successfully: {len(restored_files)} files")
                print(f"üìù Restore point created: {restore_point}")
                return True
                
        except Exception as e:
            print(f"‚ùå Restore failed: {e}")
            return False

    def create_restore_point(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ restore"""
        restore_point_id = f"restore_point_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        try:
            return self.create_backup(
                backup_type="restore_point",
                description=f"Restore point before recovery - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to create restore point: {e}")
            return ""

    def verify_backup(self, backup_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup"""
        backup_info = self.get_backup_info(backup_id)
        if not backup_info:
            return False
        
        backup_path = Path(backup_info.file_path)
        if not backup_path.exists():
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
            current_checksum = self.calculate_file_checksum(backup_path)
            if current_checksum != backup_info.checksum:
                print(f"‚ùå Checksum mismatch for backup {backup_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
            if backup_path.suffix == '.gz':
                with tarfile.open(backup_path, 'r:gz') as tar:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
                    members = tar.getmembers()
                    if not members:
                        return False
            else:
                with zipfile.ZipFile(backup_path, 'r') as zf:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤
                    result = zf.testzip()
                    if result is not None:
                        return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Backup verification failed: {e}")
            return False

    def list_backups(self, backup_type: str = None) -> List[BackupInfo]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup"""
        if backup_type:
            return [b for b in self.backup_history if b.backup_type == backup_type]
        return self.backup_history.copy()

    def get_backup_info(self, backup_id: str) -> Optional[BackupInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup"""
        for backup in self.backup_history:
            if backup.backup_id == backup_id:
                return backup
        return None

    def delete_backup(self, backup_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ backup"""
        backup_info = self.get_backup_info(backup_id)
        if not backup_info:
            return False
        
        try:
            backup_path = Path(backup_info.file_path)
            if backup_path.exists():
                backup_path.unlink()
            
            self.backup_history = [b for b in self.backup_history if b.backup_id != backup_id]
            self.save_backup_history()
            
            print(f"‚úÖ Backup deleted: {backup_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to delete backup: {e}")
            return False

    def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup"""
        cutoff_date = datetime.now() - timedelta(days=self.config['retention_days'])
        deleted_count = 0
        
        for backup in self.backup_history.copy():
            backup_date = datetime.fromisoformat(backup.timestamp)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ backup (–∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
            if backup_date < cutoff_date and backup.backup_type != "critical":
                if self.delete_backup(backup.backup_id):
                    deleted_count += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ backup
        if len(self.backup_history) > self.config['max_backups']:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
            sorted_backups = sorted(self.backup_history, key=lambda x: x.timestamp)
            excess_count = len(self.backup_history) - self.config['max_backups']
            
            for backup in sorted_backups[:excess_count]:
                if backup.backup_type != "critical":
                    if self.delete_backup(backup.backup_id):
                        deleted_count += 1
        
        if deleted_count > 0:
            print(f"üßπ Cleaned up {deleted_count} old backups")

    def calculate_file_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ MD5 checksum —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def get_backup_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup —Å–∏—Å—Ç–µ–º—ã"""
        total_size = sum(b.size_bytes for b in self.backup_history)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_counts = {}
        type_sizes = {}
        for backup in self.backup_history:
            backup_type = backup.backup_type
            type_counts[backup_type] = type_counts.get(backup_type, 0) + 1
            type_sizes[backup_type] = type_sizes.get(backup_type, 0) + backup.size_bytes
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π backup
        latest_backup = None
        if self.backup_history:
            latest_backup = max(self.backup_history, key=lambda x: x.timestamp)
        
        return {
            'total_backups': len(self.backup_history),
            'total_size_mb': round(total_size / 1024 / 1024, 2),
            'backup_types': type_counts,
            'type_sizes_mb': {k: round(v / 1024 / 1024, 2) for k, v in type_sizes.items()},
            'latest_backup': {
                'id': latest_backup.backup_id,
                'timestamp': latest_backup.timestamp,
                'type': latest_backup.backup_type
            } if latest_backup else None,
            'auto_backup_enabled': self.config['auto_backup_enabled'],
            'backup_interval_hours': self.config['backup_interval_hours'],
            'retention_days': self.config['retention_days']
        }

    def export_backup_history(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ backup –≤ JSON"""
        history_data = {
            'export_date': datetime.now().isoformat(),
            'backup_system_version': '1.0',
            'config': self.config,
            'backups': [asdict(backup) for backup in self.backup_history]
        }
        
        export_file = self.backup_dir / f"backup_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Backup history exported: {export_file}")
        return str(export_file)

    def save_backup_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ backup"""
        history_file = self.backup_dir / 'backup_history.json'
        history_data = [asdict(backup) for backup in self.backup_history]
        
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, ensure_ascii=False)

    def load_backup_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ backup"""
        history_file = self.backup_dir / 'backup_history.json'
        
        if history_file.exists():
            try:
                with open(history_file, 'r', encoding='utf-8') as f:
                    history_data = json.load(f)
                
                self.backup_history = [
                    BackupInfo(**backup_data) for backup_data in history_data
                ]
                print(f"üìö Loaded {len(self.backup_history)} backup records")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to load backup history: {e}")
                self.backup_history = []

    def update_config(self, new_config: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backup"""
        self.config.update(new_config)
        print("‚öôÔ∏è Backup configuration updated")

    def emergency_backup(self) -> str:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ backup –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üö® Creating emergency backup...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        try:
            from notification_system import send_warning_alert
            send_warning_alert(
                "Emergency Backup Created",
                "Emergency backup procedure initiated",
                "backup_system",
                {"backup_type": "emergency", "timestamp": datetime.now().isoformat()}
            )
        except:
            pass
        
        return self.create_backup(
            backup_type="emergency",
            description=f"Emergency backup - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ backup —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        
        # –°–æ–∑–¥–∞–µ–º final backup –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
        print("üíæ Creating final backup before shutdown...")
        final_backup = self.create_backup(
            backup_type="final",
            description=f"Final backup before shutdown - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        print(f"‚úÖ Final backup created: {final_backup}")
        print("üõë Backup System: –û–°–¢–ê–ù–û–í–õ–ï–ù")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ backup
backup_system = BackupSystem()

# Convenience —Ñ—É–Ω–∫—Ü–∏–∏
def create_manual_backup(description: str = "") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ backup"""
    return backup_system.create_backup("manual", description)

def create_emergency_backup() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ backup"""
    return backup_system.emergency_backup()

def restore_from_backup(backup_id: str) -> bool:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup"""
    return backup_system.restore_backup(backup_id)

def list_available_backups() -> List[BackupInfo]:
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup"""
    return backup_system.list_backups() 