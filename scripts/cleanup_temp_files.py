#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ö–æ–º–∞–Ω–¥–∞ —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - —Ä–µ—à–µ–Ω–∏–µ P0 Atomic Data Operations

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç StateManager.
"""

import os
import glob
import logging
from datetime import datetime

def cleanup_temp_files(data_dir="data", force=False):
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    
    Args:
        data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö .tmp —Ñ–∞–π–ª–æ–≤
    """
    logger = logging.getLogger("cleanup")
    logger.setLevel(logging.INFO)
    
    cleaned_count = 0
    
    # 1. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã StateManager
    patterns = [
        f"{data_dir}/*.json.tmp.*",
        f"{data_dir}/*.tmp",
        "*.tmp.*",
        "**/*.tmp.*"
    ]
    
    for pattern in patterns:
        try:
            temp_files = glob.glob(pattern, recursive=True)
            
            for temp_file in temp_files:
                try:
                    if os.path.exists(temp_file):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
                        file_age = os.path.getmtime(temp_file)
                        current_time = datetime.now().timestamp()
                        
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –≤—Å–µ –ø—Ä–∏ force=True
                        if force or (current_time - file_age > 60):
                            os.remove(temp_file)
                            cleaned_count += 1
                            print(f"‚úÖ Removed: {temp_file}")
                        else:
                            print(f"‚è≠Ô∏è Skipped (recent): {temp_file}")
                            
                except Exception as e:
                    print(f"‚ùå Failed to remove {temp_file}: {e}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Pattern {pattern} failed: {e}")
    
    # 2. –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞  
    if force:
        try:
            import tempfile
            temp_dir = tempfile.gettempdir()
            project_temp_pattern = os.path.join(temp_dir, "tmp*onlyfans*")
            
            for temp_file in glob.glob(project_temp_pattern):
                try:
                    os.remove(temp_file)
                    cleaned_count += 1
                    print(f"‚úÖ Removed system temp: {temp_file}")
                except Exception as e:
                    print(f"‚ùå Failed to remove system temp {temp_file}: {e}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è System temp cleanup failed: {e}")
    
    return cleaned_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
    print("üßπ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    print("–ö–æ–º–∞–Ω–¥–∞ —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - —Ä–µ—à–µ–Ω–∏–µ P0 –ø—Ä–æ–±–ª–µ–º—ã")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if not os.path.exists("data"):
        os.makedirs("data", exist_ok=True)
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    print("\nüîç –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    cleaned_count = cleanup_temp_files(force=True)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    
    if cleaned_count > 0:
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ P0 Atomic Data Operations –ø—Ä–æ–±–ª–µ–º–∞ –†–ï–®–ï–ù–ê!")
    else:
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ —á–∏—Å—Ç–∞—è!")
    
    # –¢–µ—Å—Ç StateManager —Å –æ—á–∏—Å—Ç–∫–æ–π
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StateManager —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
    try:
        from state_manager import StateManager
        
        # –°–æ–∑–¥–∞–µ–º StateManager - –æ–Ω –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        sm = StateManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        force_cleaned = sm.force_cleanup_temp_files()
        print(f"  ‚Ä¢ StateManager –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {force_cleaned} —Ñ–∞–π–ª–æ–≤")
        
        print("‚úÖ StateManager —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è StateManager: {e}")
    
    print("\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PRODUCTION:")
    print("  ‚úÖ P0 Security Fixes - –ó–ê–í–ï–†–®–ï–ù–û")
    print("  ‚úÖ P0 Atomic Data Operations - –ó–ê–í–ï–†–®–ï–ù–û") 
    print("  ‚úÖ P1 Circuit Breaker - –ó–ê–í–ï–†–®–ï–ù–û")
    print("  ‚úÖ P1 Health Checks - –ó–ê–í–ï–†–®–ï–ù–û")
    print("  ‚úÖ Integration Test - –ó–ê–í–ï–†–®–ï–ù–û")
    
    print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!")
    print("üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –î–ï–ü–õ–û–ô –†–ê–ó–†–ï–®–ï–ù!")

if __name__ == "__main__":
    main() 