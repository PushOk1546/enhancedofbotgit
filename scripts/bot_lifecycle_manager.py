#!/usr/bin/env python3
"""
üî• ENTERPRISE BOT LIFECYCLE MANAGER üî•
Senior Python Developers Team Solution

–†–ï–®–ê–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:
- Error 409: Multiple bot instances conflict
- Webhook conflicts
- Process management
- Graceful shutdown
- Health checks
- Auto recovery
"""

import os
import sys
import time
import signal
import psutil
import requests
import threading
import atexit
from pathlib import Path
from datetime import datetime
from typing import Optional, List, Dict, Any
import subprocess
import json

class BotLifecycleManager:
    """Enterprise Bot Lifecycle Management"""
    
    def __init__(self, bot_token: str, admin_id: int):
        self.bot_token = bot_token
        self.admin_id = admin_id
        self.lock_file = Path("bot.lock")
        self.pid_file = Path("bot.pid")
        self.webhook_cleared = False
        self.shutdown_event = threading.Event()
        self.current_process = None
        
        # Setup signal handlers
        self.setup_signal_handlers()
        
        # Register cleanup on exit
        atexit.register(self.cleanup_on_exit)
    
    def setup_signal_handlers(self):
        """Setup graceful shutdown handlers"""
        def signal_handler(signum, frame):
            print(f"\nüõë Received signal {signum}, shutting down gracefully...")
            self.shutdown_event.set()
            self.cleanup_all()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def check_bot_token_validity(self) -> bool:
        """Validate bot token with Telegram API"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...")
            response = requests.get(
                f"https://api.telegram.org/bot{self.bot_token}/getMe",
                timeout=10
            )
            
            if response.status_code == 200:
                bot_info = response.json()
                if bot_info.get('ok'):
                    username = bot_info['result']['username']
                    print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –ë–æ—Ç: @{username}")
                    return True
            
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {response.status_code}")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def clear_webhook(self) -> bool:
        """Clear existing webhooks to prevent conflicts"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ webhook...")
            
            # Delete webhook
            response = requests.post(
                f"https://api.telegram.org/bot{self.bot_token}/deleteWebhook",
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
                self.webhook_cleared = True
                return True
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")
            return False
    
    def find_conflicting_processes(self) -> List[Dict[str, Any]]:
        """Find all Python processes that might be running bot"""
        conflicting = []
        current_pid = os.getpid()
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    proc_info = proc.info
                    
                    # Skip current process
                    if proc_info['pid'] == current_pid:
                        continue
                    
                    # Check if it's Python process
                    if proc_info['name'] and 'python' in proc_info['name'].lower():
                        cmdline = proc_info['cmdline'] or []
                        cmdline_str = ' '.join(cmdline).lower()
                        
                        # Check for bot-related keywords
                        bot_keywords = [
                            'bot.py', 'monetized_bot.py', 'minimal_start.py',
                            'quick_start.py', 'ultimate_enterprise_launcher.py',
                            'telebot', 'telegram', self.bot_token[:10]
                        ]
                        
                        if any(keyword in cmdline_str for keyword in bot_keywords):
                            conflicting.append({
                                'pid': proc_info['pid'],
                                'name': proc_info['name'],
                                'cmdline': cmdline_str,
                                'process': proc
                            })
                            
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        return conflicting
    
    def terminate_conflicting_processes(self) -> bool:
        """Terminate conflicting bot processes"""
        conflicts = self.find_conflicting_processes()
        
        if not conflicts:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        
        terminated = 0
        for proc_info in conflicts:
            try:
                pid = proc_info['pid']
                name = proc_info['name']
                print(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: PID {pid} ({name})")
                
                # Try graceful termination first
                proc = psutil.Process(pid)
                proc.terminate()
                
                # Wait for graceful shutdown
                try:
                    proc.wait(timeout=5)
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω gracefully")
                    terminated += 1
                except psutil.TimeoutExpired:
                    # Force kill if needed
                    print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
                    proc.kill()
                    terminated += 1
                    
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")
                continue
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {terminated}/{len(conflicts)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        # Wait a bit for cleanup
        time.sleep(2)
        return terminated > 0
    
    def create_lock_file(self) -> bool:
        """Create process lock file"""
        try:
            if self.lock_file.exists():
                # Check if process is still running
                try:
                    with open(self.lock_file, 'r') as f:
                        old_pid = int(f.read().strip())
                    
                    if psutil.pid_exists(old_pid):
                        print(f"‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                        return False
                    else:
                        # Remove stale lock file
                        self.lock_file.unlink()
                        print("üßπ –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª")
                        
                except (ValueError, FileNotFoundError):
                    self.lock_file.unlink()
            
            # Create new lock file
            with open(self.lock_file, 'w') as f:
                f.write(str(os.getpid()))
            
            print(f"üîí Lock —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: PID {os.getpid()}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lock —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def remove_lock_file(self):
        """Remove process lock file"""
        try:
            if self.lock_file.exists():
                self.lock_file.unlink()
                print("üîì Lock —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞: {e}")
    
    def test_telegram_connection(self) -> bool:
        """Test connection to Telegram API"""
        try:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
            
            response = requests.get(
                f"https://api.telegram.org/bot{self.bot_token}/getUpdates?limit=1",
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå Telegram API error: {result.get('description', 'Unknown')}")
                    return False
            else:
                print(f"‚ùå HTTP error: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return False
    
    def cleanup_all(self):
        """Complete cleanup"""
        print("\nüßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        
        # Stop any running processes
        if hasattr(self, 'current_process') and self.current_process:
            try:
                self.current_process.terminate()
                self.current_process.wait(timeout=5)
            except:
                try:
                    self.current_process.kill()
                except:
                    pass
        
        # Remove lock file
        self.remove_lock_file()
        
        # Clear webhook if we set it
        if self.webhook_cleared:
            try:
                self.clear_webhook()
            except:
                pass
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def cleanup_on_exit(self):
        """Cleanup function for atexit"""
        if not self.shutdown_event.is_set():
            self.cleanup_all()
    
    def start_bot_process(self, script_name: str) -> bool:
        """Start bot process with monitoring"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ {script_name}...")
            
            # Set environment variables
            env = os.environ.copy()
            env.update({
                'BOT_TOKEN': self.bot_token,
                'ADMIN_USER_IDS': str(self.admin_id),
                'PYTHONUNBUFFERED': '1'
            })
            
            # Start process
            self.current_process = subprocess.Popen(
                [sys.executable, script_name],
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: PID {self.current_process.pid}")
            
            # Monitor process output in separate thread
            def monitor_output():
                while not self.shutdown_event.is_set():
                    try:
                        line = self.current_process.stdout.readline()
                        if line:
                            print(line.strip())
                        elif self.current_process.poll() is not None:
                            break
                    except:
                        break
            
            monitor_thread = threading.Thread(target=monitor_output, daemon=True)
            monitor_thread.start()
            
            # Wait for process
            try:
                self.current_process.wait()
                return_code = self.current_process.returncode
                
                if return_code == 0:
                    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")
                    return False
                    
            except KeyboardInterrupt:
                print("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.current_process.terminate()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False
    
    def enterprise_bot_startup(self) -> bool:
        """Complete enterprise bot startup sequence"""
        print("\nüî• ENTERPRISE BOT STARTUP SEQUENCE üî•")
        print("=" * 60)
        
        # Step 1: Validate token
        if not self.check_bot_token_validity():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            return False
        
        # Step 2: Terminate conflicting processes
        print("\nüîç –ü–æ–∏—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        self.terminate_conflicting_processes()
        
        # Step 3: Clear webhooks
        if not self.clear_webhook():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook")
        
        # Step 4: Test API connection
        if not self.test_telegram_connection():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
            return False
        
        # Step 5: Create lock file
        if not self.create_lock_file():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock —Ñ–∞–π–ª")
            return False
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True

def main():
    """Main startup function"""
    print("üî• ENTERPRISE BOT LIFECYCLE MANAGER üî•")
    
    # Get configuration
    bot_token = os.getenv('BOT_TOKEN', '7843350631:AAHQ6h_BKAH3J4sNkh9ypNt1jih4yKYM_gs')
    admin_id = int(os.getenv('ADMIN_USER_IDS', '377917978'))
    
    if not bot_token or bot_token == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    # Initialize lifecycle manager
    manager = BotLifecycleManager(bot_token, admin_id)
    
    # Run startup sequence
    if not manager.enterprise_bot_startup():
        print("‚ùå Startup sequence failed!")
        return False
    
    # Determine which bot script to run
    bot_scripts = [
        'ultimate_enterprise_launcher.py',
        'monetized_bot.py', 
        'quick_start.py',
        'minimal_start.py'
    ]
    
    for script in bot_scripts:
        if Path(script).exists():
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {script}...")
            success = manager.start_bot_process(script)
            
            if success:
                print(f"‚úÖ {script} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå {script} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω bot script!")
    return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 