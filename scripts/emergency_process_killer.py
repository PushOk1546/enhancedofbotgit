#!/usr/bin/env python3
"""
üö® EMERGENCY PROCESS KILLER üö®
Senior Team Nuclear Solution –¥–ª—è Error 409

–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –í–°–ï –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
"""

import os
import sys
import time
import psutil
import requests
import subprocess
from pathlib import Path

class EmergencyProcessKiller:
    def __init__(self):
        self.bot_token = "7843350631:AAHQ6h_BKAH3J4sNkh9ypNt1jih4yKYM_gs"
        self.killed_processes = []
        
    def print_banner(self):
        print("\nüö®" + "="*60 + "üö®")
        print("üî•            EMERGENCY PROCESS KILLER            üî•")
        print("üö®              NUCLEAR SOLUTION                  üö®")
        print("üî•         –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï ERROR 409       üî•")
        print("üö®" + "="*60 + "üö®\n")
    
    def find_all_python_processes(self):
        """–ù–∞–π—Ç–∏ –í–°–ï Python –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        python_processes = []
        current_pid = os.getpid()
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
                try:
                    proc_info = proc.info
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                    if proc_info['pid'] == current_pid:
                        continue
                        
                    # –ò—â–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
                    if proc_info['name'] and 'python' in proc_info['name'].lower():
                        cmdline = proc_info['cmdline'] or []
                        cmdline_str = ' '.join(cmdline)
                        
                        python_processes.append({
                            'pid': proc_info['pid'],
                            'name': proc_info['name'],
                            'cmdline': cmdline_str,
                            'create_time': proc_info['create_time'],
                            'process': proc
                        })
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            
        return python_processes
    
    def force_kill_all_python(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –í–°–ï–• Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        processes = self.find_all_python_processes()
        
        if not processes:
            print("‚úÖ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(processes)} Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print("\nüìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        
        for i, proc in enumerate(processes, 1):
            pid = proc['pid']
            name = proc['name'] 
            cmdline = proc['cmdline'][:100] + "..." if len(proc['cmdline']) > 100 else proc['cmdline']
            print(f"  {i}. PID {pid} ({name}): {cmdline}")
        
        print(f"\nüö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –í–°–ï–• {len(processes)} –ü–†–û–¶–ï–°–°–û–í...")
        
        killed_count = 0
        for proc_info in processes:
            try:
                pid = proc_info['pid']
                name = proc_info['name']
                
                print(f"üíÄ –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: PID {pid} ({name})")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                proc = psutil.Process(pid)
                proc.kill()  # –°—Ä–∞–∑—É KILL, –±–µ–∑ TERM
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    proc.wait(timeout=3)
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–±–∏—Ç")
                    killed_count += 1
                    self.killed_processes.append(f"PID {pid} ({name})")
                except psutil.TimeoutExpired:
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")
                continue
                
        print(f"\n‚úÖ –£–±–∏—Ç–æ {killed_count}/{len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return killed_count > 0
    
    def clear_webhook_force(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook"""
        print("\nüßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook...")
        
        try:
            # –£–¥–∞–ª—è–µ–º webhook
            response = requests.post(
                f"https://api.telegram.org/bot{self.bot_token}/deleteWebhook",
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
                    return True
                else:
                    print(f"‚ö†Ô∏è Webhook –æ—Ç–≤–µ—Ç: {result}")
                    
            print(f"‚ùå HTTP –∫–æ–¥: {response.status_code}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {e}")
            
        return False
    
    def cleanup_lock_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö lock —Ñ–∞–π–ª–æ–≤"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ lock —Ñ–∞–π–ª–æ–≤...")
        
        lock_files = [
            "bot.lock",
            "bot.pid", 
            "telegram_bot.lock",
            "monetized_bot.lock",
            "enterprise_bot.lock"
        ]
        
        cleaned = 0
        for lock_file in lock_files:
            try:
                if Path(lock_file).exists():
                    Path(lock_file).unlink()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {lock_file}")
                    cleaned += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {lock_file}: {e}")
                
        if cleaned > 0:
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned} lock —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ÑπÔ∏è Lock —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def test_api_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º getMe
            response = requests.get(
                f"https://api.telegram.org/bot{self.bot_token}/getMe",
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    bot_info = result['result']
                    username = bot_info.get('username', 'Unknown')
                    print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{username}")
                    return True
                    
            print(f"‚ùå getMe –æ—à–∏–±–∫–∞: {response.status_code}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            
        return False
    
    def wait_for_api_clear(self, seconds=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ API"""
        print(f"\n‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ API...")
        
        for i in range(seconds):
            print(f"‚è≥ {seconds - i} —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å...", end='\r')
            time.sleep(1)
            
        print("\n‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def nuclear_cleanup(self):
        """–ü–û–õ–ù–ê–Ø –Ø–î–ï–†–ù–ê–Ø –û–ß–ò–°–¢–ö–ê"""
        self.print_banner()
        
        print("üéØ –≠–¢–ê–ü 1: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        self.force_kill_all_python()
        
        print("\nüéØ –≠–¢–ê–ü 2: –û—á–∏—Å—Ç–∫–∞ lock —Ñ–∞–π–ª–æ–≤")
        self.cleanup_lock_files()
        
        print("\nüéØ –≠–¢–ê–ü 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook")
        self.clear_webhook_force()
        
        print("\nüéØ –≠–¢–ê–ü 4: –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ API")
        self.wait_for_api_clear(10)
        
        print("\nüéØ –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API")
        api_ok = self.test_api_connection()
        
        print("\n" + "="*60)
        print("üî• EMERGENCY CLEANUP –ó–ê–í–ï–†–®–ï–ù")
        print("="*60)
        
        if self.killed_processes:
            print(f"üíÄ –£–±–∏—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ({len(self.killed_processes)}):")
            for proc in self.killed_processes:
                print(f"   - {proc}")
        
        if api_ok:
            print("\n‚úÖ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞!")
            return True
        else:
            print("\n‚ùå API –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üîß –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è emergency cleanup"""
    try:
        killer = EmergencyProcessKiller()
        success = killer.nuclear_cleanup()
        
        if success:
            print("\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
            print("   python bot_lifecycle_manager.py")
            print("   –∏–ª–∏")
            print("   start_full_enterprise_bot.bat")
        else:
            print("\n‚ö†Ô∏è Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞")
            
        return success
        
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(0 if success else 1) 