#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ñ–ò–í–û–ì–û –û–ë–©–ï–ù–ò–Ø –ò –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ —É–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
"""

import sys
from unittest.mock import Mock
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from utils import get_quick_continue_keyboard, get_smart_continuation_keyboard
    from bot import BotManager
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_contextual_keyboards():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    
    try:
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        test_cases = [
            ("–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            ("—Ñ–æ—Ç–æ", "–∫–æ–Ω—Ç–µ–Ω—Ç"),
            ("–∫—Ä–∞—Å–∏–≤–∞—è", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"),
            ("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–¥–µ—Ñ–æ–ª—Ç")
        ]
        
        for message, context_type in test_cases:
            keyboard = get_quick_continue_keyboard(message)
            
            assert isinstance(keyboard, types.InlineKeyboardMarkup), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è '{message}'"
            assert len(keyboard.keyboard) >= 2, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è '{message}'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            button_texts = []
            for row in keyboard.keyboard:
                for button in row:
                    button_texts.append(button.text)
            
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_type}': {len(button_texts)} –∫–Ω–æ–ø–æ–∫")
            print(f"      üìù –ö–Ω–æ–ø–∫–∏: {button_texts[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {len(test_cases)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_smart_continuation_keyboards():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 2: –£–º–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    try:
        context_types = ["flirt_mode", "content_interest", "casual_chat"]
        
        for context in context_types:
            keyboard = get_smart_continuation_keyboard(context)
            
            assert isinstance(keyboard, types.InlineKeyboardMarkup), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è {context}"
            assert len(keyboard.keyboard) >= 2, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–¥–æ–≤ –¥–ª—è {context}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            button_texts = []
            for row in keyboard.keyboard:
                for button in row:
                    button_texts.append(button.text)
            
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '{context}': {len(button_texts)} –∫–Ω–æ–ø–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context == "flirt_mode":
                assert any("—Ñ–ª–∏—Ä—Ç" in btn.lower() for btn in button_texts), "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ —Ñ–ª–∏—Ä—Ç–∞"
            elif context == "content_interest":
                assert any("–∫–æ–Ω—Ç–µ–Ω—Ç" in btn.lower() or "ppv" in btn.lower() for btn in button_texts), "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            elif context == "casual_chat":
                assert any("–±–µ—Å–µ–¥–∞" in btn.lower() or "–æ–±—â" in btn.lower() or "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å" in btn.lower() or "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å" in btn.lower() for btn in button_texts), "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –±–µ—Å–µ–¥—ã"
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–ø–æ–≤: {len(context_types)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_new_handlers():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
    
    try:
        bot_manager = BotManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        new_methods = [
            '_handle_get_closer',
            '_handle_light_flirt',
            '_handle_show_content',
            '_handle_casual_chat',
            '_handle_continue_conversation',
            '_handle_flirty_thanks',
            '_send_contextual_response'
        ]
        
        for method_name in new_methods:
            assert hasattr(bot_manager, method_name), f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: {method_name}"
            method = getattr(bot_manager, method_name)
            assert callable(method), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è callable"
            print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω")
        
        print(f"   üìä –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(new_methods)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_prompt_improvement():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–ø—Ç–æ–≤")
    
    try:
        bot_manager = BotManager()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_user = Mock()
        mock_user.message_history = [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç'},
            {'role': 'assistant', 'content': '–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! üòä'}
        ]
        mock_user.preferences = Mock()
        mock_user.preferences.completed_survey = True
        mock_user.preferences.communication_style = "–∫–æ–∫–µ—Ç–ª–∏–≤—ã–π"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            "Hello",
            "How are you?",
            "Show me pics",
            "You're beautiful"
        ]
        
        for message in test_messages:
            prompt = bot_manager._create_safe_prompt(message, mock_user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            assert "Christina" in prompt, f"–ù–µ—Ç –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ –¥–ª—è '{message}'"
            assert "üé≠ YOUR PERSONALITY" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è '{message}'"
            assert "üí¨ COMMUNICATION STYLE" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –¥–ª—è '{message}'"
            assert message in prompt, f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø—Ä–æ–º–ø—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if "hello" in message.lower():
                assert "greeting" in prompt.lower(), f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è '{message}'"
            elif "pic" in message.lower() or "show" in message.lower():
                assert "content" in prompt.lower(), f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è '{message}'"
            
            print(f"   ‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è '{message}': {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(test_messages)}")
        print(f"   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)//len(test_messages)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_context_analysis():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_tests = [
            ("–ø—Ä–∏–≤–µ—Ç", ["–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "—Ñ–ª–∏—Ä—Ç", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–ø–æ–æ–±—â–∞—Ç—å—Å—è"]),
            ("–ø–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ", ["–≥–æ—Ä—è—á–∏–π", "—ç–∫—Å–∫–ª—é–∑–∏–≤", "—á–∞–µ–≤—ã–µ", "–∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π"]),
            ("—Ç—ã –∫—Ä–∞—Å–∏–≤–∞—è", ["–∫–æ–∫–µ—Ç–ª–∏–≤–æ", "—Ñ–ª–∏—Ä—Ç", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "–Ω–∞–≥—Ä–∞–¥–∞"]),
            ("–æ–±—ã—á–Ω–æ–µ", ["–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "—Ñ–ª–∏—Ä—Ç", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–∏–≥—Ä–∏–≤—ã–π"])
        ]
        
        for message, expected_keywords in context_tests:
            keyboard = get_quick_continue_keyboard(message)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
            all_button_texts = []
            for row in keyboard.keyboard:
                for button in row:
                    all_button_texts.append(button.text.lower())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            found_keywords = 0
            for keyword in expected_keywords:
                if any(keyword in btn_text for btn_text in all_button_texts):
                    found_keywords += 1
            
            assert found_keywords > 0, f"–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è '{message}'"
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '{message}': –Ω–∞–π–¥–µ–Ω–æ {found_keywords}/{len(expected_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {len(context_tests)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ñ–ò–í–û–ì–û –û–ë–©–ï–ù–ò–Ø –ò –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", test_contextual_keyboards),
        ("–£–º–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", test_smart_continuation_keyboards),
        ("–ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", test_new_handlers),
        ("–£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã", test_prompt_improvement),
        ("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", test_context_analysis)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ñ–ò–í–û–ì–û –û–ë–©–ï–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ñ–ò–í–û–ï –û–ë–©–ï–ù–ò–ï –ì–û–¢–û–í–û!")
        print("üî• –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –º–æ–¥–µ–ª—å!")
        print("üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üéØ –ü—Ä–æ–º–ø—Ç—ã —Å—Ç–∞–ª–∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º–∏ –∏ –∑–∞–≤–ª–µ–∫–∞—é—â–∏–º–∏!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {total - passed} —Ç–µ—Å—Ç(–æ–≤)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 