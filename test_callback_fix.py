#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π callback query.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ callback handlers —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
"""

import asyncio
from dataclasses import dataclass
from config import FLIRT_STYLES, PPV_STYLES, MODELS, SURVEY_STEPS
from utils import get_flirt_style_keyboard, get_ppv_style_keyboard, get_model_keyboard, get_survey_keyboard

@dataclass
class MockCallbackQuery:
    """Mock –æ–±—ä–µ–∫—Ç callback query –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    id: str
    data: str
    from_user_id: int = 12345

@dataclass 
class MockUser:
    """Mock –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    model: str = 'smart'
    preferences: object = None

class CallbackTester:
    """–¢–µ—Å—Ç–µ—Ä callback query –ª–æ–≥–∏–∫–∏"""
    
    def __init__(self):
        print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô CALLBACK QUERY")
        print("=" * 50)
    
    def test_flirt_styles_mapping(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ flirt styles"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º FLIRT STYLES:")
        
        keyboard = get_flirt_style_keyboard()
        callback_data_list = []
        
        for button_row in keyboard.keyboard:
            for button in button_row:
                callback_data_list.append(button.callback_data)
        
        print(f"üìä –ö–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: {len(callback_data_list)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ callback_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
        for callback_data in callback_data_list:
            if callback_data.startswith("flirt_style_"):
                style_id = callback_data.replace("flirt_style_", "")
                
                # –ò—â–µ–º —Å—Ç–∏–ª—å –ø–æ ID
                found = False
                for name, info in FLIRT_STYLES.items():
                    if info['id'] == style_id:
                        print(f"‚úÖ {style_id} -> {name}: {info['description']}")
                        found = True
                        break
                
                if not found:
                    print(f"‚ùå {style_id}: ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FLIRT_STYLES!")
                    return False
        
        return True
    
    def test_ppv_styles_mapping(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ PPV styles"""
        print("\nüíé –¢–µ—Å—Ç–∏—Ä—É–µ–º PPV STYLES:")
        
        keyboard = get_ppv_style_keyboard()
        callback_data_list = []
        
        for button_row in keyboard.keyboard:
            for button in button_row:
                callback_data_list.append(button.callback_data)
        
        print(f"üìä –ö–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: {len(callback_data_list)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ callback_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
        for callback_data in callback_data_list:
            if callback_data.startswith("ppv_style_"):
                style_name = callback_data.replace("ppv_style_", "")
                
                if style_name in PPV_STYLES:
                    print(f"‚úÖ {style_name}: {PPV_STYLES[style_name]}")
                else:
                    print(f"‚ùå {style_name}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ PPV_STYLES!")
                    return False
        
        return True
    
    def test_model_mapping(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º MODELS:")
        
        keyboard = get_model_keyboard()
        callback_data_list = []
        
        for button_row in keyboard.keyboard:
            for button in button_row:
                callback_data_list.append(button.callback_data)
        
        print(f"üìä –ö–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: {len(callback_data_list)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ callback_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
        for callback_data in callback_data_list:
            if callback_data.startswith("model_"):
                model_key = callback_data.replace("model_", "")
                
                if model_key in MODELS:
                    print(f"‚úÖ {model_key}: {MODELS[model_key]['description']}")
                else:
                    print(f"‚ùå {model_key}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ MODELS!")
                    return False
        
        return True
    
    def test_survey_mapping(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –æ–ø—Ä–æ—Å–∞"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º SURVEY STEPS:")
        
        for step_name in SURVEY_STEPS.keys():
            keyboard = get_survey_keyboard(step_name)
            
            print(f"\nüîç –®–∞–≥: {step_name}")
            
            for button_row in keyboard.keyboard:
                for button in button_row:
                    callback_data = button.callback_data
                    
                    if callback_data.startswith("survey_"):
                        parts = callback_data.split('_')
                        if len(parts) >= 3:
                            step = parts[1]
                            value = parts[2]
                            print(f"  ‚úÖ {step}_{value}")
                        else:
                            print(f"  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {callback_data}")
                            return False
        
        return True
    
    async def simulate_callback_handlers(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback queries"""
        print("\nüéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø CALLBACK HANDLERS:")
        
        test_callbacks = [
            # –¢–µ—Å—Ç —Ñ–ª–∏—Ä—Ç —Å—Ç–∏–ª–µ–π
            "flirt_style_playful",
            "flirt_style_passionate", 
            "flirt_style_tender",
            
            # –¢–µ—Å—Ç PPV —Å—Ç–∏–ª–µ–π
            "ppv_style_–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π",
            "ppv_style_—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π",
            
            # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
            "model_smart",
            "model_fast",
            
            # –¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞
            "survey_content_types_photos",
            "survey_price_range_medium"
        ]
        
        for callback_data in test_callbacks:
            print(f"\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {callback_data}")
            
            try:
                if callback_data.startswith("flirt_style_"):
                    style_id = callback_data.replace("flirt_style_", "")
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ _handle_flirt_style
                    style_info = None
                    style_name = None
                    
                    for name, info in FLIRT_STYLES.items():
                        if info['id'] == style_id:
                            style_info = info
                            style_name = name
                            break
                    
                    if style_info:
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∏–ª—å: {style_name}")
                    else:
                        print(f"  ‚ùå –°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {style_id}")
                        
                elif callback_data.startswith("ppv_style_"):
                    style_name = callback_data.replace("ppv_style_", "")
                    
                    if style_name in PPV_STYLES:
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω PPV —Å—Ç–∏–ª—å: {style_name}")
                    else:
                        print(f"  ‚ùå PPV —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {style_name}")
                        
                elif callback_data.startswith("model_"):
                    model_key = callback_data.replace("model_", "")
                    
                    if model_key in MODELS:
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_key}")
                    else:
                        print(f"  ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_key}")
                        
                elif callback_data.startswith("survey_"):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "survey_"
                    survey_data = callback_data[7:]  # len("survey_") = 7
                    
                    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    parts = survey_data.split('_')
                    if len(parts) >= 2:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ value, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - step
                        value = parts[-1]
                        step = '_'.join(parts[:-1])
                        
                        if step in SURVEY_STEPS:
                            print(f"  ‚úÖ –®–∞–≥ –æ–ø—Ä–æ—Å–∞: {step} = {value}")
                        else:
                            print(f"  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step}")
                    else:
                        print(f"  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç survey callback")
                        
            except Exception as e:
                print(f"  üí• –û—à–∏–±–∫–∞: {e}")
        
        return True

async def main():
    tester = CallbackTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
    flirt_ok = tester.test_flirt_styles_mapping()
    ppv_ok = tester.test_ppv_styles_mapping()
    model_ok = tester.test_model_mapping()
    survey_ok = tester.test_survey_mapping()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    simulation_ok = await tester.simulate_callback_handlers()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ Flirt styles: {'OK' if flirt_ok else 'FAIL'}")
    print(f"‚úÖ PPV styles: {'OK' if ppv_ok else 'FAIL'}")
    print(f"‚úÖ Models: {'OK' if model_ok else 'FAIL'}")
    print(f"‚úÖ Survey: {'OK' if survey_ok else 'FAIL'}")
    print(f"‚úÖ Simulation: {'OK' if simulation_ok else 'FAIL'}")
    
    all_ok = all([flirt_ok, ppv_ok, model_ok, survey_ok, simulation_ok])
    
    if all_ok:
        print("\nüéâ –í–°–ï CALLBACK HANDLERS –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("üöÄ –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í CALLBACK HANDLERS!")
    
    return all_ok

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 