#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ OF Assistant Telegram Bot
"""

import asyncio
import sys
from typing import Optional

try:
    # –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å aioredis –≤ Python 3.11+
    import warnings
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    import telebot
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è AsyncTeleBot, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
    class SafeAsyncTeleBot:
        def __init__(self, token, **kwargs):
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            try:
                from telebot.async_telebot import AsyncTeleBot as _AsyncTeleBot
                self._bot = _AsyncTeleBot(token, **kwargs)
                print("‚úÖ AsyncTeleBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AsyncTeleBot: {e}")
                raise
        
        def __getattr__(self, name):
            return getattr(self._bot, name)
    
    AsyncTeleBot = SafeAsyncTeleBot
    types = telebot.types
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: pyTelegramBotAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI")
    sys.exit(1)
except Exception as e:
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ telebot: {e}")
    print("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
    try:
        import telebot.types as types
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockAsyncTeleBot:
            def __init__(self, token, **kwargs):
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock-–≤–µ—Ä—Å–∏—è AsyncTeleBot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                raise RuntimeError("AsyncTeleBot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        AsyncTeleBot = MockAsyncTeleBot
    except:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: telebot –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)

try:
    from config import config
    from enhanced_logging import BotLogger
    from app.core.error_handler import (
        ErrorHandler,
        TelegramApiError,
        InvalidUserInputError,
        GroqApiError,
        InputValidator,
        handle_bot_errors
    )
    from app.core import state_manager
    from groq_integration import generate_reply_variants
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    sys.exit(1)


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = BotLogger(
            log_dir="logs",
            log_file="bot.log",
            logger_name="TelegramBot"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        self.error_handler = ErrorHandler(self.logger)
        
        self.logger.log_info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
        if not config.TELEGRAM_BOT_TOKEN:
            self.logger.log_error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise ValueError("TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        try:
            self.bot = AsyncTeleBot(
                token=config.TELEGRAM_BOT_TOKEN,
                parse_mode='HTML'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
            )
            self.logger.log_info("‚úÖ AsyncTeleBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            raise
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        self.logger.log_info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    
    async def _safe_send_message(self, chat_id: int, text: str, **kwargs) -> Optional[types.Message]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            return await self.bot.send_message(chat_id, text, **kwargs)
        except Exception as e:
            error_result = self.error_handler.handle_error(e, {
                'function': '_safe_send_message',
                'chat_id': chat_id,
                'text_length': len(text)
            })
            self.logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return None
    
    async def _safe_reply_to(self, message: types.Message, text: str, **kwargs) -> Optional[types.Message]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            return await self.bot.reply_to(message, text, **kwargs)
        except Exception as e:
            error_result = self.error_handler.handle_error(e, {
                'function': '_safe_reply_to',
                'user_id': message.from_user.id,
                'text_length': len(text)
            })
            self.logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            return None
    
    async def _safe_edit_message(self, chat_id: int, message_id: int, text: str, **kwargs) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.edit_message_text(text, chat_id, message_id, **kwargs)
            return True
        except Exception as e:
            self.logger.log_warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        async def handle_start(message):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = InputValidator.validate_user_id(message.from_user.id)
                username = message.from_user.username or "Unknown"
                first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã —Å user_id —á–µ—Ä–µ–∑ BotLogger
                self.logger.log_user_activity(
                    user_id, 
                    "start_command", 
                    {
                        "username": username, 
                        "first_name": first_name,
                        "chat_id": message.chat.id,
                        "chat_type": message.chat.type
                    }
                )
                
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                welcome_text = (
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ "
                    "—Å –ø–æ–º–æ—â—å—é AI Groq. –ò—Å–ø–æ–ª—å–∑—É–π /reply <—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ> –¥–ª—è –Ω–∞—á–∞–ª–∞. "
                    "/help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
                )
                
                result = await self._safe_reply_to(message, welcome_text)
                
                if result:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.logger.log_info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
                
            except InvalidUserInputError as e:
                self.logger.log_warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ /start: {e}")
                await self._safe_reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_start',
                    'user_id': getattr(message.from_user, 'id', 'unknown')
                })
                
                await self._safe_reply_to(message, error_result['user_message'])
        
        @self.bot.message_handler(commands=['help'])
        async def handle_help(message):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(message.from_user.id)
                username = message.from_user.username or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.logger.log_user_activity(user_id, "help_command", {"username": username})
                
                # –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                help_text = (
                    "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:</b>\n\n"
                    "üöÄ <b>/start</b> - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
                    "‚ùì <b>/help</b> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                    "üí¨ <b>/reply &lt;—Å–æ–æ–±—â–µ–Ω–∏–µ&gt;</b> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤\n"
                    "üìä <b>/stats</b> - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "üí° <b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
                    "<code>/reply –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?</code>\n\n"
                    "ü§ñ –Ø —Å–æ–∑–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI Groq!"
                )
                
                result = await self._safe_reply_to(message, help_text, parse_mode='HTML')
                
                if result:
                    self.logger.log_info(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_help',
                    'user_id': getattr(message.from_user, 'id', 'unknown')
                })
                
                await self._safe_reply_to(message, error_result['user_message'])
        
        @self.bot.message_handler(commands=['reply'])
        async def handle_reply(message):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(message.from_user.id)
                username = message.from_user.username or "Unknown"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reply
                text_parts = message.text.split(' ', 1)
                
                if len(text_parts) < 2:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
                    raise InvalidUserInputError(
                        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reply",
                        user_input=message.text,
                        validation_rule="reply_message_required"
                    )
                
                user_message = text_parts[1].strip()
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                InputValidator.validate_message_length(user_message, config.MAX_MESSAGE_LENGTH)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ /reply –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                reply_count = await state_manager.increment_user_stat(user_id, 'reply_requests')
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.logger.log_user_activity(
                    user_id, 
                    "reply_command", 
                    {
                        "username": username,
                        "message_length": len(user_message),
                        "reply_count": reply_count,
                        "original_message": user_message[:100] + "..." if len(user_message) > 100 else user_message
                    }
                )
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å callback
                import hashlib
                message_hash = hashlib.md5(user_message.encode()).hexdigest()[:8]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ StateManager
                await state_manager.set_user_message(message_hash, user_id, user_message)
                await state_manager.set_last_message_for_reply(user_id, user_message, message_hash)
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
                markup = types.InlineKeyboardMarkup()
                styles = [
                    ("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "friendly"),
                    ("–§–ª–∏—Ä—Ç—É—é—â–∏–π", "flirty"),
                    ("–°—Ç—Ä–∞—Å—Ç–Ω—ã–π", "passionate"),
                    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "romantic"),
                    ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "professional")
                ]
                
                for style_name, style_code in styles:
                    callback_data = f"style:{style_code}:{message_hash}"
                    markup.add(types.InlineKeyboardButton(style_name, callback_data=callback_data))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è
                reply_text = (
                    f"üí¨ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                    f"<i>\"{user_message}\"</i>\n\n"
                    f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:</b>"
                )
                
                result = await self._safe_reply_to(message, reply_text, reply_markup=markup, parse_mode='HTML')
                
                if result:
                    self.logger.log_info(f"‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except InvalidUserInputError as e:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                help_text = (
                    "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reply\n\n"
                    "üìù –ü—Ä–∏–º–µ—Ä: /reply –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n\n"
                    "–Ø —Å–æ–∑–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI Groq!"
                )
                await self._safe_reply_to(message, help_text)
                
                self.logger.log_warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_reply',
                    'user_id': getattr(message.from_user, 'id', 'unknown'),
                    'message_text': getattr(message, 'text', '')[:100]
                })
                
                await self._safe_reply_to(message, error_result['user_message'])
        
        @self.bot.message_handler(commands=['stats'])
        async def handle_stats(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(message.from_user.id)
                username = message.from_user.username or "Unknown"
                
                self.logger.log_user_activity(user_id, "stats_command", {"username": username})
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ StateManager
                reply_requests = await state_manager.get_user_stat(user_id, 'reply_requests')
                replies_selected = await state_manager.get_user_stat(user_id, 'replies_selected')
                user_stats = await state_manager.get_user_stats(user_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                if reply_requests > 0:
                    completion_rate = (replies_selected / reply_requests * 100) if reply_requests > 0 else 0
                    stats_text = (
                        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                        f"üìù <b>Username:</b> @{username}\n\n"
                        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                        f"üí¨ –ó–∞–ø—Ä–æ—Å–æ–≤ /reply: <b>{reply_requests}</b>\n"
                        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>{replies_selected}</b>\n"
                        f"üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: <b>{completion_rate:.1f}%</b>\n"
                        f"üéØ –°—Ç–∞—Ç—É—Å: {'üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!' if reply_requests >= 5 else '‚ú® –ù–æ–≤–∏—á–æ–∫'}\n\n"
                        f"{'üèÜ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞!' if reply_requests >= 10 else 'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!'}"
                    )
                else:
                    stats_text = (
                        f"üìä <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                        f"üìù <b>Username:</b> @{username}\n\n"
                        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                        f"üí¨ –ó–∞–ø—Ä–æ—Å–æ–≤ /reply: <b>0</b>\n"
                        f"üéØ –°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤–∏—á–æ–∫\n\n"
                        f"üí° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–æ –≤—ã —É–∂–µ –º–æ–ª–æ–¥–µ—Ü!\n"
                        f"üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI!"
                    )
                
                result = await self._safe_reply_to(message, stats_text, parse_mode='HTML')
                
                if result:
                    self.logger.log_info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–ø—Ä–æ—Å–æ–≤ /reply: {reply_requests})")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_stats',
                    'user_id': getattr(message.from_user, 'id', 'unknown')
                })
                
                await self._safe_reply_to(message, error_result['user_message'])
        
        @self.bot.message_handler(commands=['ppv'])
        async def handle_ppv(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ppv —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(message.from_user.id)
                username = message.from_user.username or "Unknown"
                
                self.logger.log_user_activity(user_id, "ppv_command", {"username": username})
                
                # MVP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                ppv_text = (
                    f"üîí <b>PPV –ö–æ–Ω—Ç–µ–Ω—Ç</b>\n\n"
                    f"üöß –§—É–Ω–∫—Ü–∏—è PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                    f"üìÖ –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                    f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                    f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" 
                    f"‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
                    f"üîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
                )
                
                result = await self._safe_reply_to(message, ppv_text, parse_mode='HTML')
                
                if result:
                    self.logger.log_info(f"‚úÖ PPV —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_ppv',
                    'user_id': getattr(message.from_user, 'id', 'unknown')
                })
                
                await self._safe_reply_to(message, error_result['user_message'])
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('style:'))
        async def handle_style_callback(call):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(call.from_user.id)
                
                # –ü–∞—Ä—Å–∏–º callback_data: style:style_code:message_hash
                parts = call.data.split(':')
                if len(parts) != 3:
                    raise InvalidUserInputError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
                
                _, style_code, message_hash = parts
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∏–ª—å
                InputValidator.validate_style(style_code)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                stored_message = await state_manager.get_user_message(message_hash)
                if not stored_message:
                    raise InvalidUserInputError("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ")
                
                user_message = stored_message['message']
                
                self.logger.log_user_activity(user_id, "style_selected", {
                    "style": style_code,
                    "message_hash": message_hash
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                from app.core import memory_cache
                cache_key = memory_cache.get_cache_key(style_code, hashlib.md5(user_message.encode()).hexdigest())
                cached_variants = memory_cache.get(cache_key)
                
                if cached_variants:
                    self.logger.log_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    variants = cached_variants
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    processing_text = "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI Groq... ‚è≥"
                    processing_msg = await self.bot.edit_message_text(
                        processing_text, 
                        call.message.chat.id, 
                        call.message.message_id
                    )
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ Groq API
                        variants = await generate_reply_variants(user_message, style_code)
                        
                        if not variants or len(variants) == 0:
                            raise GroqApiError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç API")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        memory_cache.set(cache_key, variants)
                        
                        self.logger.log_api_call("Groq API —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤", {
                            "style": style_code,
                            "variants_count": len(variants),
                            "user_id": user_id
                        })
                        
                    except GroqApiError as groq_error:
                        self.logger.log_error(f"–û—à–∏–±–∫–∞ Groq API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {groq_error}")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        fallback_variants = [
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä",
                            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ! üíï",
                            "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üåü"
                        ]
                        variants = fallback_variants
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        error_text = (
                            "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                            "–ü–æ–∫–∞–∑—ã–≤–∞—é –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                        )
                        await self._safe_edit_message(call.message.chat.id, call.message.message_id, error_text)
                        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ state manager
                await state_manager.set_reply_variants(user_id, message_hash, variants)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                markup = types.InlineKeyboardMarkup()
                for i, variant in enumerate(variants):
                    callback_data = f"select_reply:{i}:{message_hash}"
                    button_text = f"{i+1}. {variant[:50]}{'...' if len(variant) > 50 else ''}"
                    markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                style_names = {
                    'friendly': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
                    'flirty': '–§–ª–∏—Ä—Ç—É—é—â–∏–π', 
                    'passionate': '–°—Ç—Ä–∞—Å—Ç–Ω—ã–π',
                    'romantic': '–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π',
                    'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'
                }
                
                variants_text = (
                    f"üé® <b>–°—Ç–∏–ª—å:</b> {style_names.get(style_code, style_code)}\n\n"
                    f"üí¨ <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n\n"
                )
                
                for i, variant in enumerate(variants):
                    variants_text += f"<b>{i+1}.</b> {variant}\n\n"
                
                variants_text += "üëÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:</b>"
                
                await self._safe_edit_message(
                    call.message.chat.id, 
                    call.message.message_id, 
                    variants_text, 
                    reply_markup=markup, 
                    parse_mode='HTML'
                )
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await self.bot.answer_callback_query(call.id, f"‚úÖ –°—Ç–∏–ª—å '{style_names.get(style_code)}' –≤—ã–±—Ä–∞–Ω!")
                
            except InvalidUserInputError as e:
                await self.bot.answer_callback_query(call.id, f"‚ùå {e.message}", show_alert=True)
                self.logger.log_warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ style callback: {e}")
                
            except GroqApiError as e:
                await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                self.logger.log_error(f"–û—à–∏–±–∫–∞ Groq API –≤ style callback: {e}")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_style_callback',
                    'user_id': getattr(call.from_user, 'id', 'unknown'),
                    'callback_data': call.data
                })
                
                await self.bot.answer_callback_query(
                    call.id, 
                    error_result['user_message'][:200],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã callback –æ—Ç–≤–µ—Ç–∞
                    show_alert=True
                )
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('select_reply:'))
        async def handle_select_reply_callback(call):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                user_id = InputValidator.validate_user_id(call.from_user.id)
                
                # –ü–∞—Ä—Å–∏–º callback_data: select_reply:variant_index:message_hash
                parts = call.data.split(':')
                if len(parts) != 3:
                    raise InvalidUserInputError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
                
                _, variant_index_str, message_hash = parts
                
                try:
                    variant_index = int(variant_index_str)
                except ValueError:
                    raise InvalidUserInputError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                variants = await state_manager.get_reply_variants(user_id, message_hash)
                if not variants:
                    raise InvalidUserInputError("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                if variant_index < 0 or variant_index >= len(variants):
                    raise InvalidUserInputError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                
                selected_variant = variants[variant_index]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                original_message_data = await state_manager.get_last_message_for_reply(user_id)
                original_message_text = original_message_data.get('text') if original_message_data else None
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                selected_count = await state_manager.increment_user_stat(user_id, 'replies_selected')
                
                self.logger.log_user_activity(user_id, "reply_selected", {
                    "variant_index": variant_index + 1,  # –î–ª—è –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1-based –∏–Ω–¥–µ–∫—Å
                    "message_hash": message_hash,
                    "selected_text": selected_variant[:100],
                    "full_text_length": len(selected_variant),
                    "selected_count": selected_count,
                    "original_message_preview": original_message_text[:50] if original_message_text else None
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                final_message = (
                    f"üíå <b>–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
                    f"<blockquote>{selected_variant}</blockquote>\n\n"
                    f"üìã <i>–ì–æ—Ç–æ–≤–æ! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç.</i>"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await self._safe_send_message(
                    call.message.chat.id, 
                    final_message,
                    parse_mode='HTML'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
                confirmation_text = (
                    f"‚úÖ <b>–í–∞—Ä–∏–∞–Ω—Ç #{variant_index + 1} –≤—ã–±—Ä–∞–Ω!</b>\n\n"
                    f"üì® –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                    f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                )
                
                await self._safe_edit_message(
                    call.message.chat.id, 
                    call.message.message_id, 
                    confirmation_text, 
                    parse_mode='HTML'
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await state_manager.clear_reply_variants(user_id, message_hash)
                await state_manager.delete_user_message(message_hash)
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await self.bot.answer_callback_query(call.id, f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç #{variant_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                
            except InvalidUserInputError as e:
                await self.bot.answer_callback_query(call.id, f"‚ùå {e.message}", show_alert=True)
                self.logger.log_warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ select reply callback: {e}")
                
            except Exception as e:
                error_result = self.error_handler.handle_error(e, {
                    'function': 'handle_select_reply_callback',
                    'user_id': getattr(call.from_user, 'id', 'unknown'),
                    'callback_data': call.data
                })
                
                await self.bot.answer_callback_query(
                    call.id, 
                    error_result['user_message'][:200],
                    show_alert=True
                )
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.logger.log_info("üöÄ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.bot.polling(non_stop=True)
        except Exception as e:
            error_result = self.error_handler.handle_error(e, {
                'function': 'start_polling'
            })
            self.logger.log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.logger.log_info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            await self.bot.stop_polling()
            self.logger.log_info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    print("ü§ñ OF Assistant Telegram Bot")
    print(f"üêç Python {sys.version}")
    print("=" * 50)
    
    bot = None
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = TelegramBot()
        
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        print("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 50)
        
        await bot.start_polling()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if bot:
            await bot.stop()
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if bot and hasattr(bot, 'logger'):
            bot.logger.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
        if bot:
            await bot.stop()
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 