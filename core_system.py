#!/usr/bin/env python3
"""
üî• UNIFIED CORE SYSTEM üî•
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, backup'–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
–õ—É—á—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""

import os
import sys
import json
import time
import psutil
import shutil
import sqlite3
import threading
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from collections import defaultdict, deque
from pathlib import Path
import hashlib
import tempfile
import tarfile

@dataclass
class SystemMetrics:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    timestamp: str
    cpu_percent: float
    memory_percent: float
    memory_mb: float
    active_users: int
    messages_per_minute: int
    response_time_avg: float
    error_count: int
    uptime_seconds: int

@dataclass
class BackupInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backup"""
    backup_id: str
    timestamp: str
    backup_type: str
    file_path: str
    size_bytes: int
    checksum: str
    description: str

class CoreSystem:
    """–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.db_path = "core_system.db"
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.metrics_history = deque(maxlen=1440)  # 24 —á–∞—Å–∞
        self.user_sessions = {}
        self.error_log = deque(maxlen=1000)
        self.response_times = deque(maxlen=100)
        self.start_time = datetime.now()
        
        # Backup
        self.backup_targets = {
            'users': ['premium_users.json', 'users.json'],
            'cache': ['response_cache.json'],
            'config': ['config.py', 'monetization_config.py'],
            'logs': ['logs/*.log']
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'auto_backup_enabled': True,
            'backup_interval_hours': 6,
            'retention_days': 30,
            'monitoring_enabled': True,
            'max_backups': 50
        }
        
        self.init_database()
        self.start_background_tasks()
        
        print("üî• Core System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT,
                cpu_percent REAL,
                memory_percent REAL,
                memory_mb REAL,
                active_users INTEGER,
                messages_per_minute INTEGER,
                response_time_avg REAL,
                error_count INTEGER,
                uptime_seconds INTEGER
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ backup'–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS backups (
                backup_id TEXT PRIMARY KEY,
                timestamp TEXT,
                backup_type TEXT,
                file_path TEXT,
                size_bytes INTEGER,
                checksum TEXT,
                description TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_activity (
                user_id INTEGER,
                timestamp TEXT,
                action TEXT,
                response_time REAL,
                PRIMARY KEY (user_id, timestamp)
            )
        ''')
        
        conn.commit()
        conn.close()

    def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        if self.config['monitoring_enabled']:
            monitor_thread = threading.Thread(target=self._monitoring_worker)
            monitor_thread.daemon = True
            monitor_thread.start()
        
        if self.config['auto_backup_enabled']:
            backup_thread = threading.Thread(target=self._backup_worker)
            backup_thread.daemon = True
            backup_thread.start()

    def _monitoring_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        while True:
            try:
                metrics = self.collect_metrics()
                self.save_metrics(metrics)
                self.metrics_history.append(metrics)
                time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                self.log_error("monitoring_error", str(e))
                time.sleep(30)

    def _backup_worker(self):
        """–§–æ–Ω–æ–≤—ã–µ backup'—ã"""
        while True:
            try:
                time.sleep(self.config['backup_interval_hours'] * 3600)
                self.create_backup("auto")
                self.cleanup_old_backups()
            except Exception as e:
                self.log_error("backup_error", str(e))
                time.sleep(3600)

    def collect_metrics(self) -> SystemMetrics:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        memory_mb = memory.used / 1024 / 1024
        
        current_time = datetime.now()
        active_users = len([s for s in self.user_sessions.values() 
                           if datetime.fromisoformat(s['last_activity']) > current_time - timedelta(minutes=5)])
        
        messages_per_minute = sum(1 for t in self.response_times if t > 0)
        response_time_avg = sum(self.response_times) / len(self.response_times) if self.response_times else 0
        error_count = len([e for e in self.error_log 
                          if datetime.fromisoformat(e['timestamp']) > current_time - timedelta(minutes=1)])
        
        uptime_seconds = int((current_time - self.start_time).total_seconds())
        
        return SystemMetrics(
            timestamp=current_time.isoformat(),
            cpu_percent=cpu_percent,
            memory_percent=memory_percent,
            memory_mb=memory_mb,
            active_users=active_users,
            messages_per_minute=messages_per_minute,
            response_time_avg=response_time_avg,
            error_count=error_count,
            uptime_seconds=uptime_seconds
        )

    def track_user_action(self, user_id: int, action: str, response_time: float = 0.0):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().isoformat()
        
        self.user_sessions[user_id] = {
            'last_activity': timestamp,
            'session_messages': self.user_sessions.get(user_id, {}).get('session_messages', 0) + 1
        }
        
        if response_time > 0:
            self.response_times.append(response_time)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO user_activity 
            (user_id, timestamp, action, response_time)
            VALUES (?, ?, ?, ?)
        ''', (user_id, timestamp, action, response_time))
        conn.commit()
        conn.close()

    def log_error(self, error_type: str, error_message: str, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        error_entry = {
            'timestamp': datetime.now().isoformat(),
            'error_type': error_type,
            'error_message': error_message,
            'user_id': user_id
        }
        self.error_log.append(error_entry)

    def create_backup(self, backup_type: str = "manual", description: str = "") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ backup"""
        timestamp = datetime.now()
        backup_id = f"backup_{timestamp.strftime('%Y%m%d_%H%M%S')}"
        
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                backup_temp_path = Path(temp_dir) / backup_id
                backup_temp_path.mkdir()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
                for category, files in self.backup_targets.items():
                    category_dir = backup_temp_path / category
                    category_dir.mkdir()
                    
                    for file_pattern in files:
                        for file_path in Path('.').glob(file_pattern):
                            if file_path.exists() and file_path.is_file():
                                dest_path = category_dir / file_path.name
                                shutil.copy2(file_path, dest_path)
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'backup_id': backup_id,
                    'timestamp': timestamp.isoformat(),
                    'backup_type': backup_type,
                    'description': description or f"Auto backup - {timestamp.strftime('%Y-%m-%d %H:%M')}",
                    'created_by': 'core_system'
                }
                
                with open(backup_temp_path / 'metadata.json', 'w') as f:
                    json.dump(metadata, f, indent=2)
                
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                archive_path = self.backup_dir / f"{backup_id}.tar.gz"
                with tarfile.open(archive_path, 'w:gz') as tar:
                    tar.add(backup_temp_path, arcname=backup_id)
                
                # –í—ã—á–∏—Å–ª—è–µ–º checksum
                checksum = self._calculate_checksum(archive_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup
                backup_info = BackupInfo(
                    backup_id=backup_id,
                    timestamp=timestamp.isoformat(),
                    backup_type=backup_type,
                    file_path=str(archive_path),
                    size_bytes=archive_path.stat().st_size,
                    checksum=checksum,
                    description=metadata['description']
                )
                
                self._save_backup_info(backup_info)
                
                print(f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {backup_id}")
                return backup_id
                
        except Exception as e:
            self.log_error("backup_creation_failed", str(e))
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
            return ""

    def restore_backup(self, backup_id: str, restore_path: str = ".") -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup"""
        try:
            backup_info = self._get_backup_info(backup_id)
            if not backup_info:
                print(f"‚ùå Backup {backup_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            archive_path = Path(backup_info.file_path)
            if not archive_path.exists():
                print(f"‚ùå –§–∞–π–ª backup –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {archive_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
            if self._calculate_checksum(archive_path) != backup_info.checksum:
                print(f"‚ùå Checksum –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è backup {backup_id}")
                return False
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            with tarfile.open(archive_path, 'r:gz') as tar:
                tar.extractall(restore_path)
            
            print(f"‚úÖ Backup {backup_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            self.log_error("backup_restore_failed", str(e))
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.metrics_history:
            return {"status": "no_data", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"}
        
        latest_metrics = self.metrics_history[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = "healthy"
        if latest_metrics.cpu_percent > 80 or latest_metrics.memory_percent > 80:
            status = "warning"
        if latest_metrics.cpu_percent > 95 or latest_metrics.memory_percent > 95:
            status = "critical"
        
        return {
            "status": status,
            "timestamp": latest_metrics.timestamp,
            "cpu_percent": latest_metrics.cpu_percent,
            "memory_percent": latest_metrics.memory_percent,
            "memory_mb": latest_metrics.memory_mb,
            "active_users": latest_metrics.active_users,
            "messages_per_minute": latest_metrics.messages_per_minute,
            "response_time_avg": latest_metrics.response_time_avg,
            "error_count": latest_metrics.error_count,
            "uptime": self._format_uptime(latest_metrics.uptime_seconds),
            "recent_errors": list(self.error_log)[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
        }

    def list_backups(self) -> List[BackupInfo]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö backup'–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT backup_id, timestamp, backup_type, file_path, 
                   size_bytes, checksum, description
            FROM backups 
            ORDER BY timestamp DESC
        ''')
        
        backups = []
        for row in cursor.fetchall():
            backups.append(BackupInfo(*row))
        
        conn.close()
        return backups

    def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤"""
        cutoff_date = datetime.now() - timedelta(days=self.config['retention_days'])
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT backup_id, file_path FROM backups 
            WHERE timestamp < ?
        ''', (cutoff_date.isoformat(),))
        
        for backup_id, file_path in cursor.fetchall():
            try:
                Path(file_path).unlink(missing_ok=True)
                cursor.execute('DELETE FROM backups WHERE backup_id = ?', (backup_id,))
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: {backup_id}")
            except Exception as e:
                self.log_error("backup_cleanup_failed", str(e))
        
        conn.commit()
        conn.close()

    def emergency_backup(self) -> str:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π backup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.create_backup("emergency", "Emergency backup of critical data")

    def save_metrics(self, metrics: SystemMetrics):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO metrics 
            (timestamp, cpu_percent, memory_percent, memory_mb,
             active_users, messages_per_minute, response_time_avg,
             error_count, uptime_seconds)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            metrics.timestamp, metrics.cpu_percent, metrics.memory_percent,
            metrics.memory_mb, metrics.active_users, metrics.messages_per_minute,
            metrics.response_time_avg, metrics.error_count, metrics.uptime_seconds
        ))
        conn.commit()
        conn.close()

    def _save_backup_info(self, backup_info: BackupInfo):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO backups 
            (backup_id, timestamp, backup_type, file_path, 
             size_bytes, checksum, description)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            backup_info.backup_id, backup_info.timestamp, backup_info.backup_type,
            backup_info.file_path, backup_info.size_bytes, backup_info.checksum,
            backup_info.description
        ))
        conn.commit()
        conn.close()

    def _get_backup_info(self, backup_id: str) -> Optional[BackupInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT backup_id, timestamp, backup_type, file_path,
                   size_bytes, checksum, description
            FROM backups WHERE backup_id = ?
        ''', (backup_id,))
        
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return BackupInfo(*row)
        return None

    def _calculate_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ checksum —Ñ–∞–π–ª–∞"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

    def _format_uptime(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        minutes = (seconds % 3600) // 60
        return f"{days}d {hours}h {minutes}m"

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("üõë Core System: –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π backup –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
        self.create_backup("shutdown", "Backup before system shutdown")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
core_system = CoreSystem()

def get_system_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return core_system.get_system_status()

def create_backup(description: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å backup"""
    return core_system.create_backup("manual", description)

def emergency_backup() -> str:
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π backup"""
    return core_system.emergency_backup()

def track_user(user_id: int, action: str, response_time: float = 0.0):
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return core_system.track_user_action(user_id, action, response_time)

def log_error(error_type: str, message: str, user_id: Optional[int] = None):
    """–ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É"""
    return core_system.log_error(error_type, message, user_id)

if __name__ == "__main__":
    print("üî• Core System –∑–∞–ø—É—â–µ–Ω –≤ standalone —Ä–µ–∂–∏–º–µ")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("  backup   - —Å–æ–∑–¥–∞—Ç—å backup")
    print("  list     - —Å–ø–∏—Å–æ–∫ backup'–æ–≤")
    print("  help     - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    
    while True:
        try:
            cmd = input("\n> ").strip().lower()
            
            if cmd == "status":
                status = get_system_status()
                print(json.dumps(status, indent=2, ensure_ascii=False))
            
            elif cmd == "backup":
                description = input("–û–ø–∏—Å–∞–Ω–∏–µ backup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
                backup_id = create_backup(description)
                if backup_id:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω backup: {backup_id}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup")
            
            elif cmd == "list":
                backups = core_system.list_backups()
                for backup in backups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    size_mb = backup.size_bytes / 1024 / 1024
                    print(f"{backup.backup_id} | {backup.timestamp} | "
                          f"{backup.backup_type} | {size_mb:.1f}MB | {backup.description}")
            
            elif cmd in ["exit", "quit", "q"]:
                core_system.shutdown()
                break
            
            elif cmd == "help":
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("  status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
                print("  backup   - —Å–æ–∑–¥–∞—Ç—å backup")
                print("  list     - —Å–ø–∏—Å–æ–∫ backup'–æ–≤")
                print("  exit     - –≤—ã—Ö–æ–¥")
            
            else:
                print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            core_system.shutdown()
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 