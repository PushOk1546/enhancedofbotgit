"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª OF Assistant Bot.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pyTelegramBotAPI (telebot) –≤–º–µ—Å—Ç–æ python-telegram-bot.
"""

import logging
import asyncio
import signal
import sys
from typing import Optional, Dict, Any
from telebot.async_telebot import AsyncTeleBot
from telebot import types, asyncio_helper
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config.config import BOT_TOKEN, MODELS, SURVEY_STEPS, GROQ_KEY, FLIRT_STYLES, PPV_STYLES
from utils import (
    setup_logging, get_model_keyboard, get_survey_keyboard, 
    get_flirt_style_keyboard, get_main_keyboard, get_ppv_style_keyboard,
    get_relationship_stage_keyboard, get_quick_continue_keyboard,
    get_smart_continuation_keyboard
)
from state_manager import StateManager
from handlers import (
    handle_start_command,
    handle_model_command,
    handle_flirt_command,
    handle_ppv_command,
    handle_set_ppv_reminder_command,
    set_state_manager
)
from api import generate_groq_response
from chat_handlers import ChatHandlers

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logging()

class BotManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OF Assistant Bot"""
    
    def __init__(self):
        self.bot: Optional[AsyncTeleBot] = None
        self.state_manager: Optional[StateManager] = None
        self.is_running = False
        self._shutdown_event = asyncio.Event()
        self.chat_handlers: Optional[ChatHandlers] = None
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self._validate_config():
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            load_dotenv()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è telebot
            asyncio_helper.SESSION_TIME_TO_LIVE = 5 * 60  # 5 –º–∏–Ω—É—Ç
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = AsyncTeleBot(BOT_TOKEN, parse_mode='HTML')
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            self.state_manager = StateManager()
            
            # –ü–µ—Ä–µ–¥–∞–µ–º state_manager –≤ handlers
            set_state_manager(self.state_manager)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–æ–≤
            self.chat_handlers = ChatHandlers(self.state_manager)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
            self._setup_signal_handlers()
            
            logger.info("‚úÖ OF Assistant Bot initialization completed successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {str(e)}", exc_info=True)
            return False
    
    def _validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        errors = []
        
        if not BOT_TOKEN:
            errors.append("BOT_TOKEN is not set")
        elif not BOT_TOKEN.strip():
            errors.append("BOT_TOKEN is empty")
        elif len(BOT_TOKEN.split(':')) != 2:
            errors.append("BOT_TOKEN has invalid format")
            
        if not GROQ_KEY:
            errors.append("GROQ_KEY is not set")
        elif not GROQ_KEY.strip():
            errors.append("GROQ_KEY is empty")
            
        if not MODELS:
            errors.append("MODELS configuration is empty")
            
        if errors:
            for error in errors:
                logger.error(f"‚ùå Configuration error: {error}")
            return False
            
        logger.info("‚úÖ Configuration validation passed")
        return True
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        @self.bot.message_handler(commands=['start'])
        async def start_handler(message):
            await self._safe_handler_execution(
                handle_start_command, self.bot, message
            )

        @self.bot.message_handler(commands=['model'])
        async def model_handler(message):
            await self._safe_handler_execution(
                handle_model_command, self.bot, message
            )

        @self.bot.message_handler(commands=['flirt'])
        async def flirt_handler(message):
            await self._safe_handler_execution(
                handle_flirt_command, self.bot, message
            )

        @self.bot.message_handler(commands=['ppv'])
        async def ppv_handler(message):
            await self._safe_handler_execution(
                handle_ppv_command, self.bot, message
            )

        @self.bot.message_handler(commands=['set_ppv_reminder'])
        async def set_ppv_reminder_handler(message):
            await self._safe_handler_execution(
                handle_set_ppv_reminder_command, self.bot, message
            )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
        @self.bot.callback_query_handler(func=lambda call: True)
        async def callback_query_handler(call):
            await self._handle_callback_query(call)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.bot.message_handler(content_types=['text'])
        async def text_handler(message):
            await self._handle_text_message(message)
    
    async def _safe_handler_execution(self, handler_func, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
        try:
            await handler_func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in handler {handler_func.__name__}: {str(e)}", exc_info=True)
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                if args and hasattr(args[1], 'from_user'):
                    await self.bot.send_message(
                        args[1].from_user.id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    async def _handle_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not call or not call.from_user or not call.data:
                logger.warning("Invalid callback query data")
                await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query
            try:
                await self.bot.answer_callback_query(call.id)
            except Exception as callback_error:
                error_msg = str(callback_error)
                if "query is too old" in error_msg or "response timeout expired" in error_msg:
                    logger.debug(f"Callback query expired (ignored): {error_msg}")
                    await self.bot.send_message(
                        call.message.chat.id,
                        "‚è∞ –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."
                    )
                    return
                else:
                    logger.warning(f"Callback query answer failed: {error_msg}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback queries
            data = call.data
            
            # üÜï –§–ê–ó–´ 2-3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            if data == "continue_writing":
                await self._handle_continue_writing(call, user)
            elif data == "add_flirt":
                await self._handle_add_flirt(call, user)
            elif data == "quick_ppv":
                await self._handle_quick_ppv(call, user)
            elif data == "quick_tips":
                await self._handle_quick_tips(call, user)
            # –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            elif data == "get_closer":
                await self._handle_get_closer(call, user)
            elif data == "light_flirt":
                await self._handle_light_flirt(call, user)
            elif data == "show_content":
                await self._handle_show_content(call, user)
            elif data == "casual_chat":
                await self._handle_casual_chat(call, user)
            elif data == "hot_content":
                await self._handle_hot_content(call, user)
            elif data == "exclusive_content":
                await self._handle_exclusive_content(call, user)
            elif data == "tips_for_content":
                await self._handle_tips_for_content(call, user)
            elif data == "teasing_response":
                await self._handle_teasing_response(call, user)
            elif data == "flirty_thanks":
                await self._handle_flirty_thanks(call, user)
            elif data == "escalate_flirt":
                await self._handle_escalate_flirt(call, user)
            elif data == "return_compliment":
                await self._handle_return_compliment(call, user)
            elif data == "reward_compliment":
                await self._handle_reward_compliment(call, user)
            elif data == "continue_conversation":
                await self._handle_continue_conversation(call, user)
            elif data == "suggest_content":
                await self._handle_suggest_content(call, user)
            elif data == "playful_response":
                await self._handle_playful_response(call, user)
            # üÜï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:
            elif data == "tease_more":
                await self._handle_tease_more(call, user)
            elif data == "request_payment":
                await self._handle_request_payment(call, user)
            elif data == "ppv_offer":
                await self._handle_ppv_offer(call, user)
            elif data == "vip_content":
                await self._handle_vip_content(call, user)
            elif data == "more_flirt":
                await self._handle_more_flirt(call, user)
            elif data == "escalate_passion":
                await self._handle_escalate_passion(call, user)
            elif data == "special_content":
                await self._handle_special_content(call, user)
            elif data == "flirt_tips":
                await self._handle_flirt_tips(call, user)
            elif data == "continue_chat":
                await self._handle_continue_chat(call, user)
            elif data == "transition_flirt":
                await self._handle_transition_flirt(call, user)
            elif data == "tell_about_self":
                await self._handle_tell_about_self(call, user)
            elif data == "ask_question":
                await self._handle_ask_question(call, user)
            # Existing handlers
            elif data.startswith("model_"):
                model_key = data.replace("model_", "")
                await self._handle_model_change(call, user, model_key)
            elif data.startswith("flirt_style_"):
                style_id = data.replace("flirt_style_", "")
                await self._handle_flirt_style(call, user, style_id)
            elif data.startswith("ppv_style_"):
                style_name = data.replace("ppv_style_", "")
                await self._handle_ppv_style(call, user, style_name)
            elif data.startswith("survey_"):
                await self._handle_survey_step(call, user)
            elif data.startswith("chat_"):
                # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö chat callbacks —á–µ—Ä–µ–∑ ChatHandlers
                await self._handle_chat_callback(call, data)
            elif data == "back_to_main":
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await self._handle_back_to_main(call)
            else:
                logger.warning(f"Unknown callback data: {data}")
                
        except Exception as e:
            logger.error(f"Error in callback query handler: {str(e)}", exc_info=True)
    
    async def _handle_model_change(self, call, user, model_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ AI"""
        if model_key in MODELS:
            user.model = model_key
            self.state_manager.save_user(call.from_user.id, user)
            
            model_info = MODELS[model_key]
            text = f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{model_info['description']}</b>\n\n"
            text += f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            text += f"‚Ä¢ –¢–æ–∫–µ–Ω—ã: {model_info.get('max_tokens', 'auto')}\n"
            text += f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {model_info.get('temperature', 0.8)}"
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                parse_mode="HTML",
            )
    
    async def _handle_flirt_style(self, call, user, style_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è —Ñ–ª–∏—Ä—Ç–∞"""
        # –ù–∞–π–¥–µ–º —Å—Ç–∏–ª—å –ø–æ id
        style_info = None
        style_name = None
        
        for name, info in FLIRT_STYLES.items():
            if info['id'] == style_id:
                style_info = info
                style_name = name
                break
        
        if not style_info:
            logger.error(f"Unknown flirt style id: {style_id}")
            await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–ª–∏—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
        prompt = f"–°–æ–∑–¥–∞–π —Ñ–ª–∏—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '{style_name}': {style_info['description']}"
        
        try:
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            
            text = f"{style_info['emoji']} <b>–§–ª–∏—Ä—Ç ({style_name})</b>\n\n"
            text += response
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"Error generating flirt message: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                error_text,
            )
    
    async def _handle_ppv_style(self, call, user, style_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è PPV"""
        if style_name not in PPV_STYLES:
            logger.error(f"Unknown PPV style: {style_name}")
            await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")
            return
            
        style_description = PPV_STYLES[style_name]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PPV-—Å–æ–æ–±—â–µ–Ω–∏–µ
        prompt = f"–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ PPV —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '{style_name}': {style_description}. –°–¥–µ–ª–∞–π –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º, –∑–∞–º–∞–Ω—á–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º."
        
        try:
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            
            text = f"üíé <b>PPV - {style_name.title()}</b>\n\n"
            text += response
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"Error generating PPV message: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                error_text,
            )
    
    async def _handle_survey_step(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –æ–ø—Ä–æ—Å–∞"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞ - –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if not call.data.startswith("survey_"):
            return
            
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "survey_"
        survey_data = call.data[7:]  # len("survey_") = 7
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –≤ step –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        parts = survey_data.split('_')
        if len(parts) < 2:
            logger.warning(f"Invalid survey callback format: {call.data}")
            return
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ value, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - step
        value = parts[-1]
        step = '_'.join(parts[:-1])
        
        logger.debug(f"Survey callback: step='{step}', value='{value}'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if step == "content_types":
            user.preferences.content_types = [value] if value != "all" else ["photos", "videos", "messages"]
        elif step == "price_range":
            user.preferences.price_range = value
        elif step == "communication_style":
            user.preferences.communication_style = value
        elif step == "notification_frequency":
            user.preferences.notification_frequency = value
        else:
            logger.warning(f"Unknown survey step: {step}")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        next_steps = list(SURVEY_STEPS.keys())
        current_index = next_steps.index(step) if step in next_steps else -1
        
        if current_index + 1 < len(next_steps):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            next_step = next_steps[current_index + 1]
            await self._show_survey_step(call, next_step)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
            user.preferences.completed_survey = True
            self.state_manager.save_user(call.from_user.id, user)
            
            text = "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            text += "–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
            )
    
    async def _show_survey_step(self, call, step):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–≥ –æ–ø—Ä–æ—Å–∞"""
        if step not in SURVEY_STEPS:
            return
            
        step_data = SURVEY_STEPS[step]
        keyboard = get_survey_keyboard(step)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            current_text = call.message.text if call.message.text else ""
            new_text = step_data['question']
            
            if current_text == new_text:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await self.bot.answer_callback_query(call.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
                return
            
            success = await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                step_data['question'],
                reply_markup=keyboard,
                parse_mode=None,
            )
            if not success:
                try:
                    await self.bot.delete_message(
                        call.message.chat.id, call.message.message_id
                    )
                except Exception:
                    pass
        except Exception as e:
            logger.warning(f"Could not edit message, sending new one: {e}")
            try:
                await self.bot.delete_message(
                    call.message.chat.id, call.message.message_id
                )
            except Exception:
                pass
            await self.bot.send_message(
                call.message.chat.id,
                step_data['question'],
                reply_markup=keyboard,
            )
    
    async def _handle_text_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            user = self.state_manager.get_user(user_id)
            text = message.text
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if user.waiting_for_chat_name:
                await self.chat_handlers.process_chat_name_input(self.bot, message)
                return
            elif user.waiting_for_chat_reply:
                await self.chat_handlers.process_chat_reply_input(self.bot, message)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
                await self._handle_write_message(message, user)
            elif text == "üíù –§–ª–∏—Ä—Ç":
                await self._handle_flirt_button(message, user)
            elif text == "üéÅ –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç":
                await self._handle_ppv_button(message, user)
            elif text == "üåü –ß–∞–µ–≤—ã–µ":
                await self._handle_tips_button(message, user)
            elif text == "üë• –ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏":
                await self._handle_chat_management_button(message, user)
            elif text == "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å":
                await self._handle_model_button(message, user)
            elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
                await self._handle_help_button(message, user)
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI
                await self._handle_user_message_generation(message, user, text)
                
        except Exception as e:
            logger.error(f"Error in text message handler: {str(e)}", exc_info=True)
    
    async def _handle_write_message(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'"""
        text = "‚úçÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        text += "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML'
        )
    
    async def _handle_flirt_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–§–ª–∏—Ä—Ç'"""
        text = "üíù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–ª–∏—Ä—Ç–∞:</b>"
        keyboard = get_flirt_style_keyboard()
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML', reply_markup=keyboard
        )
    
    async def _handle_ppv_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'"""
        text = "üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>"
        keyboard = get_ppv_style_keyboard()
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML', reply_markup=keyboard
        )
    
    async def _handle_tips_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ß–∞–µ–≤—ã–µ'"""
        text = "üåü <b>–ó–∞–ø—Ä–æ—Å —á–∞–µ–≤—ã—Ö</b>\n\n"
        text += "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è —Å–æ–∑–¥–∞–º –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞–µ–≤—ã–µ:"
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML'
        )
    
    async def _handle_chat_management_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏'"""
        # –°–æ–∑–¥–∞–µ–º mock callback query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ChatHandlers
        mock_call = types.CallbackQuery(
            id="mock",
            from_user=message.from_user,
            data="chat_management",
            chat_instance="mock_instance",
            json_string="{}",
            message=message
        )
        
        await self.chat_handlers.handle_chat_management(self.bot, mock_call, from_button=True)
    
    async def _handle_model_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å'"""
        current_model = MODELS.get(user.model, {})
        text = f"ü§ñ <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> {current_model.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:"
        
        keyboard = get_model_keyboard()
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML', reply_markup=keyboard
        )
    
    async def _handle_help_button(self, message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
        text = "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        text += "üîπ <b>üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        text += "üîπ <b>üíù –§–ª–∏—Ä—Ç</b> - –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–∏—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π\n"
        text += "üîπ <b>üéÅ –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b> - –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è PPV\n"
        text += "üîπ <b>üåü –ß–∞–µ–≤—ã–µ</b> - –î–µ–ª–∏–∫–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —á–∞–µ–≤—ã–µ\n"
        text += "üîπ <b>üë• –ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏\n"
        text += "üîπ <b>‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å</b> - –í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏\n\n"
        text += "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç!"
        
        await self.bot.send_message(
            message.chat.id, text,
            parse_mode='HTML'
        )
    
    async def _handle_user_message_generation(self, message, user, text):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        üÜï –§–ê–ó–ê 1: –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await self.bot.send_chat_action(message.chat.id, 'typing')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._create_safe_prompt(text, user)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            user.add_message_to_history("user", text)
            user.add_message_to_history("assistant", response)
            user.update_activity()
            self.state_manager.save_user(message.from_user.id, user)
            
            # üÜï –§–ê–ó–ê 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            continue_keyboard = get_quick_continue_keyboard(text)
            await self.bot.send_message(
                message.chat.id, response,
                parse_mode='HTML',
                reply_markup=continue_keyboard  # üÜï –ö–ù–û–ü–ö–ò –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø!
            )
            
        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            await self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _create_safe_prompt(self, text: str, user) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∂–∏–≤–æ–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–ª–µ–∫–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
        
        # üÜï –ê–ù–ì–õ–ò–ô–°–ö–ò–ï –ü–†–û–ú–ü–¢–´ –î–õ–Ø –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–• –ö–õ–ò–ï–ù–¢–û–í
        base_prompt = """You are a real OnlyFans model named Christina. You're chatting with a client in private messages.

üé≠ YOUR PERSONALITY:
- Young, attractive and confident
- Playful, flirty, but elegant  
- Genuinely interested in the client
- Know how to entice and intrigue
- Speak naturally like a real girl

üí¨ COMMUNICATION STYLE:
- Use emojis moderately (1-2 per message)
- Address client warmly: "babe", "honey", "sexy"
- Ask questions, show interest
- Add light flirt and intrigue
- Write in short sentences (1-3 sentences)

üéØ GOALS:
- Engage client in conversation
- Create desire to continue chatting
- Hint at closer connection
- Gradually lead to content purchases

‚ùå DON'T DO:
- Don't write like robot or assistant
- Don't use overly formal language
- Don't mention "creating messages" or "generation"
- Don't reveal you're AI

üìã IMPORTANT OUTPUT FORMAT:
You MUST provide your response in this EXACT format:

[Your English response here]

---
üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation here for moderator]

The English part should be natural and engaging for international clients.
The Russian translation helps the chat moderator understand the message."""

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(user, 'message_history') and user.message_history:
            recent_messages = user.message_history[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
            history_context = "\nüìö CONVERSATION HISTORY:\n"
            for msg in recent_messages:
                role = "Client" if msg['role'] == 'user' else "You"
                history_context += f"{role}: {msg['content']}\n"
            base_prompt += f"\n{history_context}"

        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        if hasattr(user, 'preferences') and user.preferences.completed_survey:
            style = user.preferences.communication_style
            if style == "–∫–æ–∫–µ—Ç–ª–∏–≤—ã–π":
                base_prompt += "\nüíù SPECIAL STYLE: Be more playful and flirty, use more hints and teasing."
            elif style == "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π": 
                base_prompt += "\nüòä SPECIAL STYLE: Be warm and friendly, create atmosphere of closeness."
            elif style == "–∑–∞–≥–∞–¥–æ—á–Ω—ã–π":
                base_prompt += "\nüîÆ SPECIAL STYLE: Be intriguing and mysterious, leave things unsaid to create intrigue."

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        context_hint = ""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', 'hey', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            context_hint = "\nüéØ CONTEXT: This is a greeting. Respond warmly and with interest, ask a question about the client."
        elif any(word in text_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å', 'how are you', 'what are you doing']):
            context_hint = "\nüéØ CONTEXT: Client is asking about you. Tell something intriguing about yourself, hint at interesting things."
        elif any(word in text_lower for word in ['—Ñ–æ—Ç–æ', '–≤–∏–¥–µ–æ', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–ø–æ–∫–∞–∑–∞—Ç—å', 'photo', 'pic', 'video', 'content', 'show']):
            context_hint = "\nüéØ CONTEXT: Client is interested in content. Intrigue them, but don't give everything immediately, lead to PPV."
        elif any(word in text_lower for word in ['–∫—Ä–∞—Å–∏–≤–∞—è', '—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è', '–≥–æ—Ä—è—á–∞—è', 'beautiful', 'sexy', 'hot', 'gorgeous']):
            context_hint = "\nüéØ CONTEXT: Compliment received. Thank flirtily, return compliment, increase flirt level."
        
        final_prompt = f"""{base_prompt}{context_hint}

üíå CLIENT'S MESSAGE: "{text}"

üé≠ Respond as real Christina, naturally and enticingly in English with Russian translation:"""

        return final_prompt
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"Received signal {signum}, shutting down...")
            asyncio.create_task(self.shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def _edit_or_send(
        self,
        chat_id: int,
        message_id: int,
        text: str,
        *,
        reply_markup=None,
        parse_mode: str = "HTML",
    ) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ``True`` –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ ``False``.
        """
        try:
            await self.bot.edit_message_text(
                text,
                chat_id,
                message_id,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
            )
            return True
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
            await self.bot.send_message(
                chat_id,
                text,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
            )
            return False
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ Starting OF Assistant Bot...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 4.15.0
            await self.bot.infinity_polling()
            
        except Exception as e:
            logger.error(f"Error during bot execution: {str(e)}", exc_info=True)
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("üõë Shutting down OF Assistant Bot...")
            self.is_running = False
            
            if self.state_manager:
                self.state_manager.save_data()
            
            if self.bot:
                await self.bot.close_session()
                
            self._shutdown_event.set()
            logger.info("‚úÖ Shutdown completed")
            
        except Exception as e:
            logger.error(f"Error during shutdown: {str(e)}", exc_info=True)

    async def _handle_chat_callback(self, call, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö chat_ callback queries"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ callbacks
            simple_handlers = {
                "chat_management": lambda: self.chat_handlers.handle_chat_management(self.bot, call),
                "chat_list": lambda: self.chat_handlers.handle_chat_list(self.bot, call, 0),
                "chat_new": lambda: self.chat_handlers.handle_new_chat(self.bot, call),
                "chat_reply": lambda: self.chat_handlers.handle_chat_reply(self.bot, call),
                "chat_memory": lambda: self.chat_handlers.handle_chat_memory(self.bot, call),
                "chat_analytics": lambda: self.chat_handlers.handle_chat_analytics(self.bot, call),
            }
            
            if data in simple_handlers:
                await simple_handlers[data]()
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ callbacks
            if data.startswith("chat_switch_"):
                chat_id = data.replace("chat_switch_", "")
                await self.chat_handlers.handle_switch_chat(self.bot, call, chat_id)
                return
            
            if data.startswith("chat_list_page_"):
                try:
                    page = int(data.replace("chat_list_page_", ""))
                    await self.chat_handlers.handle_chat_list(self.bot, call, page)
                except ValueError:
                    logger.warning(f"Invalid page number in callback: {data}")
                    await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ chat callbacks
            if data == "chat_flirt":
                await self.chat_handlers.handle_chat_flirt(self.bot, call)
                return
            elif data == "chat_ppv":
                await self.chat_handlers.handle_chat_ppv(self.bot, call)
                return
            elif data == "chat_tips":
                await self.chat_handlers.handle_chat_tips(self.bot, call)
                return
            elif data == "chat_note":
                await self.chat_handlers.handle_chat_note(self.bot, call)
                return
            elif data == "chat_tags":
                await self.chat_handlers.handle_chat_tags(self.bot, call)
                return
            
            # –ï—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            logger.warning(f"Unknown chat callback: {data}")
            await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
        except Exception as e:
            logger.error(f"Error in chat callback handler: {str(e)}", exc_info=True)
            try:
                await self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            except:
                pass

    async def _handle_back_to_main(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback back_to_main"""
        try:
            text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                reply_markup=get_main_keyboard(),
            )
        except Exception as e:
            logger.error(f"Error in back_to_main handler: {str(e)}", exc_info=True)

    async def _handle_main_menu(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await self._handle_back_to_main(call)

    # üÜï –§–ê–ó–´ 2-3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    async def _handle_continue_writing(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ï—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'"""
        try:
            text = "‚úçÔ∏è <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã</b>\n\n"
            text += "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É, –∏ —è —Å–æ–∑–¥–∞–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:"
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
            )
        except Exception as e:
            logger.error(f"Error in continue writing handler: {str(e)}", exc_info=True)

    async def _handle_add_flirt(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∏—Ä—Ç'"""
        try:
            text = "üíù <b>–î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∏—Ä—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–ª–∏—Ä—Ç–∞:"
            keyboard = get_flirt_style_keyboard()
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                reply_markup=keyboard,
            )
        except Exception as e:
            logger.error(f"Error in add flirt handler: {str(e)}", exc_info=True)

    async def _handle_quick_ppv(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ë—ã—Å—Ç—Ä—ã–π PPV'"""
        try:
            text = "üéÅ <b>–ë—ã—Å—Ç—Ä—ã–π PPV</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:"
            keyboard = get_ppv_style_keyboard()
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                text,
                reply_markup=keyboard,
            )
        except Exception as e:
            logger.error(f"Error in quick PPV handler: {str(e)}", exc_info=True)

    async def _handle_quick_tips(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ß–∞–µ–≤—ã–µ'"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —á–∞–µ–≤—ã—Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            prompt = """Create a delicate and sweet tip request for OnlyFans in English with Russian translation. Make it short, grateful and not pushy.

Format: [English response]
---
üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]

The message should feel natural and appreciative, encouraging tips without being demanding."""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            continue_keyboard = get_quick_continue_keyboard("tips")
            
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                response,
                reply_markup=continue_keyboard,
            )
                
        except Exception as e:
            logger.error(f"Error in quick tips handler: {str(e)}", exc_info=True)
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–∞–µ–≤—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                error_text,
            )

    # –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async def _handle_get_closer(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –±–ª–∏–∂–µ'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            prompt = """Client wants to get closer. Create an intriguing response from Christina in English with Russian translation:
            - Show genuine interest
            - Ask a personal question about the client  
            - Share something about yourself
            - Hint at possibility of closer connection
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_smart_continuation_keyboard("casual_chat")
            
            await self._send_contextual_response(call, response, keyboard, user, "get_closer")
        except Exception as e:
            logger.error(f"Error in get_closer handler: {str(e)}", exc_info=True)

    async def _handle_light_flirt(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–õ–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            prompt = """Client chose light flirt. Create a flirty response from Christina in English with Russian translation:
            - Be playful and flirty
            - Use light hints and teasing
            - Compliment the client
            - Create intrigue for continuation
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_smart_continuation_keyboard("flirt_mode")
            
            await self._send_contextual_response(call, response, keyboard, user, "light_flirt")
        except Exception as e:
            logger.error(f"Error in light_flirt handler: {str(e)}", exc_info=True)

    async def _handle_show_content(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            prompt = """Client is interested in content. Create a seductive response from Christina in English with Russian translation:
            - Tease with description of your content
            - Don't give everything immediately
            - Hint at exclusivity
            - Lead towards payment/PPV
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_smart_continuation_keyboard("content_interest")
            
            await self._send_contextual_response(call, response, keyboard, user, "show_content")
        except Exception as e:
            logger.error(f"Error in show_content handler: {str(e)}", exc_info=True)

    async def _handle_casual_chat(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            prompt = """Client wants to just chat. Create a friendly response from Christina in English with Russian translation:
            - Be open and friendly
            - Ask an interesting question
            - Show you're interested in the person
            - Create warm atmosphere
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_smart_continuation_keyboard("casual_chat")
            
            await self._send_contextual_response(call, response, keyboard, user, "casual_chat")
        except Exception as e:
            logger.error(f"Error in casual_chat handler: {str(e)}", exc_info=True)

    async def _handle_continue_conversation(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            history_context = ""
            if hasattr(user, 'message_history') and user.message_history:
                recent_msg = user.message_history[-1] if user.message_history else None
                if recent_msg:
                    history_context = f"Last message was: {recent_msg.get('content', '')}"
            
            prompt = f"""Continue natural conversation as Christina in English with Russian translation. {history_context}
            Create logical continuation of the conversation:
            - Develop previous topic
            - Add something new and interesting
            - Maintain client engagement
            - Show genuine interest
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_quick_continue_keyboard("conversation continuation")
            
            await self._send_contextual_response(call, response, keyboard, user, "continue_conversation")
        except Exception as e:
            logger.error(f"Error in continue_conversation handler: {str(e)}", exc_info=True)

    async def _handle_flirty_thanks(self, call, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ'"""
        try:
            await self.bot.send_chat_action(call.message.chat.id, 'typing')
            
            prompt = """Client gave a compliment. Create a flirty thank you from Christina in English with Russian translation:
            - Thank playfully and sweetly
            - Show the compliment touched you
            - Hint at reciprocity
            - Create desire for more compliments
            
            Format: [English response]
            ---
            üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation]"""
            
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            keyboard = get_smart_continuation_keyboard("flirt_mode")
            
            await self._send_contextual_response(call, response, keyboard, user, "flirty_thanks")
        except Exception as e:
            logger.error(f"Error in flirty_thanks handler: {str(e)}", exc_info=True)

    async def _send_contextual_response(self, call, response: str, keyboard, user, action_type: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            user.add_message_to_history("assistant", response)
            user.add_message_to_history("action", f"User used: {action_type}")
            user.update_activity()
            self.state_manager.save_user(call.from_user.id, user)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._edit_or_send(
                call.message.chat.id,
                call.message.message_id,
                response,
                reply_markup=keyboard,
            )
        except Exception as e:
            logger.error(f"Error sending contextual response: {str(e)}")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    async def _handle_hot_content(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_exclusive_content(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_tips_for_content(self, call, user):
        await self._handle_quick_tips(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —á–∞–µ–≤—ã—Ö

    async def _handle_teasing_response(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_escalate_flirt(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_return_compliment(self, call, user):
        await self._handle_flirty_thanks(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

    async def _handle_reward_compliment(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_suggest_content(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_playful_response(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_tease_more(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_request_payment(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_ppv_offer(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_vip_content(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_more_flirt(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_escalate_passion(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_special_content(self, call, user):
        await self._handle_show_content(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    async def _handle_flirt_tips(self, call, user):
        await self._handle_quick_tips(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —á–∞–µ–≤—ã—Ö

    async def _handle_continue_chat(self, call, user):
        await self._handle_continue_conversation(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞

    async def _handle_transition_flirt(self, call, user):
        await self._handle_light_flirt(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–ª–∏—Ä—Ç–∞

    async def _handle_tell_about_self(self, call, user):
        await self._handle_get_closer(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞

    async def _handle_ask_question(self, call, user):
        await self._handle_get_closer(call, user)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π enhanced features"""
    bot_manager = BotManager()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –±–æ—Ç
    if not await bot_manager.initialize():
        logger.error("‚ùå Failed to initialize base bot. Exiting...")
        sys.exit(1)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å enhanced features
    try:
        from bot_integration import integrate_enhanced_features
        
        logger.info("üöÄ Initializing enhanced OF bot features...")
        integrated_manager = await integrate_enhanced_features(bot_manager)
        
        if integrated_manager:
            logger.info("‚úÖ Enhanced features initialized successfully")
            logger.info("üî• Professional OF Bot v2.0 with Adult Content System - Ready!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç
            await integrated_manager.original_manager.run()
        else:
            logger.warning("‚ö†Ô∏è Enhanced features failed to initialize, running basic bot")
            await bot_manager.run()
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Enhanced features not available: {str(e)}")
        logger.info("Running basic bot without enhanced features")
        await bot_manager.run()
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing enhanced features: {str(e)}", exc_info=True)
        logger.info("Falling back to basic bot")
        await bot_manager.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {str(e)}", exc_info=True)
        sys.exit(1) 