#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Groq API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.
"""

import asyncio
import sys
from api import generate_groq_response
from config.config import MODELS

async def test_groq_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ Groq"""
    print("üß™ –¢–ï–°–¢ –ú–û–î–ï–õ–ï–ô GROQ API")
    print("=" * 50)
    
    test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    
    working_models = []
    failed_models = []
    
    for model_key, model_info in MODELS.items():
        model_id = model_info['id']
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_key} ({model_id})")
        
        try:
            response = await generate_groq_response(
                test_prompt, 
                model_id, 
                max_tokens=50,
                max_retries=1
            )
            
            if response and len(response.strip()) > 0:
                print(f"‚úÖ {model_key}: OK")
                print(f"   –û—Ç–≤–µ—Ç: {response[:100]}...")
                working_models.append(model_key)
            else:
                print(f"‚ùå {model_key}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                failed_models.append(model_key)
                
        except Exception as e:
            print(f"‚ùå {model_key}: {str(e)}")
            failed_models.append(model_key)
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏: {len(working_models)}/{len(MODELS)}")
    for model in working_models:
        print(f"   ‚Ä¢ {model}")
    
    if failed_models:
        print(f"‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏: {len(failed_models)}")
        for model in failed_models:
            print(f"   ‚Ä¢ {model}")
    
    if len(working_models) > 0:
        print("\nüéâ –•–û–¢–Ø –ë–´ –û–î–ù–ê –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–ê–ï–¢ - –ë–û–¢ –ì–û–¢–û–í!")
        return True
    else:
        print("\nüí• –í–°–ï –ú–û–î–ï–õ–ò –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        return False

async def test_fallback_mechanism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º fallback"""
    print("\nüîÑ –¢–ï–°–¢ FALLBACK –ú–ï–•–ê–ù–ò–ó–ú–ê")
    print("-" * 30)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
        response = await generate_groq_response(
            "Test fallback", 
            "non-existent-model-12345",
            max_tokens=20
        )
        
        if response:
            print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –û—Ç–≤–µ—Ç: {response[:50]}...")
            return True
        else:
            print("‚ùå Fallback –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False

if __name__ == "__main__":
    async def main():
        models_ok = await test_groq_models()
        fallback_ok = await test_fallback_mechanism()
        
        if models_ok or fallback_ok:
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            return True
        else:
            print("\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GROQ API!")
            return False
    
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 