#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ü–û–ö–†–´–¢–ò–Ø –í–°–ï–• CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""

import sys
import re
from pathlib import Path

def extract_callback_data_from_utils():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ callback_data –∏–∑ utils.py"""
    utils_file = Path("utils.py")
    
    if not utils_file.exists():
        print("‚ùå –§–∞–π–ª utils.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    content = utils_file.read_text(encoding='utf-8')
    
    # –ò—â–µ–º –≤—Å–µ callback_data="..." 
    callback_pattern = r'callback_data=["\'](.*?)["\']'
    callbacks = re.findall(callback_pattern, content)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ callback (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ f-—Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    static_callbacks = []
    for callback in callbacks:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if not any(char in callback for char in ['{', '}', '_', 'f"', "f'"]):
            static_callbacks.append(callback)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
        elif callback.startswith(('model_', 'flirt_style_', 'ppv_style_', 'survey_', 'chat_')):
            continue  # –≠—Ç–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ startswith
        else:
            static_callbacks.append(callback)
    
    return static_callbacks

def extract_handlers_from_bot():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏–∑ bot.py"""
    bot_file = Path("bot.py")
    
    if not bot_file.exists():
        print("‚ùå –§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    content = bot_file.read_text(encoding='utf-8')
    
    # –ò—â–µ–º –≤—Å–µ elif data == "..." –∏ data == "..."
    handler_pattern = r'data == ["\'](.*?)["\']'
    handlers = re.findall(handler_pattern, content)
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º startswith –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    startswith_pattern = r'data\.startswith\(["\'](.*?)["\']'
    startswith_handlers = re.findall(startswith_pattern, content)
    
    return handlers, startswith_handlers

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è callback"""
    print("üß™ –¢–ï–°–¢ –ü–û–ö–†–´–¢–ò–Ø CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 55)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º callback –∏–∑ utils.py
    callback_data = extract_callback_data_from_utils()
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ callback –≤ utils.py: {len(callback_data)}")
    for callback in sorted(callback_data):
        print(f"   üìÑ {callback}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ bot.py
    handlers, startswith_handlers = extract_handlers_from_bot()
    print(f"\nüîß –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ bot.py: {len(handlers)}")
    for handler in sorted(handlers):
        print(f"   ‚öôÔ∏è {handler}")
    
    print(f"\nüîß Startswith –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {len(startswith_handlers)}")
    for handler in sorted(startswith_handlers):
        print(f"   ‚öôÔ∏è {handler}*")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø:")
    missing_handlers = []
    covered_handlers = []
    
    for callback in callback_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if callback in handlers:
            covered_handlers.append(callback)
            print(f"   ‚úÖ {callback}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º startswith —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        elif any(callback.startswith(prefix) for prefix in startswith_handlers):
            covered_handlers.append(callback)
            matching_prefix = next(prefix for prefix in startswith_handlers if callback.startswith(prefix))
            print(f"   ‚úÖ {callback} (—á–µ—Ä–µ–∑ {matching_prefix}*)")
        else:
            missing_handlers.append(callback)
            print(f"   ‚ùå {callback}")
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü–æ–∫—Ä—ã—Ç–æ: {len(covered_handlers)}/{len(callback_data)}")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_handlers)}")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {(len(covered_handlers)/len(callback_data)*100):.1f}%")
    
    if missing_handlers:
        print(f"\n‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:")
        for missing in missing_handlers:
            print(f"   üö® {missing}")
        return False
    else:
        print(f"\nüéâ –í–°–ï CALLBACK –ü–û–ö–†–´–¢–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 