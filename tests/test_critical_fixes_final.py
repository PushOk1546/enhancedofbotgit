#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π OnlyFans Assistant Bot.
–ö–æ–º–∞–Ω–¥–∞ –∏–∑ 10 —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ready-to-production.

–¢–ï–°–¢–ò–†–£–Æ–¢–°–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ P0: Security (Admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, Rate limiting, Input validation)
‚úÖ P0: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏ memory management  
‚úÖ P1: Circuit breaker –¥–ª—è API resilience
‚úÖ P1: Health checks –∏ comprehensive monitoring
‚úÖ P2: HTML parsing protection (—É–∂–µ –±—ã–ª–æ)
"""

import asyncio
import tempfile
import os
import time
import json
import sys
from unittest.mock import Mock, AsyncMock, patch

async def test_p0_security_fixes():
    """–¢–µ—Å—Ç P0: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –¢–ï–°–¢ P0: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    try:
        from security import (
            admin_required, validate_user_input, RateLimiter, 
            secure_format_prompt, security_stats
        )
        from config import ADMIN_IDS
        
        # –¢–µ—Å—Ç 1: Admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("üß™ –¢–µ—Å—Ç 1.1: Admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        ADMIN_IDS.add(12345)
        
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        bot_mock = AsyncMock()
        message_mock = Mock()
        message_mock.from_user.id = 12345  # Admin
        
        @admin_required
        async def test_admin_func(bot, message):
            return "admin_success"
        
        result = await test_admin_func(bot_mock, message_mock)
        assert result == "admin_success", "Admin authorization failed"
        print("   ‚úÖ Admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_mock.from_user.id = 99999  # Not admin
        result = await test_admin_func(bot_mock, message_mock)
        assert result is None, "Non-admin should be blocked"
        print("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        print("üß™ –¢–µ—Å—Ç 1.2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞...")
        
        # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        safe_input = validate_user_input("Hello world")
        assert safe_input == "Hello world", "Normal input failed"
        
        # –û–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥
        dangerous_input = "Hello ${malicious} <script>alert('xss')</script>"
        safe_output = validate_user_input(dangerous_input)
        assert "${" not in safe_output and "<script>" not in safe_output, "Dangerous input not sanitized"
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç injection")
        
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥
        try:
            validate_user_input("x" * 2000, max_length=100)
            assert False, "Should raise ValueError for long input"
        except ValueError:
            pass
        print("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
        
        # –¢–µ—Å—Ç 3: Rate Limiting
        print("üß™ –¢–µ—Å—Ç 1.3: Rate Limiting...")
        
        rate_limiter = RateLimiter(max_requests=2, time_window=60)
        
        # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        assert rate_limiter.is_allowed(123) == True
        assert rate_limiter.is_allowed(123) == True
        
        # –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        assert rate_limiter.is_allowed(123) == False
        print("   ‚úÖ Rate limiting –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # –¢–µ—Å—Ç 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
        print("üß™ –¢–µ—Å—Ç 1.4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        
        template = "Hello {name}, your message: {message}"
        result = secure_format_prompt(
            template,
            name="User",
            message="Test ${injection} message"
        )
        assert "injection" in result and "${" not in result, "Prompt injection not prevented"
        print("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç prompt injection")
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ P0 SECURITY: ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê P0 SECURITY: {e}")
        return False

async def test_p0_atomic_data_operations():
    """–¢–µ—Å—Ç P0: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏ memory management"""
    print("\nüíæ –¢–ï–°–¢ P0: –ê–¢–û–ú–ê–†–ù–ê–Ø –ó–ê–ü–ò–°–¨ –ò MEMORY MANAGEMENT")
    print("=" * 60)
    
    try:
        from state_manager import StateManager
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as tmp:
            tmp_file = tmp.name
        
        print("üß™ –¢–µ—Å—Ç 2.1: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º state manager —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
        sm = StateManager(data_file=tmp_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = sm.get_user(111)
        user2 = sm.get_user(222)
        
        user1.add_message_to_history("user", "test message 1")
        user2.add_message_to_history("user", "test message 2")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å
        await sm.save_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ü–†–û–ï–ö–¢–ù–û–ì–û StateManager –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å
        project_temp_pattern = f"{tmp_file}.tmp.*"
        project_temp_files = [f for f in os.listdir(os.path.dirname(tmp_file)) 
                             if f.startswith(os.path.basename(tmp_file)) and '.tmp.' in f]
        
        assert len(project_temp_files) == 0, f"Project temporary files not cleaned up: {project_temp_files}"
        print("   ‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        sm2 = StateManager(data_file=tmp_file)
        await sm2.load_data()
        assert sm2.get_user_count() == 2, "Data not saved correctly"
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("üß™ –¢–µ—Å—Ç 2.2: Memory management...")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        user = sm.get_user(333)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(100):
            user.add_message_to_history("user", f"message {i}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        assert len(user.history) <= user.MAX_HISTORY_SIZE, f"History not limited: {len(user.history)}"
        print(f"   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ {user.MAX_HISTORY_SIZE} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        old_history_count = sum(len(u.history) for u in sm.users.values())
        sm.cleanup_memory()
        new_history_count = sum(len(u.history) for u in sm.users.values())
        
        assert new_history_count <= old_history_count, "Memory cleanup didn't reduce history"
        print("   ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üß™ –¢–µ—Å—Ç 2.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π cleanup...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é force_cleanup_temp_files
        cleaned_count = sm.force_cleanup_temp_files()
        print(f"   ‚úÖ Force cleanup —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—á–∏—â–µ–Ω–æ: {cleaned_count} —Ñ–∞–π–ª–æ–≤)")
        
        # Cleanup
        os.unlink(tmp_file)
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ P0 DATA: ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê P0 DATA: {e}")
        if 'tmp_file' in locals() and os.path.exists(tmp_file):
            os.unlink(tmp_file)
        return False

async def test_p1_circuit_breaker():
    """–¢–µ—Å—Ç P1: Circuit Breaker –¥–ª—è API resilience"""
    print("\n‚ö° –¢–ï–°–¢ P1: CIRCUIT BREAKER API RESILIENCE")
    print("=" * 60)
    
    try:
        from api import CircuitBreaker, APICircuitBreakerError, EnhancedRetryManager
        
        print("üß™ –¢–µ—Å—Ç 3.1: Circuit Breaker —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
        
        # –°–æ–∑–¥–∞–µ–º circuit breaker —Å –º–∞–ª—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cb = CircuitBreaker(failure_threshold=2, recovery_timeout=1)
        
        # –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
        async def failing_function():
            raise Exception("Test failure")
        
        # –ü–µ—Ä–≤—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        for i in range(2):
            try:
                await cb.call(failing_function)
            except Exception:
                pass
        
        # Circuit breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å OPEN
        assert cb.state.value == "open", f"Circuit breaker should be OPEN, got {cb.state.value}"
        print("   ‚úÖ Circuit breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ OPEN –ø—Ä–∏ —Å–±–æ—è—Ö")
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        try:
            await cb.call(failing_function)
            assert False, "Should raise APICircuitBreakerError"
        except APICircuitBreakerError:
            pass
        print("   ‚úÖ Circuit breaker –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        
        print("üß™ –¢–µ—Å—Ç 3.2: Enhanced Retry Manager...")
        
        retry_manager = EnhancedRetryManager(max_retries=2, base_delay=0.1)
        
        call_count = 0
        async def failing_then_succeeding():
            nonlocal call_count
            call_count += 1
            if call_count < 3:
                raise Exception("Still failing")
            return "success"
        
        result = await retry_manager.retry_with_backoff(failing_then_succeeding)
        assert result == "success", "Retry manager should eventually succeed"
        assert call_count == 3, f"Expected 3 calls, got {call_count}"
        print("   ‚úÖ Retry manager —Å exponential backoff —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üß™ –¢–µ—Å—Ç 3.3: API health check...")
        
        from api import health_check
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –∫—Ä–∞—à–∏—Ç—å)
        try:
            health_status = await health_check()
            assert "timestamp" in health_status, "Health check should return timestamp"
            assert "overall" in health_status, "Health check should return overall status"
            print("   ‚úÖ API health check —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        except Exception as e:
            print(f"   ‚ö†Ô∏è API health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ API –∫–ª—é—á–∞): {e}")
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ P1 CIRCUIT BREAKER: ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê P1 CIRCUIT BREAKER: {e}")
        return False

async def test_p1_health_checks():
    """–¢–µ—Å—Ç P1: Health Checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    print("\nüè• –¢–ï–°–¢ P1: HEALTH CHECKS –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì")
    print("=" * 60)
    
    try:
        from health import HealthChecker, health_checker, quick_health_check
        
        print("üß™ –¢–µ—Å—Ç 4.1: Health Checker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        hc = HealthChecker()
        assert len(hc.checks_registry) > 0, "Health checks not registered"
        
        expected_checks = ["system", "telegram", "groq", "filesystem", "database", "security", "memory_leaks"]
        for check_name in expected_checks:
            assert check_name in hc.checks_registry, f"Missing health check: {check_name}"
        print(f"   ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(hc.checks_registry)} health checks")
        
        print("üß™ –¢–µ—Å—Ç 4.2: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ health checks...")
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        system_status = await hc.check_system_resources()
        assert system_status.name == "system", "System check name wrong"
        assert system_status.status in ["healthy", "degraded", "unhealthy"], "Invalid system status"
        assert "cpu_percent" in system_status.details, "Missing CPU info"
        print("   ‚úÖ System resources check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç filesystem check
        fs_status = await hc.check_filesystem()
        assert fs_status.name == "filesystem", "Filesystem check name wrong"
        assert "checks" in fs_status.details, "Missing filesystem checks"
        print("   ‚úÖ Filesystem check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç security check
        security_status = await hc.check_security_status()
        assert security_status.name == "security", "Security check name wrong"
        assert "security_config" in security_status.details, "Missing security config"
        print("   ‚úÖ Security status check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üß™ –¢–µ—Å—Ç 4.3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...")
        
        # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        full_health = await hc.run_all_checks()
        
        assert "timestamp" in full_health, "Missing timestamp"
        assert "overall_status" in full_health, "Missing overall status"
        assert "components" in full_health, "Missing components"
        assert "summary" in full_health, "Missing summary"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
        components = full_health["components"]
        for check_name in expected_checks:
            assert check_name in components, f"Missing component result: {check_name}"
        
        print(f"   ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {full_health['overall_status']}")
        print(f"   üìä –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {full_health['check_duration']:.2f}s")
        print(f"   üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(components)}")
        
        print("üß™ –¢–µ—Å—Ç 4.4: Quick health check...")
        
        quick_status = await quick_health_check()
        assert "status" in quick_status, "Missing quick status"
        assert "timestamp" in quick_status, "Missing quick timestamp"
        print("   ‚úÖ Quick health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ P1 HEALTH CHECKS: ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê P1 HEALTH CHECKS: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_integration_comprehensive():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–º–µ—Å—Ç–µ"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ú–ï–°–¢–ï")
    print("=" * 60)
    
    try:
        from security import rate_limiter, security_stats
        from state_manager import StateManager
        from health import health_checker
        
        print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: Real-world scenario...")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å rate limiting
        user_id = 777
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
        for i in range(3):
            allowed = rate_limiter.is_allowed(user_id)
            assert allowed, f"Request {i} should be allowed"
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        for i in range(10):
            rate_limiter.is_allowed(user_id)  # –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
        
        final_allowed = rate_limiter.is_allowed(user_id)
        assert not final_allowed, "Should be rate limited"
        print("   ‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—Ç–æ–º–∞—Ä–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as tmp:
            tmp_file = tmp.name
        
        sm = StateManager(data_file=tmp_file)
        test_user = sm.get_user(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å memory management
        for i in range(60):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
            test_user.add_message_to_history("user", f"message {i}")
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await sm.save_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        sm2 = StateManager(data_file=tmp_file)
        await sm2.load_data()
        loaded_user = sm2.get_user(user_id)
        
        assert len(loaded_user.history) <= loaded_user.MAX_HISTORY_SIZE
        print("   ‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + memory management —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: Health check –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        health_status = await health_checker.run_all_checks()
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_component = health_status["components"]["security"]
        assert "security_stats" in security_component["details"]
        print("   ‚úÖ Health checks –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å security —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
        
        # Cleanup
        os.unlink(tmp_file)
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: ‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –í–ú–ï–°–¢–ï")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {e}")
        if 'tmp_file' in locals() and os.path.exists(tmp_file):
            os.unlink(tmp_file)
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 80)
    print("–ö–æ–º–∞–Ω–¥–∞ –∏–∑ 10 —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print("=" * 80)
    
    start_time = time.time()
    
    tests = [
        ("P0 Security Fixes", test_p0_security_fixes),
        ("P0 Atomic Data Operations", test_p0_atomic_data_operations),
        ("P1 Circuit Breaker", test_p1_circuit_breaker),
        ("P1 Health Checks", test_p1_health_checks),
        ("Integration Test", test_integration_comprehensive)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    elapsed_time = time.time() - start_time
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£")
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –î–ï–ü–õ–û–ô –†–ê–ó–†–ï–®–ï–ù")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main()) 