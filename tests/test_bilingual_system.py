#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –î–í–£–Ø–ó–´–ß–ù–û–ô –°–ò–°–¢–ï–ú–´ (–ê–ù–ì–õ–ò–ô–°–ö–ò–ô + –†–£–°–°–ö–ò–ô)
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä—É—Å—Å–∫–∏–º–∏ —á–∞—Ç–µ—Ä–∞–º–∏
"""

import sys
from unittest.mock import Mock
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from bot import BotManager
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_english_prompts():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    try:
        bot_manager = BotManager()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_user = Mock()
        mock_user.message_history = []
        mock_user.preferences = Mock()
        mock_user.preferences.completed_survey = False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            "Hello",
            "Hi baby",
            "Show me pics",
            "You're beautiful"
        ]
        
        for message in test_messages:
            prompt = bot_manager._create_safe_prompt(message, mock_user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            assert "You are a real OnlyFans model named Christina" in prompt, f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è '{message}'"
            assert "YOUR PERSONALITY" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è '{message}'"
            assert "COMMUNICATION STYLE" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –¥–ª—è '{message}'"
            assert "CLIENT'S MESSAGE" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è '{message}'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            assert "üìã IMPORTANT OUTPUT FORMAT" in prompt, f"–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è '{message}'"
            assert "[Your English response here]" in prompt, f"–ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{message}'"
            assert "üîç –ü–µ—Ä–µ–≤–æ–¥: [Russian translation here" in prompt, f"–ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è '{message}'"
            
            print(f"   ‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è '{message}': {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(test_messages)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_bilingual_format():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç –¥–≤—É—è–∑—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        correct_responses = [
            "Hey babe! üòò How's your day going?\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! üòò –ö–∞–∫ –¥–µ–ª–∞?",
            "I'm feeling so playful today... üíï\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –Ø —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∞—è –∏–≥—Ä–∏–≤–∞—è... üíï",
            "Want to see something special? üòè\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ? üòè"
        ]
        
        for response in correct_responses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert "---" in response, f"–ù–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {response[:50]}..."
            assert "üîç –ü–µ—Ä–µ–≤–æ–¥:" in response, f"–ù–µ—Ç –º–µ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {response[:50]}..."
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –∏ —Ä—É—Å—Å–∫—É—é —á–∞—Å—Ç–∏
            parts = response.split("---")
            assert len(parts) == 2, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(parts)}"
            
            english_part = parts[0].strip()
            russian_part = parts[1].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è
            assert len(english_part) > 0, f"–ü—É—Å—Ç–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —á–∞—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä—É—Å—Å–∫–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥
            assert russian_part.startswith("üîç –ü–µ—Ä–µ–≤–æ–¥:"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä—É—Å—Å–∫–æ–π —á–∞—Å—Ç–∏: {russian_part[:30]}..."
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º –ø–µ—Ä–µ–≤–æ–¥
            translation = russian_part.replace("üîç –ü–µ—Ä–µ–≤–æ–¥:", "").strip()
            assert len(translation) > 0, f"–ü—É—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ"
            
            print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: EN({len(english_part)}) + RU({len(translation)})")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(correct_responses)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_international_context():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    try:
        bot_manager = BotManager()
        mock_user = Mock()
        mock_user.message_history = []
        mock_user.preferences = Mock()
        mock_user.preferences.completed_survey = False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        international_messages = [
            ("Hello", ["hello", "hi", "hey"]),
            ("How are you?", ["how are you", "what are you doing"]),
            ("Show me pics", ["photo", "pic", "video", "content", "show"]),
            ("You're gorgeous", ["beautiful", "sexy", "hot", "gorgeous"])
        ]
        
        for message, expected_keywords in international_messages:
            prompt = bot_manager._create_safe_prompt(message, mock_user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            found_keywords = 0
            for keyword in expected_keywords:
                if keyword in prompt.lower():
                    found_keywords += 1
            
            assert found_keywords > 0, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è '{message}'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if "hello" in message.lower() or "hi" in message.lower():
                assert "CONTEXT: This is a greeting" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è '{message}'"
            elif "how are you" in message.lower():
                assert "CONTEXT: Client is asking about you" in prompt, f"–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è '{message}'"
            
            print(f"   ‚úÖ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç '{message}': {found_keywords}/{len(expected_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(international_messages)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_chatroom_moderation():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —á–∞—Ç–µ—Ä
        moderator_examples = [
            "Hey sexy! üíï Want to see my private photos?\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∏–≤–µ—Ç, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π! üíï –•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ?",
            "I'm so horny right now... üî•\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –Ø —Å–µ–π—á–∞—Å —Ç–∞–∫–∞—è –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–∞—è... üî•",
            "Send me $20 for exclusive content babe üí∞\n\n---\nüîç –ü–µ—Ä–µ–≤–æ–¥: –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ $20 –∑–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –º–∏–ª—ã–π üí∞"
        ]
        
        for example in moderator_examples:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            assert "üîç –ü–µ—Ä–µ–≤–æ–¥:" in example, f"–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤: {example[:50]}..."
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —á–∞—Å—Ç–∏
            parts = example.split("---")
            english_part = parts[0].strip()
            russian_part = parts[1].strip().replace("üîç –ü–µ—Ä–µ–≤–æ–¥:", "").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä—É—Å—Å–∫–∞—è —á–∞—Å—Ç—å –ø–æ–Ω—è—Ç–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            assert len(russian_part) > 10, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: {russian_part}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —á–∞—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            assert len(english_part) > 10, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {english_part}"
            
            print(f"   ‚úÖ –ü—Ä–∏–º–µ—Ä –º–æ–¥–µ—Ä–∞—Ü–∏–∏: –ö–ª–∏–µ–Ω—Ç –≤–∏–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —á–∞—Ç–µ—Ä - —Ä—É—Å—Å–∫–∏–π")
        
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(moderator_examples)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_english_addressing():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç–∞–º")
    
    try:
        bot_manager = BotManager()
        mock_user = Mock()
        mock_user.message_history = []
        mock_user.preferences = Mock()
        mock_user.preferences.completed_survey = False
        
        prompt = bot_manager._create_safe_prompt("Hello", mock_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        english_addresses = ["babe", "honey", "sexy"]
        found_addresses = 0
        
        for address in english_addresses:
            if address in prompt.lower():
                found_addresses += 1
        
        assert found_addresses > 0, "–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
        russian_addresses = ["–º–∏–ª—ã–π", "–¥–æ—Ä–æ–≥–æ–π", "—Å–ª–∞–¥–∫–∏–π"]
        for address in russian_addresses:
            assert address not in prompt.lower(), f"–ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ '{address}' –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø—Ä–æ–º–ø—Ç–µ"
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {found_addresses}/{len(english_addresses)}")
        print(f"   ‚úÖ –†—É—Å—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üåç –¢–ï–°–¢ –î–í–£–Ø–ó–´–ß–ù–û–ô –°–ò–°–¢–ï–ú–´ (–ê–ù–ì–õ–ò–ô–°–ö–ò–ô + –†–£–°–°–ö–ò–ô)")
    print("=" * 65)
    
    tests = [
        ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã", test_english_prompts),
        ("–î–≤—É—è–∑—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", test_bilingual_format),
        ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", test_international_context),
        ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", test_chatroom_moderation),
        ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", test_english_addressing)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
    
    print("\n" + "=" * 65)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–í–£–Ø–ó–´–ß–ù–û–ô –°–ò–°–¢–ï–ú–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î–í–£–Ø–ó–´–ß–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
        print("üåç –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
        print("üîç –ß–∞—Ç–µ—Ä—ã –≤–∏–¥—è—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
        print("üí¨ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –Ω–∞–ª–∞–∂–µ–Ω–∞!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {total - passed} —Ç–µ—Å—Ç(–æ–≤)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 