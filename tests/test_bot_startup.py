#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞.
"""

import os
import sys
from pathlib import Path

def test_bot_startup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞"""
    print("üöÄ –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        from config.config import BOT_TOKEN, GROQ_KEY, MODELS, FLIRT_STYLES, PPV_STYLES
        
        if not BOT_TOKEN:
            print("‚ö†Ô∏è  BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        else:
            print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
            
        if not GROQ_KEY:
            print("‚ö†Ô∏è  GROQ_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        else:
            print("‚úÖ GROQ_KEY –Ω–∞–π–¥–µ–Ω")
            
        print(f"‚úÖ –ú–æ–¥–µ–ª–µ–π –ò–ò: {len(MODELS)}")
        print(f"‚úÖ –°—Ç–∏–ª–µ–π —Ñ–ª–∏—Ä—Ç–∞: {len(FLIRT_STYLES)}")
        print(f"‚úÖ –°—Ç–∏–ª–µ–π PPV: {len(PPV_STYLES)}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        from state_manager import StateManager
        from models import UserState, PPVReminder
        from handlers import send_welcome_message, handle_start_command
        from utils import get_main_keyboard, get_ppv_style_keyboard
        from api import generate_groq_response
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º StateManager
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º StateManager...")
        sm = StateManager(data_file='data/test_users.json')
        user = sm.get_user(999999)
        print(f"‚úÖ StateManager —Å–æ–∑–¥–∞–Ω, —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
        main_kb = get_main_keyboard()
        ppv_kb = get_ppv_style_keyboard()
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(main_kb.keyboard)} —Ä—è–¥–æ–≤")
        print(f"‚úÖ PPV –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(ppv_kb.keyboard)} –∫–Ω–æ–ø–æ–∫")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º async –º–µ—Ç–æ–¥ load_prompt
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º load_prompt...")
        import asyncio
        async def test_prompt():
            result = await sm.load_prompt('welcome')
            return result is None  # –ù–æ—Ä–º–∞–ª—å–Ω–æ —á—Ç–æ None, —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç
        
        is_none = asyncio.run(test_prompt())
        if is_none:
            print("‚úÖ load_prompt —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        else:
            print("‚úÖ load_prompt —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω)")
        
        # 6. –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BotManager (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é BotManager...")
        if BOT_TOKEN and BOT_TOKEN != "your_bot_token_here":
            from bot import BotManager
            bot_manager = BotManager()
            print("‚úÖ BotManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º BotManager (–Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ BOT_TOKEN)")
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ BOT_TOKEN –∏ GROQ_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_bot_startup()
    sys.exit(0 if success else 1) 