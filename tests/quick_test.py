#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram.
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

def test_core_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        # Core modules
        from src.core.exceptions import BotException, ValidationError
        from src.core.validators import ValidatedUser, ValidatedMessage
        from src.core.rate_limiter import RateLimiter
        from src.core.error_handlers import ErrorHandler
        from src.core.logging_config import setup_logging
        from src.models.improved_models import UserState, UserPreferences
        print("‚úÖ –í—Å–µ core –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_user_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        from src.core.validators import ValidatedUser
        
        # –í–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = ValidatedUser(
            user_id=123456789,
            username="test_user",
            first_name="Test"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id} - {user.username}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def test_user_state():
    """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        from src.models.improved_models import UserState
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = UserState(user_id=123456789, username="test_user")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_state.add_message_to_history("user", "–ü—Ä–∏–≤–µ—Ç!")
        user_state.add_message_to_history("assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        assert user_state.conversation_metrics.total_messages == 2
        assert user_state.conversation_metrics.user_messages == 1
        assert user_state.conversation_metrics.bot_messages == 1
        
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –°–æ–æ–±—â–µ–Ω–∏–π: {user_state.conversation_metrics.total_messages}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False

def test_rate_limiter():
    """–¢–µ—Å—Ç rate limiter"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiter...")
    
    try:
        from src.core.rate_limiter import RateLimiter
        
        limiter = RateLimiter()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(5):
            result = limiter.check_rate_limit(123456789, 'message')
            assert result == True
        
        print("‚úÖ Rate limiter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ rate limiter: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        from src.core.error_handlers import ErrorHandler
        from src.core.exceptions import ValidationError
        
        handler = ErrorHandler()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        test_error = ValidationError("Test error")
        result = handler.handle_error(test_error)
        
        assert result['handled'] == True
        assert result['severity'] == 'low'
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def test_logging():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from src.core.logging_config import setup_logging, get_logger
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        setup_logging(
            log_level="INFO",
            log_dir="test_logs",
            enable_console=False,
            enable_file=False
        )
        
        logger = get_logger("test")
        logger.info("Test log message")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ï–õ–ò–ó–£")
    print("=" * 50)
    
    tests = [
        test_core_imports,
        test_user_validation,
        test_user_state,
        test_rate_limiter,
        test_error_handling,
        test_logging
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ë–û–¢ –ì–û–¢–û–í –ö –†–ï–õ–ò–ó–£!")
        print("\nüöÄ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
        return True
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–ï –ì–û–¢–û–í –ö –†–ï–õ–ò–ó–£!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 