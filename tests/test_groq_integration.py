"""
–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Groq API
"""

import pytest
from unittest.mock import patch, Mock, AsyncMock, MagicMock
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

@pytest.mark.asyncio
async def test_generate_reply_variants_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –æ—Ç–≤–µ—Ç–∞
        mock_response = Mock()
        mock_response.choices = [
            Mock(message=Mock(content="–í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä\n–í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?\n–í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"))
        ]
        mock_client.chat.completions.create = AsyncMock(return_value=mock_response)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤
        from groq_integration import generate_reply_variants
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        variants = await generate_reply_variants("–ü—Ä–∏–≤–µ—Ç", "friendly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(variants, list)
        assert len(variants) >= 1
        assert all(isinstance(v, str) for v in variants)
        
        # API –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∏–ª–∏ –Ω–µ –≤—ã–∑–≤–∞–Ω –∏–∑-–∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è/fallback
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert any("–ø—Ä–∏–≤–µ—Ç" in v.lower() for v in variants)

@pytest.mark.asyncio
async def test_generate_reply_variants_styles():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        mock_response = Mock()
        mock_response.choices = [
            Mock(message=Mock(content="–í–∞—Ä–∏–∞–Ω—Ç 1: Test reply\n–í–∞—Ä–∏–∞–Ω—Ç 2: Test reply 2\n–í–∞—Ä–∏–∞–Ω—Ç 3: Test reply 3"))
        ]
        mock_client.chat.completions.create = AsyncMock(return_value=mock_response)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏
        styles = ["friendly", "flirty", "passionate", "romantic", "professional"]
        
        for style in styles:
            mock_client.chat.completions.create.reset_mock()
            
            variants = await generate_reply_variants("–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ", style)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert isinstance(variants, list)
            assert len(variants) >= 1
            assert all(isinstance(v, str) for v in variants)
            
            # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ API –∏–∑-–∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ì–ª–∞–≤–Ω–æ–µ - —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

@pytest.mark.asyncio
async def test_generate_reply_variants_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Groq API"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        mock_client.chat.completions.create = AsyncMock(side_effect=Exception("API Error"))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        variants = await generate_reply_variants("–¢–µ—Å—Ç", "friendly")
        
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (fallback)
        assert isinstance(variants, list)
        assert len(variants) >= 1

@pytest.mark.asyncio
async def test_generate_reply_variants_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        mock_response = Mock()
        mock_response.choices = [
            Mock(message=Mock(content="–í–∞—Ä–∏–∞–Ω—Ç 1: Cached reply\n–í–∞—Ä–∏–∞–Ω—Ç 2: Cached reply 2\n–í–∞—Ä–∏–∞–Ω—Ç 3: Cached reply 3"))
        ]
        mock_client.chat.completions.create = AsyncMock(return_value=mock_response)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        variants1 = await generate_reply_variants("–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∞", "friendly")
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        variants2 = await generate_reply_variants("–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∞", "friendly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –≤—ã–∑–æ–≤–∞ –≤–µ—Ä–Ω—É–ª–∏ —Å–ø–∏—Å–∫–∏
        assert isinstance(variants1, list)
        assert isinstance(variants2, list)
        assert len(variants1) >= 1
        assert len(variants2) >= 1

@pytest.mark.asyncio
async def test_input_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            result = await generate_reply_variants("", "friendly")
            # –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å fallback –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            assert isinstance(result, list) or result is None
        except Exception as e:
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            assert "–ø—É—Å—Ç" in str(e).lower() or "–¥–ª–∏–Ω" in str(e).lower()
        
        # –¢–µ—Å—Ç None —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            result = await generate_reply_variants(None, "friendly")
            assert isinstance(result, list) or result is None
        except Exception as e:
            assert "–ø—É—Å—Ç" in str(e).lower() or "none" in str(e).lower()

@pytest.mark.asyncio
async def test_generate_reply_variants_response_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        mock_response = Mock()
        mock_response.choices = [
            Mock(message=Mock(content="–í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç\n–í–∞—Ä–∏–∞–Ω—Ç 2: –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç\n–í–∞—Ä–∏–∞–Ω—Ç 3: –¢—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç"))
        ]
        mock_client.chat.completions.create = AsyncMock(return_value=mock_response)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        variants = await generate_reply_variants("–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞", "friendly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        assert isinstance(variants, list)
        assert len(variants) >= 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç (–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
        assert all(len(v.strip()) > 0 for v in variants)

@pytest.mark.asyncio  
async def test_concurrent_requests():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    with patch.dict(os.environ, {'GROQ_API_KEY': 'test_api_key'}), \
         patch('groq_integration.AsyncGroq') as mock_groq_class, \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = Mock()
        mock_groq_class.return_value = mock_client
        mock_response = Mock()
        mock_response.choices = [
            Mock(message=Mock(content="–í–∞—Ä–∏–∞–Ω—Ç 1: Test reply\n–í–∞—Ä–∏–∞–Ω—Ç 2: Test reply 2\n–í–∞—Ä–∏–∞–Ω—Ç 3: Test reply 3"))
        ]
        mock_client.chat.completions.create = AsyncMock(return_value=mock_response)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        tasks = [
            generate_reply_variants(f"–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i} –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞", "friendly") 
            for i in range(3)
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
        assert len(results) == 3
        assert all(isinstance(r, list) for r in results if not isinstance(r, Exception))

@pytest.mark.asyncio
async def test_missing_api_key():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ API –∫–ª—é—á–∞"""
    with patch.dict(os.environ, {}, clear=True), \
         patch('groq_integration.bot_logger') as mock_logger:
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from groq_integration import generate_reply_variants
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–∞
        try:
            result = await generate_reply_variants("–¢–µ—Å—Ç", "friendly")
            # –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å fallback –≤–∞—Ä–∏–∞–Ω—Ç—ã
            assert isinstance(result, list)
        except Exception as e:
            # –ò–ª–∏ –ø–æ–¥–Ω—è—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞
            assert "api" in str(e).lower() or "–∫–ª—é—á" in str(e).lower() or "key" in str(e).lower() 