"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
"""

import pytest
from unittest.mock import patch, Mock, AsyncMock
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    def __init__(self, id: int, username: str = None, first_name: str = None):
        self.id = id
        self.username = username
        self.first_name = first_name

class MockChat:
    """–ú–æ–∫ —á–∞—Ç–∞ Telegram"""
    def __init__(self, id: int, type: str = "private"):
        self.id = id
        self.type = type

class MockMessage:
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    def __init__(self, text: str, from_user: MockUser = None, chat: MockChat = None):
        self.text = text
        self.from_user = from_user or MockUser(123, "test_user", "Test")
        self.chat = chat or MockChat(123)

@pytest.mark.asyncio
async def test_start_command_handler():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class, \
         patch('main_bot.ErrorHandler') as mock_error_class, \
         patch('main_bot.state_manager') as mock_state:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock()
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_user_activity = Mock()
        
        mock_error_handler = Mock()
        mock_error_class.return_value = mock_error_handler
        
        mock_state.increment_user_stat = AsyncMock()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤
        import main_bot
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/start", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        async def mock_start_handler(msg):
            """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start"""
            welcome_text = (
                "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à OF Assistant Bot!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ OnlyFans.\n\n"
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /reply [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                "‚Ä¢ /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /reply –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤! üí´"
            )
            await mock_bot.reply_to(msg, welcome_text)
            mock_logger.log_user_activity(msg.from_user.id, "start_command")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_start_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_bot.reply_to.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_bot.reply_to.call_args
        response_text = call_args[0][1]  # –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        assert "–ü—Ä–∏–≤–µ—Ç" in response_text
        assert "OF Assistant Bot" in response_text
        assert "/reply" in response_text
        assert "/help" in response_text
        assert "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" in response_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mock_logger.log_user_activity.assert_called_once_with(123, "start_command")

@pytest.mark.asyncio 
async def test_help_command_handler():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock()
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_user_activity = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/help", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        async def mock_help_handler(msg):
            """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /help"""
            help_text = (
                "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º OF Assistant Bot\n\n"
                "üîπ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "üîπ /reply [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤\n"
                "üîπ /stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "üîπ /ppv - —Ñ—É–Ω–∫—Ü–∏–∏ PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "/reply –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?\n\n"
                "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."
            )
            await mock_bot.reply_to(msg, help_text)
            mock_logger.log_user_activity(msg.from_user.id, "help_command")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_help_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_bot.reply_to.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_bot.reply_to.call_args
        response_text = call_args[0][1]
        
        assert "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" in response_text
        assert "/start" in response_text
        assert "/help" in response_text  
        assert "/reply" in response_text
        assert "/stats" in response_text
        assert "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" in response_text
        assert "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" in response_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mock_logger.log_user_activity.assert_called_once_with(123, "help_command")

@pytest.mark.asyncio
async def test_stats_command_handler():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class, \
         patch('main_bot.state_manager') as mock_state:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock()
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_user_activity = Mock()
        
        # –ú–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_state.get_user_stat = AsyncMock(side_effect=lambda user_id, stat: 5 if stat == 'reply_requests' else 3)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/stats", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        async def mock_stats_handler(msg):
            """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /stats"""
            user_id = msg.from_user.id
            reply_requests = await mock_state.get_user_stat(user_id, 'reply_requests')
            replies_selected = await mock_state.get_user_stat(user_id, 'replies_selected')
            
            if reply_requests > 0:
                completion_rate = int((replies_selected / reply_requests) * 100) if reply_requests > 0 else 0
                stats_text = (
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                    f"üìù –ó–∞–ø—Ä–æ—Å–æ–≤ /reply: {reply_requests}\n"
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {replies_selected}\n"
                    f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_rate}%\n\n"
                    f"üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                )
            else:
                stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–æ –≤—ã —É–∂–µ –º–æ–ª–æ–¥–µ—Ü! üåü"
            
            await mock_bot.reply_to(msg, stats_text)
            mock_logger.log_user_activity(user_id, "stats_command")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_stats_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_bot.reply_to.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_bot.reply_to.call_args
        response_text = call_args[0][1]
        
        assert "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in response_text.lower()
        assert "–∑–∞–ø—Ä–æ—Å–æ–≤" in response_text.lower() or "–º–æ–ª–æ–¥–µ—Ü" in response_text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mock_logger.log_user_activity.assert_called_once_with(123, "stats_command")

@pytest.mark.asyncio
async def test_ppv_command_handler():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ppv"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock()
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_user_activity = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/ppv", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        async def mock_ppv_handler(msg):
            """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /ppv"""
            ppv_text = (
                "üí∞ –§—É–Ω–∫—Ü–∏—è PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                "üöÄ –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π PPV\n"
                "‚Ä¢ –¶–µ–Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã\n\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üì±"
            )
            await mock_bot.reply_to(msg, ppv_text)
            mock_logger.log_user_activity(msg.from_user.id, "ppv_command")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_ppv_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_bot.reply_to.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_bot.reply_to.call_args
        response_text = call_args[0][1]
        
        assert "PPV" in response_text
        assert "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" in response_text
        assert "–°–∫–æ—Ä–æ" in response_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mock_logger.log_user_activity.assert_called_once_with(123, "ppv_command")

@pytest.mark.asyncio
async def test_reply_command_basic_structure():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥—ã /reply"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class, \
         patch('main_bot.state_manager') as mock_state, \
         patch('main_bot.generate_reply_variants') as mock_groq:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock()
        mock_bot.send_message = AsyncMock()
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_user_activity = Mock()
        
        mock_state.increment_user_stat = AsyncMock()
        mock_state.set_user_message = AsyncMock()
        mock_state.set_last_message_for_reply = AsyncMock()
        
        mock_groq.return_value = ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3"]
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/reply –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        async def mock_reply_handler(msg):
            """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /reply"""
            text_parts = msg.text.split(' ', 1)
            if len(text_parts) < 2:
                await mock_bot.reply_to(msg, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reply")
                return
            
            user_message = text_parts[1].strip()
            if not user_message:
                await mock_bot.reply_to(msg, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await mock_state.increment_user_stat(msg.from_user.id, 'reply_requests')
            await mock_state.set_user_message(msg.from_user.id, user_message)
            await mock_state.set_last_message_for_reply(msg.from_user.id, user_message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = await mock_groq(user_message, "friendly")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            reply_text = f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
            for i, variant in enumerate(variants, 1):
                reply_text += f"{i}. {variant}\n"
            
            await mock_bot.reply_to(msg, reply_text)
            mock_logger.log_user_activity(msg.from_user.id, "reply_command")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_reply_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        mock_state.increment_user_stat.assert_called_with(123, 'reply_requests')
        mock_state.set_user_message.assert_called_with(123, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        mock_state.set_last_message_for_reply.assert_called_with(123, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Groq –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_groq.assert_called_once_with("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "friendly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_bot.reply_to.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_bot.reply_to.call_args
        response_text = call_args[0][1]
        
        assert "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in response_text
        assert "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" in response_text
        assert "–í–∞—Ä–∏–∞–Ω—Ç 1" in response_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mock_logger.log_user_activity.assert_called_once_with(123, "reply_command")

@pytest.mark.asyncio
async def test_error_handling_in_commands():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'test_token', 'GROQ_API_KEY': 'test_key'}), \
         patch('main_bot.AsyncTeleBot') as mock_bot_class, \
         patch('main_bot.BotLogger') as mock_logger_class, \
         patch('main_bot.ErrorHandler') as mock_error_class:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_bot = Mock()
        mock_bot_class.return_value = mock_bot
        mock_bot.reply_to = AsyncMock(side_effect=Exception("Bot error"))
        
        mock_logger = Mock()
        mock_logger_class.return_value = mock_logger
        mock_logger.log_error = Mock()
        
        mock_error_handler = Mock()
        mock_error_class.return_value = mock_error_handler
        mock_error_handler.handle_error = Mock(return_value={'user_message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'})
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MockMessage("/start", MockUser(123, "test_user", "–¢–µ—Å—Ç"))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        async def mock_error_handler_func(msg):
            """–ú–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
            try:
                await mock_bot.reply_to(msg, "Test message")
            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                error_info = mock_error_handler.handle_error(e, {'command': 'start'})
                mock_logger.log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: {str(e)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await mock_error_handler_func(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_error_handler.handle_error.assert_called_once()
        mock_logger.log_error.assert_called_once() 