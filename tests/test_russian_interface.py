#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Enterprise Bot V2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# Add core directory to path
sys.path.insert(0, str("core"))

try:
    from core.services.payment_service import PaymentService
    from core.services.message_service import MessageService
    from core.services.user_service import UserService, SubscriptionTier
    print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


async def test_russian_interface():
    """–¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–£–°–°–ö–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("="*50)
    
    # –¢–µ—Å—Ç PaymentService
    print("\nüìä –¢–µ—Å—Ç PaymentService:")
    payment_service = PaymentService()
    
    plans_text = payment_service.get_payment_plans_text()
    print("‚úÖ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫:")
    print(plans_text[:200] + "..." if len(plans_text) > 200 else plans_text)
    
    tiers_text = payment_service.get_available_tiers_text()
    print("\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:")
    print(tiers_text[:200] + "..." if len(tiers_text) > 200 else tiers_text)
    
    # –¢–µ—Å—Ç MessageService
    print("\nüìù –¢–µ—Å—Ç MessageService:")
    message_service = MessageService()
    
    welcome_msg = message_service.get_welcome_message("–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(welcome_msg[:200] + "..." if len(welcome_msg) > 200 else welcome_msg)
    
    premium_offer = message_service.get_premium_offer_text()
    print("\n‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º:")
    print(premium_offer[:200] + "..." if len(premium_offer) > 200 else premium_offer)
    
    help_text = message_service.get_help_text()
    print("\n‚úÖ –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏:")
    print(help_text[:200] + "..." if len(help_text) > 200 else help_text)
    
    conversion_msg = message_service.get_conversion_message(10)
    print("\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(conversion_msg[:200] + "..." if len(conversion_msg) > 200 else conversion_msg)
    
    error_msg = message_service.get_error_message()
    print("\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:")
    print(error_msg)
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    print("\nü§ñ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:")
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–¢—ã –∫—Ä–∞—Å–∏–≤–∞—è",
        "–õ—é–±–ª—é —Ç–µ–±—è",
        "–ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ"
    ]
    
    for msg in test_messages:
        response = await message_service.generate_response(12345, msg)
        print(f"üì© '{msg}' -> '{response}'")
    
    # –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
    print("\nüìã –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤:")
    friendly_templates = await message_service.get_templates("friendly")
    print(f"‚úÖ –î—Ä—É–∂–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã: {len(friendly_templates)} —à—Ç—É–∫")
    
    flirt_templates = await message_service.get_templates("flirt")
    print(f"‚úÖ –§–ª–∏—Ä—Ç —à–∞–±–ª–æ–Ω—ã: {len(flirt_templates)} —à—Ç—É–∫")
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ —Ä—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True


async def test_user_service():
    """–¢–µ—Å—Ç UserService"""
    print("\nüë• –¢–µ—Å—Ç UserService:")
    
    user_service = UserService()
    await user_service.initialize()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await user_service.create_user({
        'user_id': 999999,
        'username': 'test_user',
        'first_name': '–¢–µ—Å—Ç',
        'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    })
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_user(999999)
    if user:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        print(f"   –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription.value}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {user.messages_sent}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    result = await user_service.upgrade_subscription(
        999999, SubscriptionTier.PREMIUM, 30
    )
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {result}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    metrics = await user_service.get_performance_metrics()
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for key, value in metrics.items():
        print(f"   {key}: {value}")
    
    return True


def test_payment_plans():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\nüí∞ –¢–µ—Å—Ç –ø–ª–∞–Ω–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π:")
    
    payment_service = PaymentService()
    
    for tier in [SubscriptionTier.PREMIUM, SubscriptionTier.VIP, SubscriptionTier.ULTIMATE]:
        for period in ['daily', 'weekly', 'monthly']:
            plan = payment_service.get_plan_by_tier_and_period(tier, period)
            if plan:
                print(f"‚úÖ {tier.value} {period}: {plan.price_stars}‚≠ê ({plan.description_ru})")
                
                # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏
                savings = payment_service.calculate_discount_savings(tier, period)
                if savings.get('has_discount'):
                    print(f"   üí∞ –°–∫–∏–¥–∫–∞ {savings['discount_percent']}%: —ç–∫–æ–Ω–æ–º–∏—è {savings['savings_stars']}‚≠ê")
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENTERPRISE BOT V2.0 - –†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await test_russian_interface()
        
        # –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await test_user_service()
        
        # –¢–µ—Å—Ç –ø–ª–∞–Ω–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
        test_payment_plans()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("‚úÖ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    input(f"\n{'‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' if success else '‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ'}. –ù–∞–∂–º–∏—Ç–µ ENTER...")
    sys.exit(0 if success else 1) 