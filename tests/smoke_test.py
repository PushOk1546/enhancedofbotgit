"""
Smoke-—Ç–µ—Å—Ç—ã –¥–ª—è OF Assistant Bot —Å DeepSeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import pytest
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# –ú–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ['TELEGRAM_BOT_TOKEN'] = 'test_token'
os.environ['DEEPSEEK_API_KEY'] = 'test_key'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
def test_import_config():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        import config
        assert hasattr(config, 'config')
        assert hasattr(config.config, 'DEEPSEEK_API_KEY')
        print("‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")

def test_import_ai_service():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ AI —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from services.ai_integration import AIService, ai_service
        assert isinstance(ai_service, AIService)
        print("‚úÖ AI Service –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI Service: {e}")

def test_import_handlers():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    try:
        from handlers import BotHandlers, setup_handlers
        print("‚úÖ Handlers –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers: {e}")

def test_import_main():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    try:
        import main
        assert hasattr(main, 'OFAssistantBot')
        print("‚úÖ Main –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ main: {e}")

@pytest.mark.asyncio
async def test_ai_service_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from services.ai_integration import AIService
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        service = AIService()
        
        assert service.api_key == 'test_key'
        assert service.model == 'deepseek-chat'
        assert hasattr(service, 'stats')
        assert hasattr(service, 'response_cache')
        
        print("‚úÖ AI Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except ValueError as e:
        if "DEEPSEEK_API_KEY" in str(e):
            print("‚ö†Ô∏è AI Service —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            pytest.fail(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI Service: {e}")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Service: {e}")

@pytest.mark.asyncio 
async def test_ai_service_fallback_response():
    """–¢–µ—Å—Ç fallback –æ—Ç–≤–µ—Ç–æ–≤ AI —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from services.ai_integration import AIService
        service = AIService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –æ—Ç–≤–µ—Ç—ã
        flirt_response = service._get_fallback_response("test", {"type": "flirt"})
        ppv_response = service._get_fallback_response("test", {"type": "ppv_promo"})
        default_response = service._get_fallback_response("test", {})
        
        assert isinstance(flirt_response, str)
        assert isinstance(ppv_response, str) 
        assert isinstance(default_response, str)
        
        assert "üòò" in flirt_response  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∏—Ä—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        assert "üî•" in ppv_response    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PPV –æ—Ç–≤–µ—Ç
        
        print("‚úÖ Fallback –æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ fallback –æ—Ç–≤–µ—Ç–æ–≤: {e}")

def test_cache_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    try:
        from services.ai_integration import AIService
        service = AIService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–∞ –∫—ç—à–∞
        key1 = service._get_cache_key("test prompt", {"type": "test"})
        key2 = service._get_cache_key("test prompt", {"type": "test"})
        key3 = service._get_cache_key("different prompt", {"type": "test"})
        
        assert key1 == key2  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã = –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏
        assert key1 != key3  # –†–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã = —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        service._cache_response("test_key", "test_response")
        cached = service._get_cached_response("test_key")
        
        assert cached == "test_response"
        
        print("‚úÖ –ö—ç—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∞: {e}")

def test_stats_functionality():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from services.ai_integration import AIService
        service = AIService()
        
        stats = service.get_stats()
        required_keys = ["total_requests", "successful_requests", "failed_requests", 
                        "cache_hits", "cache_size", "success_rate"]
        
        for key in required_keys:
            assert key in stats
        
        assert isinstance(stats["success_rate"], (int, float))
        assert 0 <= stats["success_rate"] <= 100
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def test_requirements_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = [
        'telebot',
        'aiohttp', 
        'aiofiles',
        'apscheduler',
        'loguru',
        'pydantic',
        'cachetools',
        'dotenv'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            missing_modules.append(module)
            print(f"‚ùå {module} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if missing_modules:
        pytest.fail(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'main.py',
        'config.py', 
        'handlers.py',
        'api_handler.py',
        'services/__init__.py',
        'services/ai_integration.py',
        'core/services/__init__.py',
        'requirements.txt',
        'env_template.txt'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = root_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            missing_files.append(file_path)
            print(f"‚ùå {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if missing_files:
        pytest.fail(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")

if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é"""
    print("üß™ –ó–∞–ø—É—Å–∫ smoke-—Ç–µ—Å—Ç–æ–≤ OF Assistant Bot")
    print("=" * 50)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_import_config()
    test_import_ai_service() 
    test_import_handlers()
    test_import_main()
    test_requirements_availability()
    test_file_structure()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async def run_async_tests():
        await test_ai_service_initialization()
        await test_ai_service_fallback_response()
        
    try:
        asyncio.run(run_async_tests())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã 2
    test_cache_functionality()
    test_stats_functionality()
    
    print("=" * 50)
    print("üéâ –í—Å–µ smoke-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 