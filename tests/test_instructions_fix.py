#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ KeyError: 'history' –≤ send_navigation_instructions
"""

import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from handlers import send_navigation_instructions
from state_manager import StateManager
from models import UserState

def test_instructions_template_placeholders():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ instructions.txt"""
    print("=== TEST: Instructions Template Placeholders ===")
    
    try:
        instructions_file = Path("prompts/instructions.txt")
        if not instructions_file.exists():
            print("‚ùå instructions.txt file not found")
            return False
        
        with open(instructions_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        has_preferences = '{preferences}' in content
        has_history = '{history}' in content
        
        print(f"Template has {{preferences}} placeholder: {has_preferences}")
        print(f"Template has {{history}} placeholder: {has_history}")
        
        if has_preferences and has_history:
            print("‚úÖ Both required placeholders found in template")
            return True
        else:
            print("‚ùå Missing required placeholders")
            return False
            
    except Exception as e:
        print(f"‚ùå Error checking template: {e}")
        return False

async def test_send_navigation_instructions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ send_navigation_instructions —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
    print("\n=== TEST: Send Navigation Instructions ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock bot
        mock_bot = Mock()
        mock_bot.send_message = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º mock user_state
        mock_user_state = Mock()
        mock_user_state.preferences.completed_survey = True
        mock_user_state.preferences.content_types = ['photos', 'videos']
        mock_user_state.preferences.price_range = 'medium'
        mock_user_state.message_history = [
            {'role': 'user', 'content': 'Hello'},
            {'role': 'assistant', 'content': 'Hi there!'},
            {'role': 'user', 'content': 'How are you?'}
        ]
        mock_user_state.model = 'smart'
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        import inspect
        if not callable(send_navigation_instructions):
            print("‚ùå send_navigation_instructions is not callable")
            return False
        
        print("‚úÖ send_navigation_instructions function exists")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        sig = inspect.signature(send_navigation_instructions)
        params = list(sig.parameters.keys())
        expected_params = ['bot', 'chat_id', 'user_state']
        
        if params == expected_params:
            print("‚úÖ Function has correct parameters")
        else:
            print(f"‚ùå Expected params: {expected_params}, got: {params}")
            return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ format —Å –æ–±–æ–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        source = inspect.getsource(send_navigation_instructions)
        has_format_call = 'format(preferences=preferences, history=history)' in source
        
        if has_format_call:
            print("‚úÖ format() call includes both preferences and history")
            return True
        else:
            print("‚ùå format() call missing required parameters")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if 'format(' in source:
                print("   Found format() call but with wrong parameters")
            else:
                print("   No format() call found")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing navigation instructions: {e}")
        return False

def test_user_state_history_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n=== TEST: User State History Access ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UserState –æ–±—ä–µ–∫—Ç
        user_state = UserState()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ message_history
        if not hasattr(user_state, 'message_history'):
            print("‚ùå UserState has no message_history attribute")
            return False
        
        print("‚úÖ UserState has message_history attribute")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(user_state.message_history, list):
            print(f"‚ùå message_history is not a list, got: {type(user_state.message_history)}")
            return False
        
        print("‚úÖ message_history is a list")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = {
            'role': 'user',
            'content': 'test message',
            'timestamp': '2025-06-02T23:00:00'
        }
        user_state.message_history.append(test_message)
        
        if len(user_state.message_history) == 1:
            print("‚úÖ Can add messages to history")
            return True
        else:
            print("‚ùå Failed to add message to history")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing user state history: {e}")
        return False

async def test_all_instructions_fixes():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è instructions"""
    print("Testing instructions template formatting fixes")
    print("=" * 60)
    
    test1_passed = test_instructions_template_placeholders()
    test2_passed = await test_send_navigation_instructions()
    test3_passed = test_user_state_history_access()
    
    print("\n" + "=" * 60)
    if test1_passed and test2_passed and test3_passed:
        print("SUCCESS: All instructions tests passed!")
        print("‚úÖ Template has correct placeholders")
        print("‚úÖ Function uses both preferences and history")
        print("‚úÖ User state history access works")
        print("\nüéâ The KeyError: 'history' should be fixed!")
        return True
    else:
        print("FAILURE: Some tests failed!")
        print("‚ùå Additional fixes may be needed")
        return False

if __name__ == "__main__":
    asyncio.run(test_all_instructions_fixes()) 