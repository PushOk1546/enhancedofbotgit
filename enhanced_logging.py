#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è OF Assistant Bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç loguru –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
from pathlib import Path
from typing import Optional, Any, Dict
from datetime import datetime

try:
    from loguru import logger
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: loguru –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install loguru")
    sys.exit(1)

try:
    from config import config
except ImportError:
    print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: config.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    
    class DefaultConfig:
        LOG_LEVEL = "INFO"
        DEBUG = False
        
        def get_log_config(self):
            return {
                'level': 'INFO',
                'format': '<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>',
                'rotation': '10 MB',
                'retention': '1 week',
                'compression': 'zip'
            }
    
    config = DefaultConfig()


class BotLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
    –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, 
                 log_dir: str = "logs", 
                 log_file: str = "bot.log",
                 logger_name: str = "BotLogger"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            log_file: –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
            logger_name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        """
        self.log_dir = Path(log_dir)
        self.log_file = log_file
        self.logger_name = logger_name
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_dir.mkdir(exist_ok=True)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ loguru
        logger.remove()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self._setup_logger()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ loguru –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.logger = logger
        
        self.log_info(f"üöÄ –õ–æ–≥–≥–µ—Ä {logger_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.log_info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {self.log_dir.absolute()}")
        self.log_info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
    
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –∏ —Ñ–∞–π–ª–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º"""
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        log_config = config.get_log_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        console_format = (
            "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<cyan>{extra[logger_name]}</cyan> | "
            "<level>{message}</level>"
        )
        
        logger.add(
            sys.stdout,
            format=console_format,
            level=config.LOG_LEVEL,
            colorize=True,
            filter=lambda record: record["extra"].get("logger_name") == self.logger_name
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        main_log_path = self.log_dir / self.log_file
        logger.add(
            str(main_log_path),
            format=log_config['format'],
            level=config.LOG_LEVEL,
            rotation=log_config['rotation'],
            retention=log_config['retention'],
            compression=log_config['compression'],
            encoding="utf-8",
            filter=lambda record: record["extra"].get("logger_name") == self.logger_name
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        error_log_path = self.log_dir / "errors.log"
        logger.add(
            str(error_log_path),
            format=log_config['format'],
            level="ERROR",
            rotation="5 MB",
            retention="2 weeks",
            compression="zip",
            encoding="utf-8",
            filter=lambda record: (
                record["level"].name == "ERROR" and 
                record["extra"].get("logger_name") == self.logger_name
            )
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω DEBUG)
        if config.DEBUG:
            debug_log_path = self.log_dir / "debug.log"
            logger.add(
                str(debug_log_path),
                format=log_config['format'],
                level="DEBUG",
                rotation="20 MB",
                retention="3 days",
                compression="zip",
                encoding="utf-8",
                filter=lambda record: (
                    record["level"].name == "DEBUG" and 
                    record["extra"].get("logger_name") == self.logger_name
                )
            )
    
    def _log(self, level: str, message: str, **kwargs):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        logger.bind(logger_name=self.logger_name).log(level, message, **kwargs)
    
    def log_info(self, message: str, **kwargs):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self._log("INFO", message, **kwargs)
    
    def log_error(self, message: str, exc_info: bool = False, **kwargs):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            exc_info: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        if exc_info:
            logger.bind(logger_name=self.logger_name).exception(message, **kwargs)
        else:
            self._log("ERROR", message, **kwargs)
    
    def log_warning(self, message: str, **kwargs):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self._log("WARNING", message, **kwargs)
    
    def log_debug(self, message: str, **kwargs):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self._log("DEBUG", message, **kwargs)
    
    def log_user_activity(self, user_id: int, action: str, details: Optional[Dict[str, Any]] = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action: –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        details_str = f" | –î–µ—Ç–∞–ª–∏: {details}" if details else ""
        message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –î–µ–π—Å—Ç–≤–∏–µ: {action}{details_str}"
        self.log_info(message)
    
    def log_api_call(self, api_name: str, endpoint: str, status: str, response_time: Optional[float] = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤
        
        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Groq", "Telegram")
            endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
            status: –°—Ç–∞—Ç—É—Å –≤—ã–∑–æ–≤–∞
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        time_str = f" | –í—Ä–µ–º—è: {response_time:.2f}—Å" if response_time else ""
        message = f"üåê API {api_name} | {endpoint} | –°—Ç–∞—Ç—É—Å: {status}{time_str}"
        
        if status.lower() in ['error', 'failed', 'timeout']:
            self.log_error(message)
        else:
            self.log_info(message)
    
    def log_bot_event(self, event_type: str, description: str, metadata: Optional[Dict[str, Any]] = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (start, stop, restart, etc.)
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        meta_str = f" | –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}" if metadata else ""
        message = f"ü§ñ –°–æ–±—ã—Ç–∏–µ: {event_type} | {description}{meta_str}"
        self.log_info(message)
    
    def log_performance(self, operation: str, duration: float, success: bool = True):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Args:
            operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        message = f"‚è±Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è: {operation} | {status} | –í—Ä–µ–º—è: {duration:.3f}—Å"
        
        if success:
            self.log_info(message)
        else:
            self.log_warning(message)
    
    def create_context_logger(self, context: str):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "handler:start", "api:groq")
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        return ContextLogger(self, context)
    
    def get_log_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        log_files = list(self.log_dir.glob("*.log"))
        
        stats = {
            "log_directory": str(self.log_dir.absolute()),
            "log_files_count": len(log_files),
            "log_files": [],
            "total_size_mb": 0
        }
        
        for log_file in log_files:
            if log_file.exists():
                size_bytes = log_file.stat().st_size
                size_mb = size_bytes / (1024 * 1024)
                stats["total_size_mb"] += size_mb
                
                stats["log_files"].append({
                    "name": log_file.name,
                    "size_mb": round(size_mb, 2),
                    "modified": datetime.fromtimestamp(log_file.stat().st_mtime).isoformat()
                })
        
        stats["total_size_mb"] = round(stats["total_size_mb"], 2)
        return stats


class ContextLogger:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    
    def __init__(self, parent_logger: BotLogger, context: str):
        self.parent = parent_logger
        self.context = context
    
    def _format_message(self, message: str) -> str:
        return f"[{self.context}] {message}"
    
    def info(self, message: str, **kwargs):
        self.parent.log_info(self._format_message(message), **kwargs)
    
    def error(self, message: str, exc_info: bool = False, **kwargs):
        self.parent.log_error(self._format_message(message), exc_info=exc_info, **kwargs)
    
    def warning(self, message: str, **kwargs):
        self.parent.log_warning(self._format_message(message), **kwargs)
    
    def debug(self, message: str, **kwargs):
        self.parent.log_debug(self._format_message(message), **kwargs)


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
bot_logger = BotLogger()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['BotLogger', 'ContextLogger', 'bot_logger']

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞
    demo_logger = BotLogger(logger_name="DemoLogger")
    
    demo_logger.log_info("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    demo_logger.log_warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    demo_logger.log_debug("–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    demo_logger.log_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    
    demo_logger.log_user_activity(12345, "start_command", {"username": "test_user"})
    demo_logger.log_api_call("Groq", "/chat/completions", "success", 0.15)
    demo_logger.log_bot_event("startup", "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    demo_logger.log_performance("message_processing", 0.045, True)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    handler_logger = demo_logger.create_context_logger("message_handler")
    handler_logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = demo_logger.get_log_stats()
    demo_logger.log_info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤: {stats}") 