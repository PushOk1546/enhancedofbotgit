"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

from telebot import types
from typing import List, Dict, Any
from datetime import datetime, timedelta
from chat_models import ChatManager, ClientChat

def get_chat_management_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.row(
        types.InlineKeyboardButton("üí¨ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="chat_list"),
        types.InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", callback_data="chat_new")
    )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º
    keyboard.row(
        types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="chat_rename"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="chat_delete")
    )
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –∞–Ω–∞–ª–∏–∑ –∏ –ø–∞–º—è—Ç—å
    keyboard.row(
        types.InlineKeyboardButton("üß† –ü–∞–º—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="chat_memory"),
        types.InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="chat_analytics")
    )
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –Ω–∞–∑–∞–¥
    keyboard.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    return keyboard

def get_chat_list_keyboard(chat_manager: ChatManager, page: int = 0, items_per_page: int = 5) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤"""
    keyboard = types.InlineKeyboardMarkup()
    
    chat_list = chat_manager.get_chat_list()
    total_chats = len(chat_list)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, total_chats)
    page_chats = chat_list[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    for chat_info in page_chats:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        status_emoji = "üü¢" if chat_info['is_active'] else "‚ö™"
        stage_emoji = get_stage_emoji(chat_info['conversation_stage'])
        
        button_text = f"{status_emoji} {stage_emoji} {chat_info['client_name'][:20]}"
        callback_data = f"chat_switch_{chat_info['chat_id']}"
        
        keyboard.row(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_chats > items_per_page:
        nav_buttons = []
        
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"chat_list_page_{page-1}"))
        
        nav_buttons.append(types.InlineKeyboardButton(
            f"üìÑ {page+1}/{(total_chats-1)//items_per_page + 1}", 
            callback_data="chat_list_info"
        ))
        
        if end_idx < total_chats:
            nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"chat_list_page_{page+1}"))
        
        keyboard.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.row(
        types.InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", callback_data="chat_new"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
    )
    
    return keyboard

def get_chat_context_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    keyboard.row(
        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="chat_reply"),
        types.InlineKeyboardButton("üíù –§–ª–∏—Ä—Ç", callback_data="chat_flirt")
    )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard.row(
        types.InlineKeyboardButton("üéÅ PPV", callback_data="chat_ppv"),
        types.InlineKeyboardButton("üí∞ –ß–∞–µ–≤—ã–µ", callback_data="chat_tips")
    )
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
    keyboard.row(
        types.InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data="chat_note"),
        types.InlineKeyboardButton("üè∑ –¢–µ–≥–∏", callback_data="chat_tags")
    )
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    keyboard.row(
        types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —á–∞—Ç", callback_data="chat_list"),
        types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="chat_management")
    )
    
    return keyboard

def get_stage_emoji(stage: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    stage_emojis = {
        "initial": "üå±",
        "warming_up": "üî•",
        "engaged": "üíï",
        "intimate": "üòç"
    }
    return stage_emojis.get(stage, "üí¨")

def format_chat_info(chat: ClientChat) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    last_message = chat.messages[-1] if chat.messages else None
    last_msg_preview = last_message.content[:100] + "..." if last_message and len(last_message.content) > 100 else (last_message.content if last_message else "–ù–æ–≤—ã–π —á–∞—Ç")
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    time_diff = datetime.now() - chat.last_activity
    if time_diff < timedelta(hours=1):
        time_str = f"{int(time_diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    elif time_diff < timedelta(days=1):
        time_str = f"{int(time_diff.total_seconds() // 3600)} —á. –Ω–∞–∑–∞–¥"
    else:
        time_str = f"{int(time_diff.days)} –¥–Ω. –Ω–∞–∑–∞–¥"
    
    stage_emoji = get_stage_emoji(chat.conversation_stage)
    
    info = f"""üí¨ **{chat.client_profile.name}**
{stage_emoji} –≠—Ç–∞–ø: {chat.conversation_stage}
üíå –°–æ–æ–±—â–µ–Ω–∏–π: {len(chat.messages)}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_str}

üìù **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
_{last_msg_preview}_

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat.client_memory.get("preferences"):
        prefs = ", ".join(f"{k}: {v}" for k, v in list(chat.client_memory["preferences"].items())[:3])
        info += f"üß† **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:** {prefs}\n"
    
    if chat.client_memory.get("interests"):
        interests = ", ".join(chat.client_memory["interests"][:3])
        info += f"‚ù§Ô∏è **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {interests}\n"
    
    return info

def format_chat_memory(chat: ClientChat) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    memory_text = f"üß† **–ü–∞–º—è—Ç—å –æ –∫–ª–∏–µ–Ω—Ç–µ: {chat.client_profile.name}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    memory_text += f"üÜî ID: `{chat.client_profile.client_id[:8]}...`\n"
    memory_text += f"üìÖ –ó–Ω–∞–∫–æ–º—ã —Å: {chat.created_at.strftime('%Y-%m-%d')}\n"
    memory_text += f"üé≠ –≠—Ç–∞–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {chat.conversation_stage}\n"
    memory_text += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {chat.client_mood}\n\n"
    
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if chat.client_memory.get("preferences"):
        memory_text += "üíù **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n"
        for key, value in chat.client_memory["preferences"].items():
            memory_text += f"‚Ä¢ {key}: {value}\n"
        memory_text += "\n"
    
    # –ò–Ω—Ç–µ—Ä–µ—Å—ã
    if chat.client_memory.get("interests"):
        interests = ", ".join(chat.client_memory["interests"])
        memory_text += f"‚ù§Ô∏è **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {interests}\n\n"
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
    if chat.client_memory.get("purchase_history"):
        memory_text += "üí∞ **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:**\n"
        for purchase in chat.client_memory["purchase_history"][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            memory_text += f"‚Ä¢ {purchase.get('type', '–ø–æ–∫—É–ø–∫–∞')}: {purchase.get('content', '')[:30]}...\n"
        memory_text += "\n"
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    memory_text += "üìä **–ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è:**\n"
    pattern = chat.interaction_pattern
    memory_text += f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {pattern.get('response_time', 'unknown')}\n"
    memory_text += f"‚Ä¢ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {pattern.get('message_length', 'unknown')}\n"
    memory_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏: {pattern.get('emoji_usage', 'unknown')}\n"
    memory_text += f"‚Ä¢ –í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å –∫ —Ñ–ª–∏—Ä—Ç—É: {pattern.get('flirt_receptiveness', 'unknown')}\n\n"
    
    # –ó–∞–º–µ—Ç–∫–∏
    if chat.client_memory.get("communication_notes"):
        memory_text += "üìù **–ó–∞–º–µ—Ç–∫–∏:**\n"
        for note in chat.client_memory["communication_notes"][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            memory_text += f"‚Ä¢ {note}\n"
    
    return memory_text

def format_chat_analytics(chat_manager: ChatManager) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º"""
    analytics_text = "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤**\n\n"
    
    chats = list(chat_manager.chats.values())
    total_chats = len(chats)
    
    if total_chats == 0:
        return "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤**\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤."
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_messages = sum(len(chat.messages) for chat in chats)
    active_chats = len([chat for chat in chats if chat.is_active])
    
    analytics_text += f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    analytics_text += f"‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
    analytics_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {active_chats}\n"
    analytics_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    analytics_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç: {total_messages // total_chats if total_chats > 0 else 0}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
    stage_counts = {}
    for chat in chats:
        stage = chat.conversation_stage
        stage_counts[stage] = stage_counts.get(stage, 0) + 1
    
    analytics_text += f"üé≠ **–ü–æ —ç—Ç–∞–ø–∞–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π:**\n"
    for stage, count in stage_counts.items():
        emoji = get_stage_emoji(stage)
        analytics_text += f"‚Ä¢ {emoji} {stage}: {count} —á–∞—Ç–æ–≤\n"
    analytics_text += "\n"
    
    # –¢–æ–ø-3 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞
    most_active = sorted(chats, key=lambda x: len(x.messages), reverse=True)[:3]
    analytics_text += f"üî• **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:**\n"
    for i, chat in enumerate(most_active, 1):
        analytics_text += f"{i}. {chat.client_profile.name}: {len(chat.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    return analytics_text

def create_chat_context_prompt(chat: ClientChat, user_message: str = "") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    context = f"""–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º {chat.client_profile.name}.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π:
- –≠—Ç–∞–ø: {chat.conversation_stage}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {chat.client_mood}
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat.messages)}

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –æ –∫–ª–∏–µ–Ω—Ç–µ
    if chat.client_memory.get("preferences"):
        context += "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n"
        for key, value in chat.client_memory["preferences"].items():
            context += f"- {key}: {value}\n"
        context += "\n"
    
    if chat.client_memory.get("interests"):
        interests = ", ".join(chat.client_memory["interests"])
        context += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    recent_messages = chat.get_recent_messages(5)
    if recent_messages:
        context += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for msg in recent_messages:
            context += f"{msg.role}: {msg.content}\n"
        context += "\n"
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è
    pattern = chat.interaction_pattern
    context += f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {pattern.get('message_length', 'unknown')} —Å–æ–æ–±—â–µ–Ω–∏—è, {pattern.get('emoji_usage', 'unknown')} —ç–º–æ–¥–∑–∏\n"
    context += f"–í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å –∫ —Ñ–ª–∏—Ä—Ç—É: {pattern.get('flirt_receptiveness', 'unknown')}\n\n"
    
    if user_message:
        context += f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n"
    
    context += """–°–æ–∑–¥–∞–π –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è –≤—Å—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ø–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è."""
    
    return context 