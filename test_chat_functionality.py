#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Å–æ–∑–¥–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø–∞–º—è—Ç—å.
"""

import asyncio
import sys
from dataclasses import dataclass
from datetime import datetime
from chat_models import ChatManager, ClientProfile, ClientChat, ChatMessage
from chat_utils import (
    get_chat_management_keyboard, get_chat_list_keyboard, get_chat_context_keyboard,
    format_chat_info, format_chat_memory, format_chat_analytics, create_chat_context_prompt
)
from chat_handlers import ChatHandlers
from state_manager import StateManager
from telebot import types

@dataclass
class MockUser:
    """Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    id: int = 12345
    first_name: str = "Test"
    last_name: str = "User"
    username: str = "testuser"

@dataclass
class MockMessage:
    """Mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    message_id: int = 1
    from_user: MockUser = None
    chat: object = None
    text: str = "–¢–µ—Å—Ç"
    
    def __post_init__(self):
        if self.from_user is None:
            self.from_user = MockUser()
        if self.chat is None:
            self.chat = MockUser()

class ChatTester:
    """–¢–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤"""
    
    def __init__(self):
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ß–ê–¢–û–í –° –ö–õ–ò–ï–ù–¢–ê–ú–ò")
        print("=" * 60)
        self.state_manager = StateManager()
        self.chat_handlers = ChatHandlers(self.state_manager)
        
    def test_chat_models(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        print("\nüìä –¢–ï–°–¢ –ú–û–î–ï–õ–ï–ô –î–ê–ù–ù–´–•:")
        
        try:
            # –¢–µ—Å—Ç ClientProfile
            profile = ClientProfile(name="–ê–Ω–Ω–∞", description="VIP –∫–ª–∏–µ–Ω—Ç")
            print(f"‚úÖ ClientProfile —Å–æ–∑–¥–∞–Ω: {profile.name} (ID: {profile.client_id[:8]}...)")
            
            # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            profile_dict = profile.to_dict()
            profile_restored = ClientProfile.from_dict(profile_dict)
            print(f"‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_restored.name == profile.name}")
            
            # –¢–µ—Å—Ç ChatMessage
            message = ChatMessage("user", "–ü—Ä–∏–≤–µ—Ç!", "text")
            print(f"‚úÖ ChatMessage —Å–æ–∑–¥–∞–Ω–æ: {message.role} - {message.content[:20]}...")
            
            # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_dict = message.to_dict()
            msg_restored = ChatMessage.from_dict(msg_dict)
            print(f"‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_restored.content == message.content}")
            
            # –¢–µ—Å—Ç ClientChat
            chat = ClientChat(profile)
            chat.add_message(message)
            print(f"‚úÖ ClientChat —Å–æ–∑–¥–∞–Ω: {len(chat.messages)} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π)")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
            context = chat.get_context_summary()
            print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
            chat_dict = chat.to_dict()
            chat_restored = ClientChat.from_dict(chat_dict)
            print(f"‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞: {len(chat_restored.messages)} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def test_chat_manager(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ChatManager"""
        print("\nüéõ –¢–ï–°–¢ CHAT MANAGER:")
        
        try:
            # –°–æ–∑–¥–∞–µ–º ChatManager
            manager = ChatManager(12345)
            print(f"‚úÖ ChatManager —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
            chat1 = manager.create_chat("–ê–Ω–Ω–∞", "VIP –∫–ª–∏–µ–Ω—Ç")
            chat2 = manager.create_chat("–ú–∞—Ä–∏—è", "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
            chat3 = manager.create_chat("–ö–∞—Ç—è", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —á–∞—Ç–æ–≤: {len(manager.chats)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            active = manager.get_active_chat()
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: {active.client_profile.name if active else 'None'}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            manager.add_message_to_active_chat("user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            manager.add_message_to_active_chat("assistant", "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
            manager.add_message_to_active_chat("user", "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤–µ—á–µ—Ä?")
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(active.messages)}")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —á–∞—Ç
            switched = manager.switch_chat(chat2.chat_id)
            print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞: {switched}")
            
            new_active = manager.get_active_chat()
            print(f"‚úÖ –ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: {new_active.client_profile.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_list = manager.get_chat_list()
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {len(chat_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            ai_context = manager.get_context_for_ai()
            print(f"‚úÖ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(ai_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
            manager_dict = manager.to_dict()
            manager_restored = ChatManager.from_dict(manager_dict)
            print(f"‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {len(manager_restored.chats)} —á–∞—Ç–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ChatManager: {e}")
            return False
    
    def test_chat_utils(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —á–∞—Ç–æ–≤"""
        print("\nüõ† –¢–ï–°–¢ CHAT UTILS:")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            manager = ChatManager(12345)
            chat1 = manager.create_chat("–ê–Ω–Ω–∞", "VIP")
            chat2 = manager.create_chat("–ú–∞—Ä–∏—è", "–ù–æ–≤–∞—è")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            chat1.add_message(ChatMessage("user", "–ü—Ä–∏–≤–µ—Ç!"))
            chat1.add_message(ChatMessage("assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"))
            
            # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            mgmt_kb = get_chat_management_keyboard()
            print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(mgmt_kb.keyboard)} —Ä—è–¥–æ–≤")
            
            list_kb = get_chat_list_keyboard(manager)
            print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞: {len(list_kb.keyboard)} —Ä—è–¥–æ–≤")
            
            context_kb = get_chat_context_keyboard()
            print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context_kb.keyboard)} —Ä—è–¥–æ–≤")
            
            # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            chat_info = format_chat_info(chat1)
            print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {len(chat_info)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            chat_memory = format_chat_memory(chat1)
            print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {len(chat_memory)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            analytics = format_chat_analytics(manager)
            print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {len(analytics)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
            ai_prompt = create_chat_context_prompt(chat1, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
            print(f"‚úÖ AI –ø—Ä–æ–º–ø—Ç: {len(ai_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat utils: {e}")
            return False
    
    async def test_chat_handlers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–æ–≤"""
        print("\nüéÆ –¢–ï–°–¢ CHAT HANDLERS:")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
            user = self.state_manager.get_user(12345)
            message = MockMessage()
            
            # –°–æ–∑–¥–∞–µ–º mock CallbackQuery
            call = types.CallbackQuery(
                id="test",
                from_user=message.from_user,
                data="chat_management",
                chat_instance="test_instance",
                json_string="{}",
                message=message
            )
            
            # –°–æ–∑–¥–∞–µ–º mock –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞)
            class MockBot:
                async def send_message(self, chat_id, text, **kwargs):
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
                    return True
                
                async def edit_message_text(self, text, chat_id, message_id, **kwargs):
                    print(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
                    return True
                
                async def answer_callback_query(self, callback_id, text=""):
                    print(f"üìû –û—Ç–≤–µ—Ç –Ω–∞ callback: {text}")
                    return True
            
            mock_bot = MockBot()
            
            print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
            
            # –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
            await self.chat_handlers.handle_chat_management(mock_bot, call, from_button=True)
            print("‚úÖ handle_chat_management —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            if not hasattr(user, 'chat_manager'):
                user.chat_manager = ChatManager(12345)
            
            chat = user.chat_manager.create_chat("–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
            
            # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
            call.data = "chat_list"
            await self.chat_handlers.handle_chat_list(mock_bot, call)
            print("‚úÖ handle_chat_list —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞
            await self.chat_handlers.handle_switch_chat(mock_bot, call, chat.chat_id)
            print("‚úÖ handle_switch_chat —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞
            await self.chat_handlers.handle_chat_memory(mock_bot, call)
            print("‚úÖ handle_chat_memory —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.chat_handlers.handle_chat_analytics(mock_bot, call)
            print("‚úÖ handle_chat_analytics —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat handlers: {e}")
            return False
    
    def test_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ StateManager
            user = self.state_manager.get_user(12345)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {user.user_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChatManager
            if not hasattr(user, 'chat_manager'):
                user.chat_manager = ChatManager(12345)
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã
            chat1 = user.chat_manager.create_chat("–ê–Ω–Ω–∞")
            chat2 = user.chat_manager.create_chat("–ú–∞—Ä–∏—è")
            print(f"‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: {len(user.chat_manager.chats)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            user.chat_manager.add_message_to_active_chat("user", "–ü—Ä–∏–≤–µ—Ç!")
            user.chat_manager.add_message_to_active_chat("assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.state_manager.save_user(12345, user)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
            user_loaded = self.state_manager.get_user(12345)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {hasattr(user_loaded, 'chat_manager')}")
            
            if hasattr(user_loaded, 'chat_manager') and user_loaded.chat_manager:
                print(f"‚úÖ ChatManager —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: {len(user_loaded.chat_manager.chats)} —á–∞—Ç–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = ChatTester()
    
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í –ß–ê–¢–û–í\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_results = []
    
    test_results.append(("–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö", tester.test_chat_models()))
    test_results.append(("ChatManager", tester.test_chat_manager()))
    test_results.append(("Chat Utils", tester.test_chat_utils()))
    test_results.append(("Chat Handlers", await tester.test_chat_handlers()))
    test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", tester.test_integration()))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    total_tests = len(test_results)
    passed_tests = sum(1 for _, result in test_results if result)
    
    for test_name, result in test_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {status} {test_name}")
    
    print(f"\nüìà –ò–¢–û–ì: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ß–ê–¢–û–í –†–ê–ë–û–¢–ê–ï–¢!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        print("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏")
        print("   ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        print("   ‚Ä¢ –ü–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º")
        return True
    else:
        print(f"\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í {total_tests - passed_tests} –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•!")
        print("‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 