#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. HTML –ø–∞—Ä—Å–∏–Ω–≥ –≤ _handle_ppv_button
2. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å fallback
"""

import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from bot import BotManager
from state_manager import StateManager

def test_ppv_button_text():
    """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ PPV –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML"""
    print("=== TEST: PPV Button HTML Parsing ===")
    
    try:
        bot_manager = BotManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(bot_manager, '_handle_ppv_button'):
            print("‚ùå _handle_ppv_button method not found")
            return False
        
        print("‚úÖ _handle_ppv_button method exists")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤
        import inspect
        source = inspect.getsource(bot_manager._handle_ppv_button)
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ HTML —Ç–µ–≥–∏
        dangerous_tags = ['<—Ü–µ–Ω–∞>', '<—Å—Ç–∏–ª—å>', '<–∫–æ–º–∞–Ω–¥–∞>']
        found_issues = []
        
        for tag in dangerous_tags:
            if tag in source:
                found_issues.append(tag)
        
        if found_issues:
            print(f"‚ùå Found dangerous HTML tags: {found_issues}")
            return False
        else:
            print("‚úÖ No dangerous HTML tags found in PPV button text")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if '[—Ü–µ–Ω–∞]' in source and '[—Å—Ç–∏–ª—å]' in source:
            print("‚úÖ Safe bracket notation used for parameters")
            return True
        else:
            print("‚ùå Parameters notation not found or incorrect")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing PPV button: {e}")
        return False

async def test_prompt_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å fallback"""
    print("\n=== TEST: Prompt Loading with Fallback ===")
    
    try:
        state_manager = StateManager()
        
        # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        existing_prompt = await state_manager.load_prompt('instructions')
        if existing_prompt:
            print("‚úÖ Successfully loaded existing prompt: instructions.txt")
            print(f"   Length: {len(existing_prompt)} characters")
        else:
            print("‚ö†Ô∏è Could not load instructions.txt, but handled gracefully")
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        missing_prompt = await state_manager.load_prompt('nonexistent')
        if missing_prompt is None:
            print("‚úÖ Correctly handled missing prompt file")
        else:
            print("‚ùå Should return None for missing prompt file")
            return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
        welcome_prompt = await state_manager.load_prompt('welcome')
        if welcome_prompt is None or isinstance(welcome_prompt, str):
            print("‚úÖ Correct return type (str or None)")
        else:
            print(f"‚ùå Incorrect return type: {type(welcome_prompt)}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing prompt loading: {e}")
        return False

def test_state_manager_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ StateManager"""
    print("\n=== TEST: StateManager Methods ===")
    
    try:
        state_manager = StateManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = ['load_prompt', 'get_user', 'add_to_history', 'save_data']
        missing_methods = []
        
        for method in required_methods:
            if not hasattr(state_manager, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå Missing methods: {missing_methods}")
            return False
        else:
            print("‚úÖ All required methods exist")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = state_manager.get_user(12345)
        if user:
            print("‚úÖ User creation works")
        else:
            print("‚ùå User creation failed")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        state_manager.add_to_history(12345, 'user', 'test message')
        if len(user.message_history) > 0:
            print("‚úÖ Message history works")
        else:
            print("‚ùå Message history failed")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing StateManager: {e}")
        return False

async def test_all_fixes():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("Testing HTML parsing and prompt loading fixes")
    print("=" * 55)
    
    test1_passed = test_ppv_button_text()
    test2_passed = await test_prompt_loading()
    test3_passed = test_state_manager_methods()
    
    print("\n" + "=" * 55)
    if test1_passed and test2_passed and test3_passed:
        print("SUCCESS: All fixes tests passed!")
        print("‚úÖ PPV button HTML parsing fixed")
        print("‚úÖ Prompt loading with fallback works")
        print("‚úÖ StateManager methods functional")
        print("\nüéâ Both critical errors should be fixed!")
        return True
    else:
        print("FAILURE: Some tests failed!")
        print("‚ùå Additional fixes may be needed")
        return False

if __name__ == "__main__":
    asyncio.run(test_all_fixes()) 