"""
Professional Adult Content Templates Module
Handles template-based responses for OF bot with proper categorization.
"""

from typing import Dict, List, Optional, Tuple, Any
from enum import Enum
from dataclasses import dataclass, field
from abc import ABC, abstractmethod
import random
import asyncio
from datetime import datetime

class ExplicitnessLevel(Enum):
    """Levels of content explicitness"""
    SOFT = 1        # Romantic, flirty
    MEDIUM = 2      # Suggestive, teasing
    EXPLICIT = 3    # Direct, sexual
    INTENSE = 4     # Very explicit
    EXTREME = 5     # Maximum intensity

class ContentMode(Enum):
    """Communication modes"""
    CHAT = "chat"           # Casual conversation
    FLIRT = "flirt"         # Flirtatious interaction
    SEXTING = "sexting"     # Explicit messaging

class TemplateCategory(Enum):
    """Template categories for organization"""
    GREETING = "greeting"
    FLIRT = "flirt"
    TEASE = "tease"
    PPV_PROMO = "ppv_promo"
    APPRECIATION = "appreciation"
    ESCALATION = "escalation"
    CONTENT_OFFER = "content_offer"
    PLAYFUL = "playful"
    INTIMATE = "intimate"
    THANK_YOU = "thank_you"

@dataclass
class ContentTemplate:
    """Individual content template with metadata"""
    text: str
    category: TemplateCategory
    explicitness: ExplicitnessLevel
    mode: ContentMode
    tags: List[str] = field(default_factory=list)
    variables: List[str] = field(default_factory=list)  # {name}, {amount}, etc.
    context_keywords: List[str] = field(default_factory=list)
    quality_score: float = 1.0  # User feedback score

class TemplateStrategy(ABC):
    """Abstract strategy for template selection"""
    
    @abstractmethod
    async def select_template(
        self, 
        templates: List[ContentTemplate], 
        context: Dict[str, Any]
    ) -> Optional[ContentTemplate]:
        pass

class RandomStrategy(TemplateStrategy):
    """Random template selection strategy"""
    
    async def select_template(
        self, 
        templates: List[ContentTemplate], 
        context: Dict[str, Any]
    ) -> Optional[ContentTemplate]:
        if not templates:
            return None
        return random.choice(templates)

class QualityBasedStrategy(TemplateStrategy):
    """Quality-weighted template selection"""
    
    async def select_template(
        self, 
        templates: List[ContentTemplate], 
        context: Dict[str, Any]
    ) -> Optional[ContentTemplate]:
        if not templates:
            return None
        
        # Weight by quality score
        weights = [template.quality_score for template in templates]
        return random.choices(templates, weights=weights)[0]

class ContextAwareStrategy(TemplateStrategy):
    """Context-aware template selection"""
    
    async def select_template(
        self, 
        templates: List[ContentTemplate], 
        context: Dict[str, Any]
    ) -> Optional[ContentTemplate]:
        if not templates:
            return None
        
        user_message = context.get('user_message', '').lower()
        scored_templates = []
        
        for template in templates:
            score = template.quality_score
            
            # Boost score for matching context keywords
            for keyword in template.context_keywords:
                if keyword.lower() in user_message:
                    score += 0.5
            
            scored_templates.append((template, score))
        
        # Sort by score and add randomness
        scored_templates.sort(key=lambda x: x[1], reverse=True)
        top_templates = [t[0] for t in scored_templates[:3]]
        
        return random.choice(top_templates)

class AdultTemplateRepository:
    """Repository for managing adult content templates"""
    
    def __init__(self):
        self.templates: Dict[TemplateCategory, List[ContentTemplate]] = {}
        self._load_default_templates()
    
    def _load_default_templates(self):
        """Load default template collection"""
        
        # GREETING templates
        self.templates[TemplateCategory.GREETING] = [
            ContentTemplate(
                "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫! üòò –ö–∞–∫ –¥–µ–ª–∞?",
                TemplateCategory.GREETING,
                ExplicitnessLevel.SOFT,
                ContentMode.CHAT,
                tags=["casual", "friendly"],
                context_keywords=["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello"]
            ),
            ContentTemplate(
                "–ú–º–º, —Å–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ —Ç–µ–±–µ üíã –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?",
                TemplateCategory.GREETING,
                ExplicitnessLevel.MEDIUM,
                ContentMode.FLIRT,
                tags=["missing", "intimate"],
                context_keywords=["–ø—Ä–∏–≤–µ—Ç", "–¥–µ–ª–∞"]
            ),
            ContentTemplate(
                "–î–µ—Ç–∫–∞, —è —Ç–∞–∫ —Ö–æ—á—É —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å... üî•",
                TemplateCategory.GREETING,
                ExplicitnessLevel.EXPLICIT,
                ContentMode.SEXTING,
                tags=["desire", "direct"],
                context_keywords=["–ø—Ä–∏–≤–µ—Ç", "—Ö–æ—á—É"]
            )
        ]
        
        # FLIRT templates
        self.templates[TemplateCategory.FLIRT] = [
            ContentTemplate(
                "–¢—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π üòä –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
                TemplateCategory.FLIRT,
                ExplicitnessLevel.SOFT,
                ContentMode.CHAT,
                tags=["compliment", "interest"],
                context_keywords=["—Ä–∞—Å—Å–∫–∞–∂–∏", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"]
            ),
            ContentTemplate(
                "–ó–Ω–∞–µ—à—å, —Ç—ã –º–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—à—å—Å—è... üòè –•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ?",
                TemplateCategory.FLIRT,
                ExplicitnessLevel.MEDIUM,
                ContentMode.FLIRT,
                tags=["attraction", "tease"],
                context_keywords=["–Ω—Ä–∞–≤–∏—à—å—Å—è", "–æ—Å–æ–±–µ–Ω–Ω–æ–µ"]
            ),
            ContentTemplate(
                "–ú–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ —Ç—ã –º–µ–Ω—è —Ç—Ä–æ–≥–∞–µ—à—å... üî• –•–æ—á–µ—à—å –º–æ–∏ —Ñ–æ—Ç–æ?",
                TemplateCategory.FLIRT,
                ExplicitnessLevel.EXPLICIT,
                ContentMode.SEXTING,
                tags=["imagination", "photos"],
                context_keywords=["—Ç—Ä–æ–≥–∞–µ—à—å", "—Ñ–æ—Ç–æ", "—Ö–æ—á–µ—à—å"]
            )
        ]
        
        # PPV_PROMO templates
        self.templates[TemplateCategory.PPV_PROMO] = [
            ContentTemplate(
                "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–µ–±—è üíù –í—Å–µ–≥–æ –∑–∞ ${amount}",
                TemplateCategory.PPV_PROMO,
                ExplicitnessLevel.SOFT,
                ContentMode.CHAT,
                tags=["special", "offer"],
                variables=["amount"],
                context_keywords=["–æ—Å–æ–±–µ–Ω–Ω–æ–µ", "–ø–æ–∫—É–ø–∫–∞"]
            ),
            ContentTemplate(
                "–î–µ—Ç–∫–∞, —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—è –≤ –Ω–æ–≤–æ–º –±–µ–ª—å–µ? üòà ${amount} –∑–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤",
                TemplateCategory.PPV_PROMO,
                ExplicitnessLevel.MEDIUM,
                ContentMode.FLIRT,
                tags=["lingerie", "exclusive"],
                variables=["amount"],
                context_keywords=["–±–µ–ª—å–µ", "—ç–∫—Å–∫–ª—é–∑–∏–≤"]
            ),
            ContentTemplate(
                "–ú–º, —Å–Ω—è–ª–∞ –¥–ª—è —Ç–µ–±—è –æ—á–µ–Ω—å –≥–æ—Ä—è—á–µ–µ –≤–∏–¥–µ–æ... üî•üî• ${amount} –∏ –æ–Ω–æ —Ç–≤–æ—ë",
                TemplateCategory.PPV_PROMO,
                ExplicitnessLevel.EXPLICIT,
                ContentMode.SEXTING,
                tags=["video", "hot"],
                variables=["amount"],
                context_keywords=["–≤–∏–¥–µ–æ", "–≥–æ—Ä—è—á–µ–µ"]
            )
        ]
        
        # APPRECIATION templates
        self.templates[TemplateCategory.APPRECIATION] = [
            ContentTemplate(
                "–°–ø–∞—Å–∏–±–æ, –º–∏–ª—ã–π! üíï –¢—ã —Ç–∞–∫–æ–π —â–µ–¥—Ä—ã–π",
                TemplateCategory.APPRECIATION,
                ExplicitnessLevel.SOFT,
                ContentMode.CHAT,
                tags=["thanks", "generous"],
                context_keywords=["—Å–ø–∞—Å–∏–±–æ", "—â–µ–¥—Ä—ã–π"]
            ),
            ContentTemplate(
                "–ú–º–º, –æ–±–æ–∂–∞—é —Ç–∞–∫–∏—Ö —â–µ–¥—Ä—ã—Ö –º—É–∂—á–∏–Ω... üòò –•–æ—á–µ—à—å –±–æ–Ω—É—Å?",
                TemplateCategory.APPRECIATION,
                ExplicitnessLevel.MEDIUM,
                ContentMode.FLIRT,
                tags=["love", "bonus"],
                context_keywords=["–æ–±–æ–∂–∞—é", "–±–æ–Ω—É—Å"]
            ),
            ContentTemplate(
                "–ó–∞ —ç—Ç–æ —Ç—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –æ—Å–æ–±–æ–π –Ω–∞–≥—Ä–∞–¥—ã... üî• –ü–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—ë",
                TemplateCategory.APPRECIATION,
                ExplicitnessLevel.EXPLICIT,
                ContentMode.SEXTING,
                tags=["reward", "show"],
                context_keywords=["–Ω–∞–≥—Ä–∞–¥–∞", "–ø–æ–∫–∞–∂—É"]
            )
        ]
        
        # TEASE templates
        self.templates[TemplateCategory.TEASE] = [
            ContentTemplate(
                "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... üòè –ê —á—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–¥–∏ —ç—Ç–æ–≥–æ?",
                TemplateCategory.TEASE,
                ExplicitnessLevel.SOFT,
                ContentMode.FLIRT,
                tags=["curiosity", "challenge"],
                context_keywords=["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–≥–æ—Ç–æ–≤"]
            ),
            ContentTemplate(
                "–û–π, –∞ —Ç—ã —Ç–∞–∫–æ–π –Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π... üòà –ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ—é —â–µ–¥—Ä–æ—Å—Ç—å",
                TemplateCategory.TEASE,
                ExplicitnessLevel.MEDIUM,
                ContentMode.FLIRT,
                tags=["impatient", "generosity"],
                context_keywords=["–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π", "—â–µ–¥—Ä–æ—Å—Ç—å"]
            ),
            ContentTemplate(
                "–ú–º, —Ö–æ—á–µ—à—å –º–µ–Ω—è? üî• –î–æ–∫–∞–∂–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ...",
                TemplateCategory.TEASE,
                ExplicitnessLevel.EXPLICIT,
                ContentMode.SEXTING,
                tags=["want", "prove"],
                context_keywords=["—Ö–æ—á–µ—à—å", "–¥–æ–∫–∞–∂–∏"]
            )
        ]

    def get_templates(
        self,
        category: Optional[TemplateCategory] = None,
        explicitness: Optional[ExplicitnessLevel] = None,
        mode: Optional[ContentMode] = None,
        tags: Optional[List[str]] = None
    ) -> List[ContentTemplate]:
        """Get filtered templates"""
        
        if category:
            templates = self.templates.get(category, [])
        else:
            templates = []
            for cat_templates in self.templates.values():
                templates.extend(cat_templates)
        
        # Apply filters
        if explicitness:
            templates = [t for t in templates if t.explicitness == explicitness]
        
        if mode:
            templates = [t for t in templates if t.mode == mode]
        
        if tags:
            templates = [t for t in templates if any(tag in t.tags for tag in tags)]
        
        return templates
    
    def add_template(self, template: ContentTemplate):
        """Add new template to repository"""
        if template.category not in self.templates:
            self.templates[template.category] = []
        self.templates[template.category].append(template)
    
    def update_quality_score(self, template_text: str, score: float):
        """Update template quality based on user feedback"""
        for category_templates in self.templates.values():
            for template in category_templates:
                if template.text == template_text:
                    template.quality_score = max(0.1, min(2.0, score))
                    break

class FallbackSystem:
    """Fallback system when AI refuses or fails"""
    
    def __init__(self, repository: AdultTemplateRepository):
        self.repository = repository
        self.safe_fallbacks = {
            ExplicitnessLevel.SOFT: [
                "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º üòä",
                "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ üíï",
                "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? üåü"
            ],
            ExplicitnessLevel.MEDIUM: [
                "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –º–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã? üòè",
                "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ... üíù",
                "–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è, –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è üòò"
            ],
            ExplicitnessLevel.EXPLICIT: [
                "–ü–æ–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ—é —â–µ–¥—Ä–æ—Å—Ç—å, –∏ —è —É–¥–∏–≤–ª—é —Ç–µ–±—è üî•",
                "–•–æ—á–µ—à—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç? –ü–∏—à–∏ –≤ DM üíã",
                "–î–ª—è —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç—ã —É –º–µ–Ω—è –æ—Å–æ–±—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üòà"
            ]
        }
    
    async def get_fallback_response(
        self,
        explicitness: ExplicitnessLevel,
        context: Dict[str, Any]
    ) -> str:
        """Get safe fallback response"""
        
        # Try template-based fallback first
        templates = self.repository.get_templates(explicitness=explicitness)
        if templates:
            template = random.choice(templates)
            return self._process_template_variables(template.text, context)
        
        # Use hardcoded safe fallbacks
        fallbacks = self.safe_fallbacks.get(explicitness, self.safe_fallbacks[ExplicitnessLevel.SOFT])
        return random.choice(fallbacks)
    
    def _process_template_variables(self, text: str, context: Dict[str, Any]) -> str:
        """Process template variables like {name}, {amount}"""
        
        # Replace common variables
        replacements = {
            'name': context.get('user_name', '–∫—Ä–∞—Å–∞–≤—á–∏–∫'),
            'amount': context.get('amount', '10'),
            'time': datetime.now().strftime('%H:%M')
        }
        
        for var, value in replacements.items():
            text = text.replace(f'{{{var}}}', str(value))
        
        return text

# Global repository instance
adult_templates_repo = AdultTemplateRepository()
fallback_system = FallbackSystem(adult_templates_repo) 