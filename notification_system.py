#!/usr/bin/env python3
"""
üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò –ê–õ–ï–†–¢–û–í üîî
–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram, Email, Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import json
import time
import asyncio
import smtplib
import requests
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from dataclasses import dataclass
from enum import Enum
import threading
from queue import Queue

class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    TELEGRAM = "telegram"
    EMAIL = "email"
    WEBHOOK = "webhook"
    SMS = "sms"

@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    id: str
    timestamp: str
    level: AlertLevel
    title: str
    message: str
    source: str
    details: Dict[str, Any] = None
    resolved: bool = False

@dataclass
class NotificationChannel:
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    type: NotificationType
    config: Dict[str, Any]
    enabled: bool = True
    min_level: AlertLevel = AlertLevel.WARNING

class NotificationSystem:
    def __init__(self):
        self.alert_queue = Queue()
        self.active_alerts = {}
        self.notification_channels = []
        self.rate_limits = {}
        self.alert_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.setup_notification_channels()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.running = True
        self.notification_thread = threading.Thread(target=self.process_notifications)
        self.notification_thread.daemon = True
        self.notification_thread.start()
        
        print("üîî Notification System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")

    def setup_notification_channels(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # Telegram –∫–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if os.getenv('BOT_TOKEN') and os.getenv('ADMIN_USER_IDS'):
            self.notification_channels.append(NotificationChannel(
                type=NotificationType.TELEGRAM,
                config={
                    'bot_token': os.getenv('BOT_TOKEN'),
                    'admin_ids': [int(x) for x in os.getenv('ADMIN_USER_IDS', '').split(',') if x]
                },
                min_level=AlertLevel.WARNING
            ))
        
        # Email –∫–∞–Ω–∞–ª
        if os.getenv('SMTP_EMAIL') and os.getenv('SMTP_PASSWORD'):
            self.notification_channels.append(NotificationChannel(
                type=NotificationType.EMAIL,
                config={
                    'smtp_server': os.getenv('SMTP_SERVER', 'smtp.gmail.com'),
                    'smtp_port': int(os.getenv('SMTP_PORT', '587')),
                    'email': os.getenv('SMTP_EMAIL'),
                    'password': os.getenv('SMTP_PASSWORD'),
                    'recipients': os.getenv('ADMIN_EMAILS', '').split(',')
                },
                min_level=AlertLevel.CRITICAL
            ))
        
        # Webhook –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, Slack, Discord)
        if os.getenv('WEBHOOK_URL'):
            self.notification_channels.append(NotificationChannel(
                type=NotificationType.WEBHOOK,
                config={
                    'url': os.getenv('WEBHOOK_URL'),
                    'method': 'POST',
                    'headers': {'Content-Type': 'application/json'}
                },
                min_level=AlertLevel.WARNING
            ))

    def send_alert(self, level: AlertLevel, title: str, message: str, 
                   source: str = "system", details: Dict[str, Any] = None) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = f"{int(time.time())}_{len(self.active_alerts)}"
        
        alert = Alert(
            id=alert_id,
            timestamp=datetime.now().isoformat(),
            level=level,
            title=title,
            message=message,
            source=source,
            details=details or {}
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        if not self.is_duplicate_alert(alert):
            self.alert_queue.put(alert)
            self.active_alerts[alert_id] = alert
            self.alert_history.append(alert)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.alert_history) > 1000:
                self.alert_history = self.alert_history[-500:]
        
        return alert_id

    def process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.running:
            try:
                if not self.alert_queue.empty():
                    alert = self.alert_queue.get()
                    self.deliver_alert(alert)
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå Notification processing error: {e}")
                time.sleep(5)

    def deliver_alert(self, alert: Alert):
        """–î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã"""
        for channel in self.notification_channels:
            if not channel.enabled:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if self.should_send_to_channel(alert, channel):
                try:
                    if channel.type == NotificationType.TELEGRAM:
                        self.send_telegram_alert(alert, channel)
                    elif channel.type == NotificationType.EMAIL:
                        self.send_email_alert(alert, channel)
                    elif channel.type == NotificationType.WEBHOOK:
                        self.send_webhook_alert(alert, channel)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    print(f"‚úÖ Alert {alert.id} sent via {channel.type.value}")
                    
                except Exception as e:
                    print(f"‚ùå Failed to send alert via {channel.type.value}: {e}")

    def send_telegram_alert(self, alert: Alert, channel: NotificationChannel):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram"""
        bot_token = channel.config['bot_token']
        admin_ids = channel.config['admin_ids']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É—Ä–æ–≤–Ω—é
        level_emojis = {
            AlertLevel.INFO: "‚ÑπÔ∏è",
            AlertLevel.WARNING: "‚ö†Ô∏è",
            AlertLevel.CRITICAL: "üö®",
            AlertLevel.EMERGENCY: "üî•"
        }
        
        emoji = level_emojis.get(alert.level, "üì¢")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{emoji} **{alert.level.value.upper()} ALERT**

üìã **{alert.title}**
üí¨ {alert.message}
üïê {datetime.fromisoformat(alert.timestamp).strftime('%Y-%m-%d %H:%M:%S')}
üîç Source: {alert.source}

üÜî Alert ID: `{alert.id}`
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if alert.details:
            details_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in alert.details.items()])
            message += f"\n\nüìä **Details:**\n{details_text}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in admin_ids:
            if self.check_rate_limit(f"telegram_{admin_id}", alert.level):
                try:
                    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                    data = {
                        'chat_id': admin_id,
                        'text': message,
                        'parse_mode': 'Markdown',
                        'disable_web_page_preview': True
                    }
                    
                    response = requests.post(url, data=data, timeout=10)
                    if response.status_code != 200:
                        print(f"‚ùå Telegram API error: {response.text}")
                        
                except Exception as e:
                    print(f"‚ùå Telegram send error: {e}")

    def send_email_alert(self, alert: Alert, channel: NotificationChannel):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Email"""
        config = channel.config
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MimeMultipart()
        msg['From'] = config['email']
        msg['Subject'] = f"[{alert.level.value.upper()}] {alert.title}"
        
        # HTML —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        html_body = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .alert-header {{ background-color: {self.get_alert_color(alert.level)}; color: white; padding: 15px; border-radius: 5px; }}
                .alert-content {{ padding: 20px; border: 1px solid #ddd; border-radius: 5px; margin-top: 10px; }}
                .details {{ background-color: #f5f5f5; padding: 10px; border-radius: 3px; margin-top: 10px; }}
            </style>
        </head>
        <body>
            <div class="alert-header">
                <h2>{alert.level.value.upper()} ALERT: {alert.title}</h2>
            </div>
            <div class="alert-content">
                <p><strong>Message:</strong> {alert.message}</p>
                <p><strong>Time:</strong> {datetime.fromisoformat(alert.timestamp).strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Source:</strong> {alert.source}</p>
                <p><strong>Alert ID:</strong> {alert.id}</p>
                
                {f'<div class="details"><h4>Details:</h4><ul>{"".join([f"<li><strong>{k}:</strong> {v}</li>" for k, v in alert.details.items()])}</ul></div>' if alert.details else ''}
            </div>
        </body>
        </html>
        """
        
        msg.attach(MimeText(html_body, 'html'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
        try:
            server = smtplib.SMTP(config['smtp_server'], config['smtp_port'])
            server.starttls()
            server.login(config['email'], config['password'])
            
            for recipient in config['recipients']:
                if recipient and self.check_rate_limit(f"email_{recipient}", alert.level):
                    msg['To'] = recipient
                    server.send_message(msg)
                    del msg['To']
            
            server.quit()
            
        except Exception as e:
            print(f"‚ùå Email send error: {e}")

    def send_webhook_alert(self, alert: Alert, channel: NotificationChannel):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Webhook"""
        config = channel.config
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = {
            'alert_id': alert.id,
            'timestamp': alert.timestamp,
            'level': alert.level.value,
            'title': alert.title,
            'message': alert.message,
            'source': alert.source,
            'details': alert.details
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Slack
        if 'slack' in config.get('url', '').lower():
            payload = self.format_slack_message(alert)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Discord
        elif 'discord' in config.get('url', '').lower():
            payload = self.format_discord_message(alert)
        
        try:
            response = requests.post(
                config['url'],
                json=payload,
                headers=config.get('headers', {}),
                timeout=10
            )
            
            if response.status_code not in [200, 204]:
                print(f"‚ùå Webhook error: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå Webhook send error: {e}")

    def format_slack_message(self, alert: Alert) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Slack"""
        color_map = {
            AlertLevel.INFO: "good",
            AlertLevel.WARNING: "warning", 
            AlertLevel.CRITICAL: "danger",
            AlertLevel.EMERGENCY: "danger"
        }
        
        attachment = {
            "color": color_map.get(alert.level, "warning"),
            "title": f"{alert.level.value.upper()}: {alert.title}",
            "text": alert.message,
            "fields": [
                {"title": "Source", "value": alert.source, "short": True},
                {"title": "Alert ID", "value": alert.id, "short": True},
                {"title": "Time", "value": datetime.fromisoformat(alert.timestamp).strftime('%Y-%m-%d %H:%M:%S'), "short": True}
            ],
            "footer": "Bot Monitoring System",
            "ts": int(datetime.fromisoformat(alert.timestamp).timestamp())
        }
        
        if alert.details:
            for key, value in alert.details.items():
                attachment["fields"].append({
                    "title": key.title(),
                    "value": str(value),
                    "short": True
                })
        
        return {"attachments": [attachment]}

    def format_discord_message(self, alert: Alert) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Discord"""
        color_map = {
            AlertLevel.INFO: 0x3498db,      # Blue
            AlertLevel.WARNING: 0xf39c12,   # Orange
            AlertLevel.CRITICAL: 0xe74c3c,  # Red
            AlertLevel.EMERGENCY: 0x9b59b6  # Purple
        }
        
        embed = {
            "title": f"{alert.level.value.upper()}: {alert.title}",
            "description": alert.message,
            "color": color_map.get(alert.level, 0xf39c12),
            "timestamp": alert.timestamp,
            "fields": [
                {"name": "Source", "value": alert.source, "inline": True},
                {"name": "Alert ID", "value": alert.id, "inline": True}
            ],
            "footer": {"text": "Bot Monitoring System"}
        }
        
        if alert.details:
            for key, value in alert.details.items():
                embed["fields"].append({
                    "name": key.title(),
                    "value": str(value),
                    "inline": True
                })
        
        return {"embeds": [embed]}

    def should_send_to_channel(self, alert: Alert, channel: NotificationChannel) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç –≤ –∫–∞–Ω–∞–ª"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        level_values = {
            AlertLevel.INFO: 1,
            AlertLevel.WARNING: 2,
            AlertLevel.CRITICAL: 3,
            AlertLevel.EMERGENCY: 4
        }
        
        return level_values[alert.level] >= level_values[channel.min_level]

    def check_rate_limit(self, key: str, level: AlertLevel) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞"""
        current_time = time.time()
        
        # –õ–∏–º–∏—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º (—Å–µ–∫—É–Ω–¥—ã)
        limits = {
            AlertLevel.INFO: 300,       # 5 –º–∏–Ω—É—Ç
            AlertLevel.WARNING: 120,    # 2 –º–∏–Ω—É—Ç—ã
            AlertLevel.CRITICAL: 60,    # 1 –º–∏–Ω—É—Ç–∞
            AlertLevel.EMERGENCY: 10    # 10 —Å–µ–∫—É–Ω–¥
        }
        
        limit = limits.get(level, 60)
        
        if key in self.rate_limits:
            if current_time - self.rate_limits[key] < limit:
                return False
        
        self.rate_limits[key] = current_time
        return True

    def is_duplicate_alert(self, alert: Alert) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∞–ª–µ—Ä—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã –∑–∞ 5 –º–∏–Ω—É—Ç
        cutoff_time = datetime.now() - timedelta(minutes=5)
        
        for existing_alert in reversed(self.alert_history[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20
            if datetime.fromisoformat(existing_alert.timestamp) < cutoff_time:
                break
            
            if (existing_alert.title == alert.title and 
                existing_alert.source == alert.source and
                existing_alert.level == alert.level):
                return True
        
        return False

    def get_alert_color(self, level: AlertLevel) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
        colors = {
            AlertLevel.INFO: "#3498db",
            AlertLevel.WARNING: "#f39c12",
            AlertLevel.CRITICAL: "#e74c3c",
            AlertLevel.EMERGENCY: "#9b59b6"
        }
        return colors.get(level, "#95a5a6")

    def resolve_alert(self, alert_id: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∞–ª–µ—Ä—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π"""
        if alert_id in self.active_alerts:
            self.active_alerts[alert_id].resolved = True
            print(f"‚úÖ Alert {alert_id} resolved")

    def get_active_alerts(self) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return [alert for alert in self.active_alerts.values() if not alert.resolved]

    def get_alert_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        total_alerts = len(self.alert_history)
        active_count = len(self.get_active_alerts())
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_counts = {}
        for alert in self.alert_history:
            level = alert.level.value
            level_counts[level] = level_counts.get(level, 0) + 1
        
        # –ê–ª–µ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hour_ago = datetime.now() - timedelta(hours=1)
        recent_alerts = [
            alert for alert in self.alert_history
            if datetime.fromisoformat(alert.timestamp) > hour_ago
        ]
        
        return {
            'total_alerts': total_alerts,
            'active_alerts': active_count,
            'alerts_last_hour': len(recent_alerts),
            'level_distribution': level_counts,
            'channels_configured': len(self.notification_channels),
            'channels_enabled': len([c for c in self.notification_channels if c.enabled])
        }

    def test_notifications(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üß™ Testing notification system...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        test_alerts = [
            (AlertLevel.INFO, "Test Info Alert", "This is a test info message"),
            (AlertLevel.WARNING, "Test Warning Alert", "This is a test warning message"),
            (AlertLevel.CRITICAL, "Test Critical Alert", "This is a test critical message")
        ]
        
        for level, title, message in test_alerts:
            alert_id = self.send_alert(
                level=level,
                title=title,
                message=message,
                source="notification_test",
                details={"test": True, "timestamp": datetime.now().isoformat()}
            )
            print(f"‚úÖ Test alert sent: {alert_id}")
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        print("üõë Notification System: –û–°–¢–ê–ù–û–í–õ–ï–ù")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = NotificationSystem()

# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
def send_info_alert(title: str, message: str, source: str = "system", details: Dict[str, Any] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    return notification_system.send_alert(AlertLevel.INFO, title, message, source, details)

def send_warning_alert(title: str, message: str, source: str = "system", details: Dict[str, Any] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    return notification_system.send_alert(AlertLevel.WARNING, title, message, source, details)

def send_critical_alert(title: str, message: str, source: str = "system", details: Dict[str, Any] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    return notification_system.send_alert(AlertLevel.CRITICAL, title, message, source, details)

def send_emergency_alert(title: str, message: str, source: str = "system", details: Dict[str, Any] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    return notification_system.send_alert(AlertLevel.EMERGENCY, title, message, source, details) 