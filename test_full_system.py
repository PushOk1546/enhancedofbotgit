#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã OF Assistant Bot.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–∞—è —á–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
"""

import asyncio
import sys
from dataclasses import dataclass
from chat_models import ChatManager
from state_manager import StateManager
from chat_handlers import ChatHandlers
from telebot import types

@dataclass
class MockUser:
    """Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    id: int = 12345
    first_name: str = "Test"
    username: str = "testuser"

@dataclass
class MockMessage:
    """Mock —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message_id: int = 1
    from_user: MockUser = None
    chat: object = None
    text: str = "test"
    
    def __post_init__(self):
        if self.from_user is None:
            self.from_user = MockUser()
        if self.chat is None:
            self.chat = MockUser()

class SystemTester:
    """–¢–µ—Å—Ç–µ—Ä –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        self.state_manager = StateManager()
        self.chat_handlers = ChatHandlers(self.state_manager)
        
    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüîß –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:")
        
        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
            from config import MODELS, FLIRT_STYLES, PPV_STYLES, SURVEY_STEPS
            from utils import get_main_keyboard, get_flirt_style_keyboard, get_ppv_style_keyboard
            from api import generate_groq_response
            print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            print(f"‚úÖ –ú–æ–¥–µ–ª–∏ AI: {len(MODELS)}")
            print(f"‚úÖ –°—Ç–∏–ª–∏ —Ñ–ª–∏—Ä—Ç–∞: {len(FLIRT_STYLES)}")
            print(f"‚úÖ –°—Ç–∏–ª–∏ PPV: {len(PPV_STYLES)}")
            print(f"‚úÖ –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞: {len(SURVEY_STEPS)}")
            
            # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            main_kb = get_main_keyboard()
            flirt_kb = get_flirt_style_keyboard()
            ppv_kb = get_ppv_style_keyboard()
            print("‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def test_state_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        print("\nüíæ –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ï–ú:")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.state_manager.get_user(12345)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.user_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.state_manager.add_to_history(12345, "user", "–ü—Ä–∏–≤–µ—Ç!")
            self.state_manager.add_to_history(12345, "assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            user.preferences.content_types = ["photos", "videos"]
            user.preferences.communication_style = "flirty"
            user.preferences.completed_survey = True
            print("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
            
            # –°–æ–∑–¥–∞–µ–º ChatManager
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(12345)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã
            chat1 = user.chat_manager.create_chat("–ê–Ω–Ω–∞", "VIP –∫–ª–∏–µ–Ω—Ç")
            chat2 = user.chat_manager.create_chat("–ú–∞—Ä–∏—è", "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
            print(f"‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: {len(user.chat_manager.chats)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            user.chat_manager.add_message_to_active_chat("user", "–ü—Ä–∏–≤–µ—Ç!")
            user.chat_manager.add_message_to_active_chat("assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.state_manager.save_user(12345, user)
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            user_loaded = self.state_manager.get_user(12345)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            assert user_loaded.preferences.communication_style == "flirty"
            assert user_loaded.preferences.completed_survey == True
            assert hasattr(user_loaded, 'chat_manager')
            assert user_loaded.chat_manager is not None
            assert len(user_loaded.chat_manager.chats) == 2
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: {e}")
            return False
    
    async def test_chat_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤"""
        print("\nüí¨ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ß–ê–¢–û–í:")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
            user = self.state_manager.get_user(12345)
            message = MockMessage()
            
            # Mock –±–æ—Ç
            class MockBot:
                def __init__(self):
                    self.messages_sent = []
                    self.messages_edited = []
                
                async def send_message(self, chat_id, text, **kwargs):
                    self.messages_sent.append({"chat_id": chat_id, "text": text[:50], "kwargs": kwargs})
                    return MockMessage()
                
                async def edit_message_text(self, text, chat_id, message_id, **kwargs):
                    self.messages_edited.append({"text": text[:50], "chat_id": chat_id, "message_id": message_id})
                    return True
                
                async def answer_callback_query(self, callback_id, text=""):
                    return True
                
                async def reply_to(self, message, text, **kwargs):
                    return MockMessage()
            
            mock_bot = MockBot()
            
            # –°–æ–∑–¥–∞–µ–º CallbackQuery
            call = types.CallbackQuery(
                id="test",
                from_user=message.from_user,
                data="chat_management",
                chat_instance="test",
                json_string="{}",
                message=message
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
            await self.chat_handlers.handle_chat_management(mock_bot, call)
            print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            await self.chat_handlers.handle_chat_list(mock_bot, call)
            print("‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            await self.chat_handlers.handle_new_chat(mock_bot, call)
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
            assert len(mock_bot.messages_sent) > 0 or len(mock_bot.messages_edited) > 0
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤: {e}")
            return False
    
    def test_callback_routing(self):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback queries"""
        print("\nüéØ –¢–ï–°–¢ CALLBACK –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò:")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ callback data
            test_callbacks = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                "model_fast", "model_quick", "model_fastest",
                "flirt_style_playful", "flirt_style_passionate", "flirt_style_tender",
                "ppv_style_–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π", "ppv_style_—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π",
                "survey_content_types_photos", "survey_price_range_medium",
                
                # –ß–∞—Ç—ã
                "chat_management", "chat_list", "chat_new", "chat_reply",
                "chat_memory", "chat_analytics",
                "chat_switch_test123", "chat_list_page_1"
            ]
            
            print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_callbacks)} callback —Ç–∏–ø–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π callback –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω
            for callback_data in test_callbacks:
                if callback_data.startswith("model_"):
                    model_key = callback_data.replace("model_", "")
                    from config import MODELS
                    assert model_key in MODELS, f"–ú–æ–¥–µ–ª—å {model_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    
                elif callback_data.startswith("flirt_style_"):
                    style_id = callback_data.replace("flirt_style_", "")
                    from config import FLIRT_STYLES
                    found = any(info['id'] == style_id for info in FLIRT_STYLES.values())
                    assert found, f"–§–ª–∏—Ä—Ç —Å—Ç–∏–ª—å {style_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                elif callback_data.startswith("ppv_style_"):
                    style_name = callback_data.replace("ppv_style_", "")
                    from config import PPV_STYLES
                    assert style_name in PPV_STYLES, f"PPV —Å—Ç–∏–ª—å {style_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                elif callback_data.startswith("survey_"):
                    survey_data = callback_data[7:]
                    parts = survey_data.split('_')
                    if len(parts) >= 2:
                        step = '_'.join(parts[:-1])
                        from config import SURVEY_STEPS
                        assert step in SURVEY_STEPS, f"–®–∞–≥ –æ–ø—Ä–æ—Å–∞ {step} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                elif callback_data.startswith("chat_"):
                    # –í—Å–µ chat_ callbacks –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
                    assert True
                    
            print("‚úÖ –í—Å–µ callback —Ç–∏–ø—ã –≤–∞–ª–∏–¥–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SystemTester()
    
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_results = []
    
    test_results.append(("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", tester.test_basic_functionality()))
    test_results.append(("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º", tester.test_state_management()))
    test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤", await tester.test_chat_integration()))
    test_results.append(("Callback –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è", tester.test_callback_routing()))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    total_tests = len(test_results)
    passed_tests = sum(1 for _, result in test_results if result)
    
    for test_name, result in test_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {status} {test_name}")
    
    print(f"\nüìà –ò–¢–û–ì: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üöÄ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("\nüí° –ì–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–ª–∏—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π (3 —Å—Ç–∏–ª—è)")
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (5 —Å—Ç–∏–ª–µ–π)")
        print("   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π (3 –º–æ–¥–µ–ª–∏)")
        print("   ‚úÖ –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏")
        print("   ‚úÖ –ü–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback queries")
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("\nüéØ –ë–û–¢ –ì–û–¢–û–í –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ò –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–ò!")
        return True
    else:
        print(f"\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í {total_tests - passed_tests} –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•!")
        print("‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 