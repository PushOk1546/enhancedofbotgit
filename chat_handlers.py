"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
"""

import logging
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from chat_models import ChatManager, ClientProfile, ClientChat, ChatMessage
from chat_utils import (
    get_chat_management_keyboard, get_chat_list_keyboard, get_chat_context_keyboard,
    format_chat_info, format_chat_memory, format_chat_analytics, create_chat_context_prompt
)
from api import generate_groq_response
from config.config import MODELS
from datetime import datetime

logger = logging.getLogger("bot_logger")

async def safe_send_message(bot: AsyncTeleBot, chat_id: int, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –¥–ª—è parse_mode"""
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        if "can't parse entities" in str(e):
            # –£–±–∏—Ä–∞–µ–º parse_mode –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
            kwargs.pop('parse_mode', None)
            return await bot.send_message(chat_id, text, **kwargs)
        else:
            raise e

async def safe_edit_message_text(bot: AsyncTeleBot, text: str, chat_id: int, message_id: int, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –¥–ª—è parse_mode"""
    try:
        return await bot.edit_message_text(text, chat_id, message_id, **kwargs)
    except Exception as e:
        if "can't parse entities" in str(e):
            # –£–±–∏—Ä–∞–µ–º parse_mode –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
            kwargs.pop('parse_mode', None)
            return await bot.edit_message_text(text, chat_id, message_id, **kwargs)
        else:
            raise e

class ChatHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    
    def __init__(self, state_manager):
        self.state_manager = state_manager
    
    async def handle_chat_management(self, bot: AsyncTeleBot, call: types.CallbackQuery, from_button: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º chat_manager –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            total_chats = len(user.chat_manager.chats)
            
            text = f"üí¨ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏**\n\n"
            text += f"üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
            
            if active_chat:
                text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: **{active_chat.client_profile.name}**\n"
                text += f"üíå –°–æ–æ–±—â–µ–Ω–∏–π: {len(active_chat.messages)}\n"
                text += f"üé≠ –≠—Ç–∞–ø: {active_chat.conversation_stage}\n"
            else:
                text += "‚ö™ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞\n"
            
            text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏ (–Ω–µ callback), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if from_button:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=get_chat_management_keyboard())
            else:
                # –û–±—ã—á–Ω—ã–π callback query - –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=get_chat_management_keyboard())
                except Exception as edit_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning(f"Cannot edit message, sending new: {str(edit_error)}")
                    await safe_send_message(bot, call.message.chat.id, text, reply_markup=get_chat_management_keyboard())
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π callback –∏ –Ω–µ from_button
            if not from_button:
                try:
                    await bot.answer_callback_query(call.id)
                except Exception as callback_error:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback query (expired, timeout, etc.)
                    logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in chat management: {str(e)}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                if from_button:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                else:
                    # –î–ª—è callback query –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
                    try:
                        await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏")
                    except Exception:
                        # –ï—Å–ª–∏ callback query expired/invalid, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as final_error:
                logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_chat_list(self, bot: AsyncTeleBot, call: types.CallbackQuery, page: int = 0):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(user_id)
            
            chat_list = user.chat_manager.get_chat_list()
            
            if not chat_list:
                text = "üí¨ **–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç –∫–Ω–æ–ø–∫–æ–π ‚ûï –ù–æ–≤—ã–π —á–∞—Ç"
                keyboard = get_chat_list_keyboard(user.chat_manager, page)
            else:
                text = f"üí¨ **–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤** (—Å—Ç—Ä. {page + 1})\n\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                items_per_page = 5
                start_idx = page * items_per_page
                end_idx = min(start_idx + items_per_page, len(chat_list))
                
                for i, chat_info in enumerate(chat_list[start_idx:end_idx], start_idx + 1):
                    status = "üü¢" if chat_info['is_active'] else "‚ö™"
                    stage_emoji = "üå±" if chat_info['conversation_stage'] == "initial" else \
                                  "üî•" if chat_info['conversation_stage'] == "warming_up" else \
                                  "üíï" if chat_info['conversation_stage'] == "engaged" else "üòç"
                    
                    text += f"{i}. {status} {stage_emoji} **{chat_info['client_name']}**\n"
                    text += f"   üíå {chat_info['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    text += f"   üìù _{chat_info['last_message'][:40]}..._\n\n"
                
                keyboard = get_chat_list_keyboard(user.chat_manager, page)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception as edit_error:
                logger.warning(f"Cannot edit message in chat_list, sending new: {str(edit_error)}")
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=keyboard)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            try:
                await bot.answer_callback_query(call.id)
            except Exception as callback_error:
                logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in chat list: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_new_chat(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(user_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
            user.waiting_for_chat_name = True
            
            text = ("‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞**\n\n"
                   "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏:")
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id)
            except Exception as edit_error:
                logger.warning(f"Cannot edit message in new_chat, sending new: {str(edit_error)}")
                await safe_send_message(bot, call.message.chat.id, text)
            
            try:
                await bot.answer_callback_query(call.id)
            except Exception as callback_error:
                logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in new chat: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_switch_chat(self, bot: AsyncTeleBot, call: types.CallbackQuery, chat_id: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤")
                return
            
            if user.chat_manager.switch_chat(chat_id):
                chat = user.chat_manager.get_active_chat()
                
                text = f"üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —á–∞—Ç —Å {chat.client_profile.name}**\n\n"
                text += format_chat_info(chat)
                
                try:
                    await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=get_chat_context_keyboard())
                except Exception as edit_error:
                    logger.warning(f"Cannot edit message in switch_chat, sending new: {str(edit_error)}")
                    await safe_send_message(bot, call.message.chat.id, text, reply_markup=get_chat_context_keyboard())
                
                try:
                    await bot.answer_callback_query(call.id, f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {chat.client_profile.name}")
                except Exception as callback_error:
                    logger.debug(f"Callback query error (ignored): {str(callback_error)}")
                
                await self.state_manager.save_data()
            else:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"Error switching chat: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_chat_reply(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–≤–µ—Ç—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            user.waiting_for_chat_reply = True
            
            text = f"üí¨ **–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {active_chat.client_profile.name}**\n\n"
            text += "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏ —è —Å–æ–∑–¥–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è:\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            recent_messages = active_chat.get_recent_messages(3)
            if recent_messages:
                text += "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                for msg in recent_messages:
                    role_emoji = "üë§" if msg.role == "user" else "ü§ñ"
                    text += f"{role_emoji} {msg.content[:50]}...\n"
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id)
            except Exception as edit_error:
                logger.warning(f"Cannot edit message in chat_reply, sending new: {str(edit_error)}")
                await safe_send_message(bot, call.message.chat.id, text)
            
            try:
                await bot.answer_callback_query(call.id)
            except Exception as callback_error:
                logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in chat reply: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_chat_memory(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                try:
                    await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                except Exception:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            memory_text = format_chat_memory(active_chat)
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="memory_add_note"),
                types.InlineKeyboardButton("üè∑ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data="memory_add_tag")
            )
            keyboard.row(
                types.InlineKeyboardButton("üíù –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="memory_preferences"),
                types.InlineKeyboardButton("‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="memory_interests")
            )
            keyboard.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
            )
            
            try:
                await safe_edit_message_text(bot, memory_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception as edit_error:
                logger.warning(f"Cannot edit message in chat_memory, sending new: {str(edit_error)}")
                await safe_send_message(bot, call.message.chat.id, memory_text, reply_markup=keyboard)
            
            try:
                await bot.answer_callback_query(call.id)
            except Exception as callback_error:
                logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in chat memory: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–º—è—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def handle_chat_analytics(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–æ–≤"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(user_id)
            
            analytics_text = format_chat_analytics(user.chat_manager)
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="chat_analytics"),
                types.InlineKeyboardButton("üí¨ –ö —á–∞—Ç–∞–º", callback_data="chat_list")
            )
            keyboard.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
            )
            
            try:
                await safe_edit_message_text(bot, analytics_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception as edit_error:
                logger.warning(f"Cannot edit message in chat_analytics, sending new: {str(edit_error)}")
                await safe_send_message(bot, call.message.chat.id, analytics_text, reply_markup=keyboard)
            
            try:
                await bot.answer_callback_query(call.id)
            except Exception as callback_error:
                logger.debug(f"Callback query error (ignored): {str(callback_error)}")
            
        except Exception as e:
            logger.error(f"Error in chat analytics: {str(e)}", exc_info=True)
            try:
                await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            except Exception:
                try:
                    await safe_send_message(bot, call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as final_error:
                    logger.error(f"Cannot send error message: {str(final_error)}")
    
    async def process_chat_name_input(self, bot: AsyncTeleBot, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            user_id = message.from_user.id
            user = self.state_manager.get_user(user_id)
            
            client_name = message.text.strip() if message.text else ""
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            new_chat = user.chat_manager.create_chat(client_name=client_name)
            
            user.waiting_for_chat_name = False
            
            text = f"‚úÖ **–ß–∞—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            text += format_chat_info(new_chat)
            text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º."
            
            await safe_send_message(bot, message.chat.id, text, reply_markup=get_chat_context_keyboard())
            
            await self.state_manager.save_data()
            
        except Exception as e:
            logger.error(f"Error processing chat name: {str(e)}", exc_info=True)
            await safe_send_message(bot, message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")
    
    async def process_chat_reply_input(self, bot: AsyncTeleBot, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        try:
            user_id = message.from_user.id
            user = self.state_manager.get_user(user_id)
            
            client_message = message.text.strip()
            active_chat = user.chat_manager.get_active_chat()
            
            if not active_chat:
                await safe_send_message(bot, message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user.chat_manager.add_message_to_active_chat("user", client_message, "text")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            wait_msg = await safe_send_message(bot, message.chat.id, 
                f"ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –¥–ª—è **{active_chat.client_profile.name}**...",
                parse_mode='Markdown'
            )
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                context_prompt = create_chat_context_prompt(active_chat, client_message)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = await generate_groq_response(
                    context_prompt,
                    MODELS[user.model]['id']
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                user.chat_manager.add_message_to_active_chat("assistant", response, "reply")
                
                user.waiting_for_chat_reply = False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = f"üí¨ **–û—Ç–≤–µ—Ç –¥–ª—è {active_chat.client_profile.name}:**\n\n{response}\n\n"
                result_text += f"üìä –≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞: {active_chat.conversation_stage}\n"
                result_text += f"üíå –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(active_chat.messages)}"
                
                await safe_edit_message_text(bot, result_text, wait_msg.chat.id, wait_msg.message_id, reply_markup=get_chat_context_keyboard())
                
                await self.state_manager.save_data()
                
            except Exception as e:
                logger.error(f"Error generating chat response: {str(e)}", exc_info=True)
                await safe_edit_message_text(bot, 
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å.",
                    wait_msg.chat.id,
                    wait_msg.message_id
                )
                
        except Exception as e:
            logger.error(f"Error processing chat reply: {str(e)}", exc_info=True)
            await safe_send_message(bot, message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def get_callback_handlers(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
        return {
            "chat_management": self.handle_chat_management,
            "chat_list": lambda bot, call: self.handle_chat_list(bot, call, 0),
            "chat_new": self.handle_new_chat,
            "chat_reply": self.handle_chat_reply,
            "chat_memory": self.handle_chat_memory,
            "chat_analytics": self.handle_chat_analytics,
        }
    
    def handle_callback_with_params(self, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        if callback_data.startswith("chat_switch_"):
            chat_id = callback_data.replace("chat_switch_", "")
            return lambda bot, call: self.handle_switch_chat(bot, call, chat_id)
        
        if callback_data.startswith("chat_list_page_"):
            page = int(callback_data.replace("chat_list_page_", ""))
            return lambda bot, call: self.handle_chat_list(bot, call, page)
        
        return None
    
    async def handle_chat_flirt(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–ª–∏—Ä—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            if not hasattr(user, 'chat_manager') or user.chat_manager is None:
                user.chat_manager = ChatManager(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            text = f"üíï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–ª–∏—Ä—Ç–∞ –¥–ª—è {active_chat.client_profile.name}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–ª–∏—Ä—Ç–∞:"
            
            from utils import get_flirt_style_keyboard
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=get_flirt_style_keyboard())
            except Exception:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=get_flirt_style_keyboard())
            
            await bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in chat flirt: {str(e)}", exc_info=True)
            await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    async def handle_chat_ppv(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PPV –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            text = f"üéÅ –°–æ–∑–¥–∞–Ω–∏–µ PPV –¥–ª—è {active_chat.client_profile.name}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å PPV:"
            
            from utils import get_ppv_style_keyboard
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=get_ppv_style_keyboard())
            except Exception:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=get_ppv_style_keyboard())
            
            await bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in chat ppv: {str(e)}", exc_info=True)
            await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    async def handle_chat_tips(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–∞–µ–≤—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            text = f"üí∞ –ó–∞–ø—Ä–æ—Å —á–∞–µ–≤—ã—Ö –¥–ª—è {active_chat.client_profile.name}\n\n"
            text += "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è —Å–æ–∑–¥–∞–º –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞–µ–≤—ã–µ.\n\n"
            text += "*–ü—Ä–∏–º–µ—Ä:* –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–∞–Ω—Ü–∞\n"
            text += "*–†–µ–∑—É–ª—å—Ç–∞—Ç:* –ú–∏–ª—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é"
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
            )
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=keyboard)
            
            await bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in chat tips: {str(e)}", exc_info=True)
            await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    async def handle_chat_note(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            text = f"üìù –ó–∞–º–µ—Ç–∫–∞ –æ –∫–ª–∏–µ–Ω—Ç–µ {active_chat.client_profile.name}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
            notes = active_chat.client_memory.get("notes", [])
            if notes:
                text += "*–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏:*\n"
                for i, note in enumerate(notes[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    text += f"{i}. {note[:50]}...\n"
                text += "\n"
            
            text += "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –æ –∫–ª–∏–µ–Ω—Ç–µ (–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã):"
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
            )
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=keyboard)
            
            await bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in chat note: {str(e)}", exc_info=True)
            await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    async def handle_chat_tags(self, bot: AsyncTeleBot, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∫ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            user_id = call.from_user.id
            user = self.state_manager.get_user(user_id)
            
            active_chat = user.chat_manager.get_active_chat()
            if not active_chat:
                await bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            text = f"üè∑ –¢–µ–≥–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {active_chat.client_profile.name}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
            tags = active_chat.client_memory.get("tags", [])
            if tags:
                text += f"*–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:* {', '.join(tags)}\n\n"
            
            text += "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:*\n"
            text += "‚Ä¢ VIP, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π, —â–µ–¥—Ä—ã–π\n"
            text += "‚Ä¢ –ª—é–±–∏—Ç_—Ñ–æ—Ç–æ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç_–≤–∏–¥–µ–æ\n"
            text += "‚Ä¢ —É—Ç—Ä–æ–º_–∞–∫—Ç–∏–≤–µ–Ω, –≤–µ—á–µ—Ä–æ–º_–æ–Ω–ª–∞–π–Ω\n"
            text += "‚Ä¢ —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π, —Å–µ—Ä—å–µ–∑–Ω—ã–π\n\n"
            text += "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_management")
            )
            
            try:
                await safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            except Exception:
                await safe_send_message(bot, call.message.chat.id, text, reply_markup=keyboard)
            
            await bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in chat tags: {str(e)}", exc_info=True)
            await bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞") 