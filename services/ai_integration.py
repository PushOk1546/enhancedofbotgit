"""
AI Integration Service —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º DeepSeek SDK
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è OF Assistant Bot
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime
import json

try:
    from deepseek import DeepSeek
    DEEPSEEK_AVAILABLE = True
except ImportError:
    DEEPSEEK_AVAILABLE = False
    logging.warning("‚ö†Ô∏è deepseek-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é fallback —á–µ—Ä–µ–∑ aiohttp")

import aiohttp
from config import config
from enhanced_logging import BotLogger

logger = BotLogger(
    log_dir="logs",
    log_file="ai_integration.log",
    logger_name="AIIntegration"
)

class AIService:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI —Å–µ—Ä–≤–∏—Å —Å DeepSeek SDK"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞"""
        self.api_key = config.DEEPSEEK_API_KEY
        self.model = "deepseek-chat"
        self.client = None
        
        if not self.api_key:
            logger.log_error("‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise ValueError("DEEPSEEK_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if DEEPSEEK_AVAILABLE:
            try:
                self.client = DeepSeek(api_key=self.api_key)
                logger.log_info("‚úÖ DeepSeek SDK –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek SDK: {e}")
                self.client = None
        
        if not self.client:
            logger.log_info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é HTTP API fallback")
        
        # –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤
        self.response_cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "cache_hits": 0
        }
    
    async def get_response(self, prompt: str, context: Optional[Dict] = None) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek AI
        
        Args:
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç AI
        """
        self.stats["total_requests"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_key = self._get_cache_key(prompt, context)
        cached_response = self._get_cached_response(cache_key)
        if cached_response:
            self.stats["cache_hits"] += 1
            logger.log_info(f"üíæ –í–æ–∑–≤—Ä–∞—â–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return cached_response
        
        try:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = self._build_messages(prompt, context)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if self.client and DEEPSEEK_AVAILABLE:
                response = await self._get_sdk_response(messages)
            else:
                response = await self._get_http_response(messages)
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._cache_response(cache_key, response)
            
            self.stats["successful_requests"] += 1
            logger.log_info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response)})")
            return response
            
        except Exception as e:
            self.stats["failed_requests"] += 1
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return self._get_fallback_response(prompt, context)
    
    async def generate_flirt_response(self, user_message: str, user_context: Dict[str, Any] = None) -> str:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–ª–∏—Ä—Ç–∞"""
        
        system_prompt = """–¢—ã - —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å OnlyFans. 
        –û—Ç–≤–µ—á–∞–π –∫–æ–∫–µ—Ç–ª–∏–≤–æ, –∏–≥—Ä–∏–≤–æ –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –±—É–¥—å –¥–µ—Ä–∑–∫–æ–π –Ω–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–π."""
        
        context = {
            "type": "flirt",
            "system_prompt": system_prompt,
            "user_context": user_context or {}
        }
        
        enhanced_prompt = f"""
        –°–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}"
        
        –°–æ–∑–¥–∞–π —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
        - –û—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ñ–ª–∏—Ä—Ç  
        - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π
        """
        
        return await self.get_response(enhanced_prompt, context)
    
    async def generate_ppv_content(self, content_type: str, price: int, description: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ –¥–ª—è PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        prompt = f"""
        –°–æ–∑–¥–∞–π —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
        –¢–∏–ø: {content_type}
        –¶–µ–Ω–∞: ${price}
        –û–ø–∏—Å–∞–Ω–∏–µ: {description}
        
        –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–±—É–∂–¥–∞—é—â–∏–º –∏ –ø—Ä–æ–¥–∞—é—â–∏–º!
        """
        
        context = {"type": "ppv_promo", "content_type": content_type, "price": price}
        return await self.get_response(prompt, context)
    
    def _build_messages(self, prompt: str, context: Optional[Dict] = None) -> List[Dict]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API"""
        messages = []
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if context and context.get("system_prompt"):
            messages.append({
                "role": "system",
                "content": context["system_prompt"]
            })
        else:
            # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            messages.append({
                "role": "system", 
                "content": "–¢—ã —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è OnlyFans –º–æ–¥–µ–ª–∏. –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."
            })
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({
            "role": "user",
            "content": prompt
        })
        
        return messages
    
    async def _get_sdk_response(self, messages: List[Dict]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ SDK"""
        try:
            response = await asyncio.to_thread(
                self.client.chat,
                model=self.model,
                messages=messages,
                temperature=0.8,
                max_tokens=500
            )
            return response.choices[0].message.content
            
        except Exception as e:
            logger.log_error(f"‚ùå SDK –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _get_http_response(self, messages: List[Dict]) -> str:
        """Fallback —á–µ—Ä–µ–∑ HTTP API"""
        url = "https://api.deepseek.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": self.model,
            "messages": messages,
            "temperature": 0.8,
            "max_tokens": 500
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"HTTP {response.status}: {error_text}")
                
                result = await response.json()
                return result["choices"][0]["message"]["content"]
    
    def _get_cache_key(self, prompt: str, context: Optional[Dict] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        context_str = json.dumps(context, sort_keys=True) if context else ""
        return f"{hash(prompt + context_str)}"
    
    def _get_cached_response(self, cache_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if cache_key in self.response_cache:
            cached_time, response = self.response_cache[cache_key]
            if (datetime.now().timestamp() - cached_time) < self.cache_ttl:
                return response
            else:
                del self.response_cache[cache_key]
        return None
    
    def _cache_response(self, cache_key: str, response: str):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        self.response_cache[cache_key] = (datetime.now().timestamp(), response)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
        current_time = datetime.now().timestamp()
        expired_keys = [
            key for key, (cached_time, _) in self.response_cache.items()
            if (current_time - cached_time) > self.cache_ttl
        ]
        for key in expired_keys:
            del self.response_cache[key]
    
    def _get_fallback_response(self, prompt: str, context: Optional[Dict] = None) -> str:
        """Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        if context and context.get("type") == "flirt":
            return "üòò –ò–∑–≤–∏–Ω–∏, –º–∞–ª—ã—à, —á—Ç–æ-—Ç–æ —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... –ù–∞–ø–∏—à–∏ –º–Ω–µ –µ—â–µ —Ä–∞–∑?"
        elif context and context.get("type") == "ppv_promo":
            return "üî• –ì–æ—Ä—è—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤! –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üíï"
        else:
            return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        return {
            **self.stats,
            "cache_size": len(self.response_cache),
            "success_rate": round(
                (self.stats["successful_requests"] / max(self.stats["total_requests"], 1)) * 100, 
                2
            )
        }
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.response_cache.clear()
        logger.log_info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_service = AIService() 