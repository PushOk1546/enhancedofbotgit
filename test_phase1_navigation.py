#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –§–ê–ó–´ 1: –ë–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
"""

import asyncio
import sys
from unittest.mock import Mock, AsyncMock
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from utils import get_quick_continue_keyboard
    from bot import BotManager
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_quick_continue_keyboard():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")
    
    try:
        keyboard = get_quick_continue_keyboard("test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ InlineKeyboardMarkup
        assert isinstance(keyboard, types.InlineKeyboardMarkup), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3)
        assert len(keyboard.keyboard) == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 —Ä—è–¥–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(keyboard.keyboard)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ (2 –∫–Ω–æ–ø–∫–∏)
        first_row = keyboard.keyboard[0]
        assert len(first_row) == 2, f"–í –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∫–Ω–æ–ø–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(first_row)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤)
        button_texts = [btn.text for btn in first_row]
        expected_texts = ["üí¨ –ï—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "üíù –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∏—Ä—Ç"]
        
        for expected in expected_texts:
            assert expected in button_texts, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞: {expected}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤)
        callback_data = [btn.callback_data for btn in first_row]
        expected_callbacks = ["continue_writing", "add_flirt"]
        
        for expected in expected_callbacks:
            assert expected in callback_data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç callback: {expected}"
        
        print("   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   üìä –†—è–¥–æ–≤: {len(keyboard.keyboard)}")
        print(f"   üîò –ö–Ω–æ–ø–æ–∫ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É: {len(first_row)}")
        print(f"   üìù –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫: {button_texts}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_callback_handlers():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
        bot_manager = BotManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            '_handle_continue_writing',
            '_handle_add_flirt', 
            '_handle_quick_ppv',
            '_handle_quick_tips'
        ]
        
        for method_name in required_methods:
            assert hasattr(bot_manager, method_name), f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: {method_name}"
            method = getattr(bot_manager, method_name)
            assert callable(method), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è callable"
            print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω")
        
        print(f"   üìä –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(required_methods)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_integration():
    """–¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("   üìù –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è get_quick_continue_keyboard —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_messages = ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?", ""]
        
        for msg in test_messages:
            keyboard = get_quick_continue_keyboard(msg)
            assert keyboard is not None, f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{msg}'"
            assert len(keyboard.keyboard) > 0, f"–ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{msg}'"
        
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(test_messages)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback data (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤)
        keyboard = get_quick_continue_keyboard("test")
        all_callbacks = []
        for row in keyboard.keyboard:
            for button in row:
                if hasattr(button, 'callback_data') and button.callback_data:
                    all_callbacks.append(button.callback_data)
        
        expected_callbacks = ['continue_writing', 'add_flirt', 'quick_ppv', 'quick_tips', 'back_to_main']
        for expected in expected_callbacks:
            assert expected in all_callbacks, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç callback: {expected}"
        
        print(f"   ‚úÖ –í—Å–µ callback'—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {all_callbacks}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –§–ê–ó–´ 1: –ë–ê–ó–û–í–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø")
    print("=" * 50)
    
    tests = [
        ("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", test_quick_continue_keyboard),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤", test_callback_handlers),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", test_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –§–ê–ó–ê 1 –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {total - passed} —Ç–µ—Å—Ç(–æ–≤)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 