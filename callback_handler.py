"""
üéØ –ï–î–ò–ù–´–ô CALLBACK HANDLER
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import logging
from typing import Dict, Callable, Any, Optional
from telebot import types
from telebot.async_telebot import AsyncTeleBot

from ui_manager import ui_manager, UIState
from premium_system import premium_manager

logger = logging.getLogger(__name__)

class CallbackRouter:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä callback'–æ–≤"""
    
    def __init__(self, bot: AsyncTeleBot):
        self.bot = bot
        self.handlers: Dict[str, Callable] = {}
        self.register_core_handlers()
    
    def register_handler(self, prefix: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
        self.handlers[prefix] = handler
        logger.info(f"Registered callback handler for prefix: {prefix}")
    
    def register_core_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        
        # UI —Å–∏—Å—Ç–µ–º–∞
        self.register_handler("ui_", self.handle_ui_callbacks)
        
        # –ê–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º–∞
        self.register_handler("admin_", self.handle_admin_callbacks)
        
        # –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.register_handler("payment_", self.handle_payment_callbacks)
        
        # Premium —Å–∏—Å—Ç–µ–º–∞
        self.register_handler("premium_", self.handle_premium_callbacks)
        
        # Legacy –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handler("continue_", self.handle_legacy_callbacks)
        self.register_handler("add_", self.handle_legacy_callbacks)
        self.register_handler("quick_", self.handle_legacy_callbacks)
        self.register_handler("main_", self.handle_legacy_callbacks)
        self.register_handler("back_", self.handle_legacy_callbacks)
    
    async def route_callback(self, call: types.CallbackQuery) -> bool:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç callback –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É"""
        try:
            callback_data = call.data
            user_id = call.from_user.id
            
            logger.info(f"Routing callback: {callback_data} from user {user_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            for prefix, handler in self.handlers.items():
                if callback_data.startswith(prefix):
                    result = await handler(call)
                    if result:
                        return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            logger.warning(f"No handler found for callback: {callback_data}")
            await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return False
            
        except Exception as e:
            logger.error(f"Error routing callback: {str(e)}", exc_info=True)
            await self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
    
    async def handle_ui_callbacks(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç UI callback'–∏"""
        try:
            user_id = call.from_user.id
            action = call.data[3:]  # –£–±–∏—Ä–∞–µ–º "ui_"
            
            # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            ui_manager.handle_callback(call)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_sub = premium_manager.get_user_subscription(user_id)
            user_tier = user_sub.tier.value if user_sub else "free"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action == "main_menu":
                await self.send_main_menu(call, user_tier)
                
            elif action == "start_chat":
                ui_manager.set_user_state(user_id, UIState.CHAT_MODE)
                await self.send_chat_interface(call)
                
            elif action == "flirt_mode":
                await self.send_flirt_interface(call)
                
            elif action == "upgrade_menu":
                ui_manager.set_user_state(user_id, UIState.PREMIUM_MENU)
                await self.send_premium_menu(call, user_tier)
                
            elif action == "settings":
                ui_manager.set_user_state(user_id, UIState.SETTINGS)
                await self.send_settings_menu(call)
                
            elif action.startswith("admin"):
                if self.is_admin(user_id):
                    ui_manager.set_user_state(user_id, UIState.ADMIN_PANEL)
                    await self.send_admin_panel(call)
                else:
                    await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                    
            elif action.startswith("heat_set_"):
                level = int(action.split("_")[-1])
                await self.set_heat_level(call, level)
                
            elif action.startswith("mode_set_"):
                mode = action.split("_")[-1]
                await self.set_chat_mode(call, mode)
                
            elif action.startswith("rate_"):
                await self.handle_rating(call)
                
            elif action.startswith("favorite_"):
                await self.handle_favorite(call)
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ UI –¥–µ–π—Å—Ç–≤–∏–µ
                logger.warning(f"Unknown UI action: {action}")
                await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in UI callback handler: {str(e)}", exc_info=True)
            await self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ UI")
            return False
    
    async def handle_admin_callbacks(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω callback'–∏"""
        try:
            user_id = call.from_user.id
            
            if not self.is_admin(user_id):
                await self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return True
            
            action = call.data[6:]  # –£–±–∏—Ä–∞–µ–º "admin_"
            
            if action == "users":
                await self.show_admin_users(call)
            elif action == "revenue":
                await self.show_admin_revenue(call)
            elif action == "stats":
                await self.show_admin_stats(call)
            elif action == "health":
                await self.show_admin_health(call)
            elif action == "grant":
                await self.show_grant_premium_menu(call)
            elif action == "test":
                await self.show_test_mode(call)
            elif action == "ton":
                await self.show_ton_menu(call)
            elif action == "help":
                await self.show_admin_help(call)
            else:
                await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in admin callback handler: {str(e)}", exc_info=True)
            await self.bot.answer_callback_query(call.id, "‚ùå –ê–¥–º–∏–Ω –æ—à–∏–±–∫–∞")
            return False
    
    async def handle_payment_callbacks(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–µ callback'–∏"""
        try:
            user_id = call.from_user.id
            action = call.data[8:]  # –£–±–∏—Ä–∞–µ–º "payment_"
            
            if action == "upgrade":
                await self.show_upgrade_options(call)
            elif action == "pricing":
                await self.show_pricing_info(call)
            elif action.startswith("stars_"):
                tier = action.split("_")[1]
                await self.initiate_stars_payment(call, tier)
            elif action == "method_ton":
                await self.show_ton_payment(call)
            else:
                await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in payment callback handler: {str(e)}", exc_info=True)
            await self.bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è –æ—à–∏–±–∫–∞")
            return False
    
    async def handle_premium_callbacks(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç premium callback'–∏"""
        try:
            user_id = call.from_user.id
            action = call.data[8:]  # –£–±–∏—Ä–∞–µ–º "premium_"
            
            user_sub = premium_manager.get_user_subscription(user_id)
            
            if action == "status":
                await self.show_premium_status(call, user_sub)
            elif action == "upgrade":
                await self.show_upgrade_options(call)
            elif action == "content":
                if premium_manager.can_access_premium_content(user_id):
                    await self.show_premium_content(call)
                else:
                    await self.show_upgrade_prompt(call)
            else:
                await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è Premium —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in premium callback handler: {str(e)}", exc_info=True)
            await self.bot.answer_callback_query(call.id, "‚ùå Premium –æ—à–∏–±–∫–∞")
            return False
    
    async def handle_legacy_callbacks(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç legacy callback'–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            callback_data = call.data
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ UI –¥–µ–π—Å—Ç–≤–∏—è
            legacy_mapping = {
                "continue_writing": "ui_continue_chat",
                "add_flirt": "ui_add_flirt",
                "quick_ppv": "ui_suggest_ppv",
                "quick_tips": "ui_request_tips",
                "main_menu": "ui_main_menu",
                "back_to_main": "ui_main_menu"
            }
            
            if callback_data in legacy_mapping:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                new_call_data = legacy_mapping[callback_data]
                call.data = new_call_data
                return await self.handle_ui_callbacks(call)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∞–ø–ø–∏–Ω–≥
            logger.warning(f"Unmapped legacy callback: {callback_data}")
            await self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
            return True
            
        except Exception as e:
            logger.error(f"Error in legacy callback handler: {str(e)}", exc_info=True)
            return False
    
    # === HELPER METHODS ===
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        admin_ids = [377917978]  # ID –∞–¥–º–∏–Ω–∞
        return user_id in admin_ids
    
    async def send_main_menu(self, call: types.CallbackQuery, user_tier: str = "free"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = ui_manager.create_main_menu_keyboard(user_tier)
        
        main_menu_text = f"""üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ

üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ—è –ª–∏—á–Ω–∞—è AI –ø–æ–¥—Ä—É–∂–∫–∞ üíï

üéØ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: {user_tier.upper()}
üí¨ –î–æ—Å—Ç—É–ø–Ω–æ: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
üî• –†–µ–∂–∏–º—ã: –ß–∞—Ç, —Ñ–ª–∏—Ä—Ç, —Å–µ–∫—Å—Ç–∏–Ω–≥

‚ö° –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å:"""
        
        try:
            await self.bot.edit_message_text(
                main_menu_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await self.bot.send_message(
                call.message.chat.id,
                main_menu_text,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id)
    
    async def send_chat_interface(self, call: types.CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
        keyboard = ui_manager.create_chat_keyboard()
        
        chat_text = """üí¨ –†–ï–ñ–ò–ú –ß–ê–¢–ê

üî• –Ø –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...

üíù –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        try:
            await self.bot.edit_message_text(
                chat_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id, "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        except:
            await self.bot.send_message(
                call.message.chat.id,
                chat_text,
                reply_markup=keyboard
            )
    
    async def send_flirt_interface(self, call: types.CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–ª–∏—Ä—Ç–∞"""
        keyboard = ui_manager.create_chat_keyboard()
        
        flirt_text = """üòò –§–õ–ò–†–¢ –†–ï–ñ–ò–ú

üî• –ú–º–º, –≥–æ—Ç–æ–≤–∞ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å —Å —Ç–æ–±–æ–π... üíï

üíã –ß—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å, –∫—Ä–∞—Å–∞–≤—á–∏–∫?"""
        
        try:
            await self.bot.edit_message_text(
                flirt_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id, "üòò –§–ª–∏—Ä—Ç —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!")
        except:
            await self.bot.send_message(
                call.message.chat.id,
                flirt_text,
                reply_markup=keyboard
            )
    
    async def send_premium_menu(self, call: types.CallbackQuery, user_tier: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫"""
        keyboard = ui_manager.create_premium_keyboard(user_tier)
        
        premium_text = f"""üíé –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ò

üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {user_tier.upper()}

‚≠ê PREMIUM - 150 Stars/–¥–µ–Ω—å
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–ª–∏—Ä—Ç–∞

üî• VIP - 250 Stars/–¥–µ–Ω—å
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Premium
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏

üëë ULTIMATE - 500 Stars/–¥–µ–Ω—å
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ VIP
‚Ä¢ –£–ª—å—Ç—Ä–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å

üíé –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ TON"""
        
        try:
            await self.bot.edit_message_text(
                premium_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id)
        except:
            await self.bot.send_message(
                call.message.chat.id,
                premium_text,
                reply_markup=keyboard
            )
    
    async def send_settings_menu(self, call: types.CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = ui_manager.create_settings_keyboard()
        
        settings_text = """‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò

üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π –±–æ—Ç –ø–æ–¥ —Å–µ–±—è:

üå°Ô∏è –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å - —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üé≠ –†–µ–∂–∏–º —á–∞—Ç–∞ - —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å
üåê –Ø–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π
üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å - –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            await self.bot.edit_message_text(
                settings_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id)
        except:
            await self.bot.send_message(
                call.message.chat.id,
                settings_text,
                reply_markup=keyboard
            )
    
    async def send_admin_panel(self, call: types.CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = ui_manager.create_admin_keyboard()
        
        admin_text = """üë®‚Äçüíº –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
üí∞ –î–æ—Ö–æ–¥—ã - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üéÅ –í—ã–¥–∞—Ç—å Premium - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º - –æ—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
üíé TON –ø–ª–∞—Ç–µ–∂–∏ - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            await self.bot.edit_message_text(
                admin_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            await self.bot.answer_callback_query(call.id)
        except:
            await self.bot.send_message(
                call.message.chat.id,
                admin_text,
                reply_markup=keyboard
            )
    
    async def set_heat_level(self, call: types.CallbackQuery, level: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        user_id = call.from_user.id
        
        # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤ –±–∞–∑—É
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
        
        level_names = {
            1: "üòä –ú—è–≥–∫–∏–π",
            2: "üòè –°—Ä–µ–¥–Ω–∏–π", 
            3: "üî• –ì–æ—Ä—è—á–∏–π",
            4: "üí¶ –°—Ç—Ä–∞—Å—Ç–Ω—ã–π",
            5: "üîû –≠–∫—Å—Ç—Ä–∏–º"
        }
        
        level_name = level_names.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        await self.bot.answer_callback_query(
            call.id, 
            f"üå°Ô∏è –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level_name}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.send_settings_menu(call)
    
    async def set_chat_mode(self, call: types.CallbackQuery, mode: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞"""
        user_id = call.from_user.id
        
        mode_names = {
            "chat": "üí¨ –î—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ",
            "flirt": "üòò –§–ª–∏—Ä—Ç",
            "sexting": "üîû –°–µ–∫—Å—Ç–∏–Ω–≥"
        }
        
        mode_name = mode_names.get(mode, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        await self.bot.answer_callback_query(
            call.id,
            f"üé≠ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode_name}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.send_settings_menu(call)
    
    async def handle_rating(self, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞"""
        parts = call.data.split("_")
        rating = parts[2]
        message_id = parts[3]
        
        await self.bot.answer_callback_query(
            call.id,
            f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating}/5!"
        )
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        try:
            await self.bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None
            )
        except:
            pass
    
    async def handle_favorite(self, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        user_id = call.from_user.id
        message_id = call.data.split("_")[-1]
        
        # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        
        await self.bot.answer_callback_query(
            call.id,
            "üíù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        )
    
    # Placeholder –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–π
    async def show_admin_users(self, call): await self.bot.answer_callback_query(call.id, "üë• –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_admin_revenue(self, call): await self.bot.answer_callback_query(call.id, "üí∞ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_admin_stats(self, call): await self.bot.answer_callback_query(call.id, "üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_admin_health(self, call): await self.bot.answer_callback_query(call.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_grant_premium_menu(self, call): await self.bot.answer_callback_query(call.id, "üéÅ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_test_mode(self, call): await self.bot.answer_callback_query(call.id, "üß™ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_ton_menu(self, call): await self.bot.answer_callback_query(call.id, "üíé –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_admin_help(self, call): await self.bot.answer_callback_query(call.id, "üìã –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # Placeholder –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    async def show_upgrade_options(self, call): await self.bot.answer_callback_query(call.id, "üíé –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_pricing_info(self, call): await self.bot.answer_callback_query(call.id, "üí∞ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def initiate_stars_payment(self, call, tier): await self.bot.answer_callback_query(call.id, "‚≠ê –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_ton_payment(self, call): await self.bot.answer_callback_query(call.id, "üíé –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # Placeholder –º–µ—Ç–æ–¥—ã –¥–ª—è premium —Ñ—É–Ω–∫—Ü–∏–π
    async def show_premium_status(self, call, user_sub): await self.bot.answer_callback_query(call.id, "üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_premium_content(self, call): await self.bot.answer_callback_query(call.id, "üî• –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    async def show_upgrade_prompt(self, call): await self.bot.answer_callback_query(call.id, "üíé –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
callback_router = None

def initialize_callback_router(bot: AsyncTeleBot) -> CallbackRouter:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback router"""
    global callback_router
    callback_router = CallbackRouter(bot)
    return callback_router 