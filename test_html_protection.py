#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç HTML parsing errors
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É safe_send_message –∏ safe_reply_to —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
from unittest.mock import AsyncMock, MagicMock
from handlers import safe_send_message, safe_reply_to

async def test_html_protection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç HTML –æ—à–∏–±–æ–∫"""
    print("üõ°Ô∏è –¢–ï–°–¢ –ó–ê–©–ò–¢–´ –û–¢ HTML PARSING ERRORS")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º mock –±–æ—Ç–∞
    bot = AsyncMock()
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    print("\nüì§ –¢–ï–°–¢ 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.send_message.return_value = "success"
    
    result = await safe_send_message(
        bot, 123, "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", parse_mode='HTML'
    )
    
    print("‚úÖ –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç 2: HTML parsing error + fallback
    print("\nüö® –¢–ï–°–¢ 2: HTML parsing error –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
    def side_effect(*args, **kwargs):
        if 'parse_mode' in kwargs:
            raise Exception("can't parse entities: Can't find end of the entity starting at byte offset 1130")
        return "fallback_success"
    
    bot.send_message.side_effect = side_effect
    
    # –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º HTML
    problematic_html = "–ü—Ä–∏–≤–µ—Ç! <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç <i>–∏ –∫—É—Ä—Å–∏–≤ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"
    
    result = await safe_send_message(
        bot, 123, problematic_html, parse_mode='HTML'
    )
    
    print("‚úÖ HTML –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ fallback")
    print("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ plain text –±–µ–∑ parse_mode")
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç safe_reply_to
    print("\nüí¨ –¢–ï–°–¢ 3: –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    message_mock = MagicMock()
    message_mock.from_user.id = 456
    
    bot.reply_to.side_effect = side_effect
    
    result = await safe_reply_to(
        bot, message_mock, "–û—Ç–≤–µ—Ç —Å <b>–ø—Ä–æ–±–ª–µ–º–Ω—ã–º HTML", parse_mode='HTML'
    )
    
    print("‚úÖ safe_reply_to —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ HTML)
    print("\n‚ö†Ô∏è –¢–ï–°–¢ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫")
    
    def other_error(*args, **kwargs):
        raise Exception("Network timeout")
    
    bot.send_message.side_effect = other_error
    
    try:
        await safe_send_message(bot, 123, "–¢–µ—Å—Ç", parse_mode='HTML')
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞")
    except Exception as e:
        if "Network timeout" in str(e):
            print("‚úÖ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–±—Ä–æ—à–µ–Ω—ã –¥–∞–ª—å—à–µ")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_new_eco_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é –º–æ–¥–µ–ª—å"""
    print("\n\nüíö –¢–ï–°–¢ –ù–û–í–û–ô –≠–ö–û-–ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    from config import MODELS
    from state_manager import StateManager
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {list(MODELS.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º eco –º–æ–¥–µ–ª—å
    eco_model = MODELS.get('eco')
    if eco_model:
        print(f"‚úÖ –ú–æ–¥–µ–ª—å 'eco' –Ω–∞–π–¥–µ–Ω–∞:")
        print(f"   üìõ ID: {eco_model['id']}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {eco_model['description']}")
    else:
        print("‚ùå –ú–æ–¥–µ–ª—å 'eco' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sm = StateManager()
    user = sm.get_user(999999)  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    print(f"üë§ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user.model}'")
    
    if user.model == 'eco':
        print("‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("üí∞ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å")
    else:
        print(f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å 'eco', –ø–æ–ª—É—á–µ–Ω–∞ '{user.model}'")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í HTML –ó–ê–©–ò–¢–´ –ò –ù–û–í–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç HTML
    await test_html_protection()
    
    # –¢–µ—Å—Ç –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    test_new_eco_model()
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("‚úÖ HTML –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ") 
    print("‚úÖ –ù–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞")
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")

if __name__ == "__main__":
    asyncio.run(main()) 