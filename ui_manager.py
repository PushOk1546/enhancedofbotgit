"""
üé® –ï–î–ò–ù–´–ô UI –ú–ï–ù–ï–î–ñ–ï–†
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –±–æ—Ç–∞
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import logging
from typing import Dict, List, Optional, Any
from telebot import types
from enum import Enum

logger = logging.getLogger(__name__)

class UIState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    MAIN_MENU = "main_menu"
    CHAT_MODE = "chat_mode" 
    ADMIN_PANEL = "admin_panel"
    PREMIUM_MENU = "premium_menu"
    SETTINGS = "settings"
    CONTENT_MENU = "content_menu"

class KeyboardType(Enum):
    """–¢–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    INLINE = "inline"
    REPLY = "reply"

class UIManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä UI"""
    
    def __init__(self):
        self.user_states: Dict[int, UIState] = {}
        self.active_keyboards: Dict[int, types.InlineKeyboardMarkup] = {}
        
        # –≠–º–æ–¥–∑–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        self.EMOJIS = {
            'chat': 'üí¨',
            'flirt': 'üòò', 
            'premium': 'üíé',
            'money': 'üí∞',
            'gift': 'üéÅ',
            'settings': '‚öôÔ∏è',
            'admin': 'üë®‚Äçüíº',
            'stats': 'üìä',
            'home': 'üè†',
            'back': 'üîô',
            'fire': 'üî•',
            'heart': 'üíù',
            'star': '‚≠ê',
            'check': '‚úÖ',
            'cross': '‚ùå'
        }
    
    def set_user_state(self, user_id: int, state: UIState):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_states[user_id] = state
        logger.debug(f"UI state set for user {user_id}: {state.value}")
    
    def get_user_state(self, user_id: int) -> UIState:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, UIState.MAIN_MENU)
    
    def create_main_menu_keyboard(self, user_tier: str = "free") -> types.InlineKeyboardMarkup:
        """üè† –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['chat']} –ù–∞—á–∞—Ç—å —á–∞—Ç", 
                callback_data="ui_start_chat"
            ),
            types.InlineKeyboardButton(
                f"{self.EMOJIS['flirt']} –§–ª–∏—Ä—Ç —Ä–µ–∂–∏–º", 
                callback_data="ui_flirt_mode"
            )
        )
        
        # Premium —Ñ—É–Ω–∫—Ü–∏–∏
        if user_tier == "free":
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{self.EMOJIS['premium']} –ê–ø–≥—Ä–µ–π–¥", 
                    callback_data="ui_upgrade_menu"
                ),
                types.InlineKeyboardButton(
                    f"{self.EMOJIS['gift']} –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ", 
                    callback_data="ui_free_content"
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{self.EMOJIS['fire']} –≠–∫—Å–∫–ª—é–∑–∏–≤", 
                    callback_data="ui_premium_content"
                ),
                types.InlineKeyboardButton(
                    f"{self.EMOJIS['star']} VIP —á–∞—Ç", 
                    callback_data="ui_vip_chat"
                )
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['stats']} –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", 
                callback_data="ui_profile"
            ),
            types.InlineKeyboardButton(
                f"{self.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                callback_data="ui_settings"
            )
        )
        
        return keyboard
    
    def create_chat_keyboard(self, context: Dict[str, Any] = None) -> types.InlineKeyboardMarkup:
        """üí¨ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['chat']} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
                callback_data="ui_continue_chat"
            ),
            types.InlineKeyboardButton(
                f"{self.EMOJIS['flirt']} –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∏—Ä—Ç", 
                callback_data="ui_add_flirt"
            )
        )
        
        # –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['gift']} PPV –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                callback_data="ui_suggest_ppv"
            ),
            types.InlineKeyboardButton(
                f"{self.EMOJIS['money']} –ß–∞–µ–≤—ã–µ", 
                callback_data="ui_request_tips"
            )
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
        keyboard.add(
            types.InlineKeyboardButton(
                "üå°Ô∏è –£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏", 
                callback_data="ui_heat_level"
            ),
            types.InlineKeyboardButton(
                "üé≠ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", 
                callback_data="ui_change_mode"
            )
        )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="ui_main_menu"
            )
        )
        
        return keyboard
    
    def create_admin_keyboard(self) -> types.InlineKeyboardMarkup:
        """üë®‚Äçüíº –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        keyboard.add(
            types.InlineKeyboardButton(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
                callback_data="ui_admin_users"
            ),
            types.InlineKeyboardButton(
                f"{self.EMOJIS['money']} –î–æ—Ö–æ–¥—ã", 
                callback_data="ui_admin_revenue"
            )
        )
        
        # –ü—Ä–µ–º–∏—É–º
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['gift']} –í—ã–¥–∞—Ç—å Premium", 
                callback_data="ui_admin_grant"
            ),
            types.InlineKeyboardButton(
                "üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º", 
                callback_data="ui_admin_test"
            )
        )
        
        # –°–∏—Å—Ç–µ–º–∞
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data="ui_admin_stats"
            ),
            types.InlineKeyboardButton(
                "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 
                callback_data="ui_admin_health"
            )
        )
        
        # TON –ø–ª–∞—Ç–µ–∂–∏
        keyboard.add(
            types.InlineKeyboardButton(
                "üíé TON –ø–ª–∞—Ç–µ–∂–∏", 
                callback_data="ui_admin_ton"
            ),
            types.InlineKeyboardButton(
                "üìã –°–ø—Ä–∞–≤–∫–∞", 
                callback_data="ui_admin_help"
            )
        )
        
        # –ù–∞–∑–∞–¥
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data="ui_main_menu"
            )
        )
        
        return keyboard
    
    def create_premium_keyboard(self, user_tier: str = "free") -> types.InlineKeyboardMarkup:
        """üíé –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if user_tier == "free":
            keyboard.add(
                types.InlineKeyboardButton(
                    "üéØ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ü–†–û–ë–ù–ê–Ø –í–ï–†–°–ò–Ø", 
                    callback_data="ui_current_status"
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    f"üëë –ê–ö–¢–ò–í–ù–ê: {user_tier.upper()}", 
                    callback_data="ui_current_status"
                )
            )
        
        # –¢–∞—Ä–∏—Ñ—ã
        if user_tier in ["free", "premium"]:
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚≠ê PREMIUM - 150 Stars/–¥–µ–Ω—å", 
                    callback_data="ui_buy_premium"
                )
            )
        
        if user_tier in ["free", "premium", "vip"]:
            keyboard.add(
                types.InlineKeyboardButton(
                    "üî• VIP - 250 Stars/–¥–µ–Ω—å", 
                    callback_data="ui_buy_vip"
                )
            )
        
        if user_tier != "ultimate":
            keyboard.add(
                types.InlineKeyboardButton(
                    "üëë ULTIMATE - 500 Stars/–¥–µ–Ω—å", 
                    callback_data="ui_buy_ultimate"
                )
            )
        
        # –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
        keyboard.add(
            types.InlineKeyboardButton(
                "üíé –û–ø–ª–∞—Ç–∞ TON", 
                callback_data="ui_pay_ton"
            )
        )
        
        # –ù–∞–∑–∞–¥
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data="ui_main_menu"
            )
        )
        
        return keyboard
    
    def create_settings_keyboard(self) -> types.InlineKeyboardMarkup:
        """‚öôÔ∏è –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.add(
            types.InlineKeyboardButton(
                "üå°Ô∏è –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å", 
                callback_data="ui_set_heat"
            ),
            types.InlineKeyboardButton(
                "üé≠ –†–µ–∂–∏–º —á–∞—Ç–∞", 
                callback_data="ui_set_mode"
            )
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        keyboard.add(
            types.InlineKeyboardButton(
                "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                callback_data="ui_notifications"
            ),
            types.InlineKeyboardButton(
                "üåê –Ø–∑—ã–∫", 
                callback_data="ui_language"
            )
        )
        
        # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
        keyboard.add(
            types.InlineKeyboardButton(
                "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", 
                callback_data="ui_privacy"
            ),
            types.InlineKeyboardButton(
                "üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", 
                callback_data="ui_my_data"
            )
        )
        
        # –ù–∞–∑–∞–¥
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data="ui_main_menu"
            )
        )
        
        return keyboard
    
    def create_feedback_keyboard(self, message_id: int) -> types.InlineKeyboardMarkup:
        """‚≠ê –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=5)
        
        # –†–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–∞–º–∏
        star_buttons = [
            types.InlineKeyboardButton(
                f"{i}‚≠ê", 
                callback_data=f"ui_rate_{i}_{message_id}"
            )
            for i in range(1, 6)
        ]
        keyboard.add(*star_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['heart']} –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", 
                callback_data=f"ui_favorite_{message_id}"
            ),
            types.InlineKeyboardButton(
                "üîÑ –î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç", 
                callback_data=f"ui_regenerate_{message_id}"
            )
        )
        
        return keyboard
    
    def create_heat_level_keyboard(self, current_level: int = 2) -> types.InlineKeyboardMarkup:
        """üå°Ô∏è –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—Ä–æ–≤–Ω—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        levels = [
            (1, "üòä –ú—è–≥–∫–∏–π"),
            (2, "üòè –°—Ä–µ–¥–Ω–∏–π"),
            (3, "üî• –ì–æ—Ä—è—á–∏–π"),
            (4, "üí¶ –°—Ç—Ä–∞—Å—Ç–Ω—ã–π"),
            (5, "üîû –≠–∫—Å—Ç—Ä–∏–º")
        ]
        
        for level, description in levels:
            marker = "üéØ " if level == current_level else ""
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{marker}{description}", 
                    callback_data=f"ui_heat_set_{level}"
                )
            )
        
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data="ui_settings"
            )
        )
        
        return keyboard
    
    def create_mode_keyboard(self, current_mode: str = "chat") -> types.InlineKeyboardMarkup:
        """üé≠ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–∂–∏–º–æ–≤ –æ–±—â–µ–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        modes = [
            ("chat", "üí¨ –î—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ"),
            ("flirt", "üòò –§–ª–∏—Ä—Ç"),
            ("sexting", "üîû –°–µ–∫—Å—Ç–∏–Ω–≥")
        ]
        
        for mode, description in modes:
            marker = "üéØ " if mode == current_mode else ""
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{marker}{description}", 
                    callback_data=f"ui_mode_set_{mode}"
                )
            )
        
        keyboard.add(
            types.InlineKeyboardButton(
                f"{self.EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data="ui_settings"
            )
        )
        
        return keyboard
    
    def handle_callback(self, call: types.CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç UI callback'–∏"""
        if not call.data.startswith("ui_"):
            return False
        
        try:
            user_id = call.from_user.id
            action = call.data[3:]  # –£–±–∏—Ä–∞–µ–º "ui_"
            
            logger.info(f"UI callback: {action} from user {user_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action in ["main_menu", "start_chat", "flirt_mode"]:
                self.set_user_state(user_id, UIState.MAIN_MENU)
            elif action.startswith("admin"):
                self.set_user_state(user_id, UIState.ADMIN_PANEL)
            elif action in ["upgrade_menu", "buy_premium", "buy_vip", "buy_ultimate"]:
                self.set_user_state(user_id, UIState.PREMIUM_MENU)
            elif action == "settings":
                self.set_user_state(user_id, UIState.SETTINGS)
            
            return True
            
        except Exception as e:
            logger.error(f"Error handling UI callback: {str(e)}", exc_info=True)
            return False
    
    def get_context_keyboard(self, user_id: int, context: str = "") -> types.InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = self.get_user_state(user_id)
        
        if state == UIState.ADMIN_PANEL:
            return self.create_admin_keyboard()
        elif state == UIState.PREMIUM_MENU:
            return self.create_premium_keyboard()
        elif state == UIState.SETTINGS:
            return self.create_settings_keyboard()
        elif state == UIState.CHAT_MODE:
            return self.create_chat_keyboard()
        else:
            return self.create_main_menu_keyboard()
    
    def store_keyboard(self, user_id: int, keyboard: types.InlineKeyboardMarkup):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.active_keyboards[user_id] = keyboard
    
    def get_stored_keyboard(self, user_id: int) -> Optional[types.InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.active_keyboards.get(user_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
ui_manager = UIManager()

# Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """Legacy —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        types.KeyboardButton('üíù –§–ª–∏—Ä—Ç'),
        types.KeyboardButton('üéÅ –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'),
        types.KeyboardButton('üåü –ß–∞–µ–≤—ã–µ'),
        types.KeyboardButton('üë• –ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏'),
        types.KeyboardButton('‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )
    return keyboard

def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> types.InlineKeyboardMarkup:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    keyboard = types.InlineKeyboardMarkup()
    
    for row in buttons:
        button_row = []
        for button in row:
            button_row.append(
                types.InlineKeyboardButton(
                    button['text'], 
                    callback_data=button['callback']
                )
            )
        keyboard.add(*button_row)
    
    return keyboard 