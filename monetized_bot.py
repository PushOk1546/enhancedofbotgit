"""
Monetized OF Bot - Revenue Focused Implementation
Integrates premium system, caching, adult templates, and Telegram Stars/TON payments
ENHANCED WITH STUNNING UI AND FULL CALLBACK HANDLING
"""

import telebot
import os
import random
from datetime import datetime
from typing import Optional
import time

# Import our monetization modules
from premium_system import premium_manager, SubscriptionTier
from adult_templates import template_manager, ExplicitnessLevel, ContentMode
from response_cache import response_cache, CacheType
from telegram_payment_system import setup_telegram_payment_system

# –ò–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
from admin_commands import setup_admin_commands

# Bot configuration
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
GROQ_KEY = os.getenv('GROQ_KEY', 'YOUR_GROQ_KEY_HERE')

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

class MonetizedBot:
    def __init__(self):
        self.bot = bot
        self.payment_handler = setup_telegram_payment_system(bot)
        
        # Revenue optimization settings
        self.template_usage_ratio = 0.85  # 85% templates, 15% AI for cost reduction
        self.conversion_trigger_threshold = 0.8  # Trigger upsells at 80% message limit
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
        self.admin_handler = setup_admin_commands(self.bot)
        print("‚úÖ Admin commands initialized")
        
        # Setup handlers
        self.setup_handlers()
        
        # Optimize cache for cost reduction
        response_cache.optimize_for_cost_reduction()

    def setup_handlers(self):
        """Setup all bot command and message handlers"""
        
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.handle_start_command(message)
        
        @self.bot.message_handler(commands=['status'])
        def handle_status(message):
            self.handle_status_command(message)
        
        @self.bot.message_handler(commands=['menu'])
        def handle_menu(message):
            self.show_main_menu(message)
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self.show_help_menu(message)
        
        @self.bot.message_handler(commands=['cache_stats'])
        def handle_cache_stats(message):
            if self.payment_handler.is_admin(message.from_user.id):
                self.show_cache_statistics(message)
        
        # üî• –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERIES
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_all_callbacks(call):
            self.handle_callback_query(call)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            self.handle_user_message(message)

    def handle_callback_query(self, call):
        """üî• –ü–û–õ–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• CALLBACK QUERIES"""
        try:
            # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            self.bot.answer_callback_query(call.id)
            
            data = call.data
            
            # =============== PAYMENT & UPGRADE HANDLERS ===============
            if data == "payment_upgrade":
                self.show_payment_options(call.message)
            elif data == "payment_pricing":
                self.show_detailed_pricing(call.message)
            elif data == "show_status":
                self.show_user_status_detailed(call.message)
            elif data.startswith("payment_"):
                self.payment_handler.process_payment_callback(call)
            
            # =============== MAIN MENU HANDLERS ===============
            elif data == "main_menu":
                self.show_main_menu(call.message)
            elif data == "user_profile":
                self.show_user_profile(call.message)
            elif data == "premium_benefits":
                self.show_premium_benefits(call.message)
            elif data == "help_support":
                self.show_help_menu(call.message)
            elif data == "settings":
                self.show_settings_menu(call.message)
            
            # =============== CHAT & INTERACTION HANDLERS ===============
            elif data == "start_chatting":
                self.handle_start_chatting(call.message)
            elif data == "content_menu":
                self.show_content_menu(call.message)
            elif data == "flirt_mode":
                self.activate_flirt_mode(call.message)
            elif data == "role_play":
                self.show_roleplay_menu(call.message)
            elif data == "sexy_chat":
                self.activate_sexy_chat(call.message)
            elif data == "custom_request":
                self.show_custom_request_menu(call.message)
            
            # =============== ROLEPLAY HANDLERS ===============
            elif data.startswith("roleplay_"):
                roleplay_type = data.replace("roleplay_", "")
                self.handle_roleplay_callbacks(call, roleplay_type)
            
            # =============== SETTINGS HANDLERS ===============
            elif data.startswith("explicitness_"):
                level = data.replace("explicitness_", "")
                self.set_explicitness_level(call.message, level)
            elif data.startswith("language_"):
                lang = data.replace("language_", "")
                self.set_language(call.message, lang)
            
            # =============== ADMIN HANDLERS ===============
            elif data.startswith("admin_"):
                if self.payment_handler.is_admin(call.from_user.id):
                    self.handle_admin_callback(call)
                else:
                    self.bot.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", call.message.chat.id, call.message.message_id)
            
            # =============== EASTER EGGS & FUN ===============
            elif data == "surprise_me":
                self.surprise_user(call.message)
            elif data == "daily_bonus":
                self.claim_daily_bonus(call.message)
            elif data == "share_bot":
                self.share_bot_menu(call.message)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                self.bot.edit_message_text(
                    "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                    call.message.chat.id, 
                    call.message.message_id,
                    reply_markup=self.create_main_menu_keyboard()
                )
                
        except Exception as e:
            print(f"Callback error: {e}")
            try:
                self.bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    def handle_start_command(self, message):
        """üî• –ù–ï–í–ï–†–û–Ø–¢–ù–´–ô –°–¢–ê–†–¢–û–í–´–ô –≠–ö–†–ê–ù"""
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "–∫—Ä–∞—Å–∞–≤—á–∏–∫"
        
        # Get or create user subscription (automatic free trial)
        user_sub = premium_manager.get_user_subscription(user_id)
        
        # üé≠ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_animation = [
            "üåü", "‚ú®", "üí´", "‚≠ê", "üåü", "‚ú®", "üíé"
        ]
        
        animation_msg = self.bot.send_message(message.chat.id, "üåü –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∏—é...")
        
        for emoji in welcome_animation:
            time.sleep(0.3)
            try:
                self.bot.edit_message_text(f"{emoji} –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –æ–ø—ã—Ç...", 
                                         message.chat.id, animation_msg.message_id)
            except:
                pass
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = f"""
üî•‚ú® **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í PREMIUM PARADISE** ‚ú®üî•

–ü—Ä–∏–≤–µ—Ç, {user_name}! üòòüíã

üéÅ **–¢–í–û–ô –ë–ï–°–ü–õ–ê–¢–ù–´–ô –°–¢–ê–†–¢:**
‚îå‚îÄ üÜì 50 —Å–æ–æ–±—â–µ–Ω–∏–π –ë–ï–°–ü–õ–ê–¢–ù–û
‚îú‚îÄ üìÖ 7 –¥–Ω–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞  
‚îú‚îÄ üîû –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚îî‚îÄ üíé –ü—Ä–µ–º–∏—É–º –æ–ø—ã—Ç

üåà **–ë–ï–ó–ì–†–ê–ù–ò–ß–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚≠ê **PREMIUM** ‚Ä¢ 500 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Ä¢ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Ä¢ ‚≠ê150 Stars
üíé **VIP** ‚Ä¢ 2000 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Ä¢ –§–µ—Ç–∏—à –∫–æ–Ω—Ç–µ–Ω—Ç ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ä¢ ‚≠ê250 Stars  
üëë **ULTIMATE** ‚Ä¢ 10,000 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Ä¢ VIP –¥–æ—Å—Ç—É–ø ‚Ä¢ ‚≠ê500 Stars

üéØ **–ß–¢–û –¢–ï–ë–Ø –ñ–î–ï–¢:**
‚Ä¢ üî• –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ üé≠ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ üíã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º —Ñ–µ—Ç–∏—à –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üåü –î–æ—Å—Ç—É–ø –∫–æ –º–Ω–µ 24/7

üí≥ **–ú–ì–ù–û–í–ï–ù–ù–ê–Ø –û–ü–õ–ê–¢–ê:**
‚≠ê Telegram Stars (1 –∫–ª–∏–∫!)
üíé TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (+5% –±–æ–Ω—É—Å!)

–ì–æ—Ç–æ–≤ –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é? üòàüíï
        """
        
        markup = self.create_start_menu_keyboard()
        
        self.bot.edit_message_text(welcome_msg, message.chat.id, animation_msg.message_id, 
                                 reply_markup=markup, parse_mode='Markdown')

    def create_start_menu_keyboard(self):
        """üé® –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        
        # –ì–ª–∞–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏)
        markup.add(
            telebot.types.InlineKeyboardButton("üöÄ –ù–ê–ß–ê–¢–¨ –ß–ê–¢", callback_data="start_chatting"),
            telebot.types.InlineKeyboardButton("üíé –ê–ü–ì–†–ï–ô–î", callback_data="payment_upgrade")
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="show_status"),
            telebot.types.InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data="payment_pricing")
        )
        
        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_support")
        )
        
        return markup

    def create_main_menu_keyboard(self):
        """üé® –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üí¨ –û–±—â–µ–Ω–∏–µ", callback_data="start_chatting"),
            telebot.types.InlineKeyboardButton("üîû –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content_menu")
        )
        
        markup.add(
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", callback_data="role_play"),
            telebot.types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="surprise_me"),
            telebot.types.InlineKeyboardButton("üéØ –î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å", callback_data="daily_bonus")
        )
        
        # –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        markup.add(
            telebot.types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_support"),
            telebot.types.InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_bot")
        )
        
        return markup

    def show_main_menu(self, message):
        """üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        tier_emoji = {
            SubscriptionTier.FREE_TRIAL: "üÜì",
            SubscriptionTier.PREMIUM: "‚≠ê",
            SubscriptionTier.VIP: "üíé", 
            SubscriptionTier.ULTIMATE: "üëë"
        }
        
        menu_msg = f"""
üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üè†

{tier_emoji[user_sub.tier]} **–°—Ç–∞—Ç—É—Å:** {user_sub.tier.value.replace('_', ' ').title()}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å:** {user_sub.messages_limit - user_sub.messages_used:,}
üìÖ **–ê–∫—Ç–∏–≤–Ω–æ –¥–æ:** {user_sub.subscription_end.strftime('%d.%m.%Y')}

üåü **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        markup = self.create_main_menu_keyboard()
        
        if hasattr(message, 'message_id'):
            # –ï—Å–ª–∏ —ç—Ç–æ callback query
            self.bot.edit_message_text(menu_msg, message.chat.id, message.message_id, 
                                     reply_markup=markup, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(message.chat.id, menu_msg, 
                                reply_markup=markup, parse_mode='Markdown')

    def show_content_menu(self, message):
        """üîû –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        
        if user_sub.tier == SubscriptionTier.FREE_TRIAL:
            markup.add(
                telebot.types.InlineKeyboardButton("üòò –õ–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç", callback_data="flirt_mode"),
                telebot.types.InlineKeyboardButton("üîí –ü—Ä–µ–º–∏—É–º (–∞–ø–≥—Ä–µ–π–¥)", callback_data="payment_upgrade")
            )
        else:
            markup.add(
                telebot.types.InlineKeyboardButton("üòò –§–ª–∏—Ä—Ç", callback_data="flirt_mode"),
                telebot.types.InlineKeyboardButton("üî• –°–µ–∫—Å–∏ —á–∞—Ç", callback_data="sexy_chat")
            )
            
            if user_sub.tier in [SubscriptionTier.VIP, SubscriptionTier.ULTIMATE]:
                markup.add(
                    telebot.types.InlineKeyboardButton("üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", callback_data="role_play"),
                    telebot.types.InlineKeyboardButton("üíé VIP –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="vip_content")
                )
            
            if user_sub.tier == SubscriptionTier.ULTIMATE:
                markup.add(
                    telebot.types.InlineKeyboardButton("üëë –≠–∫—Å—Ç—Ä–∏–º", callback_data="extreme_content"),
                    telebot.types.InlineKeyboardButton("üéØ –ö–∞—Å—Ç–æ–º", callback_data="custom_request")
                )
        
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        content_msg = f"""
üîû **–ö–û–ù–¢–ï–ù–¢ –ú–ï–ù–Æ** üîû

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {user_sub.tier.value.replace('_', ' ').title()}:**

{self.get_content_description(user_sub.tier)}

üí° **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
        """
        
        self.bot.edit_message_text(content_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def get_content_description(self, tier):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        descriptions = {
            SubscriptionTier.FREE_TRIAL: """
üÜì **FREE TRIAL:**
‚Ä¢ –õ–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç –∏ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            """,
            SubscriptionTier.PREMIUM: """
‚≠ê **PREMIUM:**
‚Ä¢ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ –°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏
‚Ä¢ –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã
            """,
            SubscriptionTier.VIP: """
üíé **VIP:**
‚Ä¢ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Premium
‚Ä¢ –§–µ—Ç–∏—à –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            """,
            SubscriptionTier.ULTIMATE: """
üëë **ULTIMATE:**
‚Ä¢ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ 24/7
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            """
        }
        return descriptions.get(tier, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    def show_user_status_detailed(self, message):
        """üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
        status_msg = premium_manager.get_user_status_message(user_id)
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_status")
        )
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        self.bot.edit_message_text(status_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def show_help_menu(self, message):
        """‚ùì –ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
        help_msg = """
‚ùì **–ü–û–ú–û–©–¨ –ò –ü–û–î–î–ï–†–ñ–ö–ê** ‚ùì

üî∏ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å —á–∞—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –ü–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ
3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º!

üî∏ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ üÜì Free Trial: 50 —Å–æ–æ–±—â–µ–Ω–∏–π, 7 –¥–Ω–µ–π
‚Ä¢ ‚≠ê Premium: 500 —Å–æ–æ–±—â–µ–Ω–∏–π + –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üíé VIP: 2000 —Å–æ–æ–±—â–µ–Ω–∏–π + —Ñ–µ—Ç–∏—à + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ üëë Ultimate: 10000 —Å–æ–æ–±—â–µ–Ω–∏–π + —ç–∫—Å—Ç—Ä–∏–º + VIP

üî∏ **–û–ø–ª–∞—Ç–∞:**
‚Ä¢ ‚≠ê Telegram Stars - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
‚Ä¢ üíé TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ - —Å –±–æ–Ω—É—Å–æ–º

üî∏ **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –í–∞—à —Å—Ç–∞—Ç—É—Å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üî∏ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data="payment_pricing"),
            telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")
        )
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        if hasattr(message, 'message_id'):
            self.bot.edit_message_text(help_msg, message.chat.id, message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        else:
            self.bot.send_message(message.chat.id, help_msg,
                                reply_markup=markup, parse_mode='Markdown')

    def surprise_user(self, message):
        """üéÅ –°—é—Ä–ø—Ä–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        surprises = [
            ("üéÅ –ë–æ–Ω—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", "–ü–æ–ª—É—á–∏—Ç–µ 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–°–ü–õ–ê–¢–ù–û!"),
            ("üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!", "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!"),
            ("üíé VIP –º–æ–º–µ–Ω—Ç!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ VIP –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"),
            ("üî• –ì–æ—Ä—è—á–∏–π —Å—é—Ä–ø—Ä–∏–∑!", "–û—Å–æ–±–µ–Ω–Ω–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å!"),
            ("üíã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!")
        ]
        
        surprise_title, surprise_content = random.choice(surprises)
        
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        if user_sub.messages_used < user_sub.messages_limit:
            # –î–∞—Ä–∏–º –±–æ–Ω—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            premium_manager.use_message(message.from_user.id)
            
            surprise_msg = f"""
üéâ **{surprise_title}** üéâ

{surprise_content}

üéÅ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑:**
{template_manager.get_template(
    self.determine_explicitness_level(user_sub.tier),
    ContentMode.FLIRT,
    user_sub.tier != SubscriptionTier.FREE_TRIAL
)}

üíù –°—é—Ä–ø—Ä–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏–º–∏—Ç–∞
            """
        else:
            surprise_msg = f"""
üéÅ **–°–Æ–†–ü–†–ò–ó –î–õ–Ø –í–ê–°!** üéÅ

{surprise_content}

‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å—é—Ä–ø—Ä–∏–∑ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–ª—è –≤–∞—Å!
üíé –ê–ø–≥—Ä–µ–π–¥–∏—Ç–µ—Å—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—é—Ä–ø—Ä–∏–∑–æ–≤!
            """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üéÅ –ï—â–µ —Å—é—Ä–ø—Ä–∏–∑!", callback_data="surprise_me"),
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade")
        )
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        self.bot.edit_message_text(surprise_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def handle_user_message(self, message):
        """Handle user messages with premium system integration"""
        user_id = message.from_user.id
        user_input = message.text
        
        # Check if user can send messages
        can_send, reason = premium_manager.can_send_message(user_id)
        
        if not can_send:
            self.handle_message_limit_reached(message, reason)
            return
        
        # Use message from quota
        premium_manager.use_message(user_id)
        
        # Generate response with cost optimization
        response = self.generate_optimized_response(message)
        
        # Check if we should trigger conversion
        self.check_conversion_trigger(message)
        
        # Send response
        self.bot.reply_to(message, response, parse_mode='Markdown')

    def generate_optimized_response(self, message) -> str:
        """Generate response using cache and templates for cost optimization"""
        user_id = message.from_user.id
        user_input = message.text
        user_sub = premium_manager.get_user_subscription(user_id)
        
        # Determine content settings
        explicitness_level = self.determine_explicitness_level(user_sub.tier)
        content_mode = self.determine_content_mode(user_input)
        
        # Try cache first (80% cost reduction target)
        cached_response = response_cache.get_cached_response(
            user_input, 
            user_sub.tier.value,
            explicitness_level.value,
            content_mode.value
        )
        
        if cached_response:
            return cached_response
        
        # Use template-based response (85% of the time for cost optimization)
        if random.random() < self.template_usage_ratio:
            response = self.generate_template_response(user_sub, explicitness_level, content_mode, user_input)
            cache_type = CacheType.TEMPLATE
        else:
            # Use AI response (15% of the time)
            response = self.generate_ai_response(user_input, user_sub, explicitness_level)
            cache_type = CacheType.AI_RESPONSE
        
        # Cache the response for future use
        response_cache.cache_response(
            user_input,
            response,
            user_sub.tier.value,
            explicitness_level.value,
            content_mode.value,
            cache_type
        )
        
        return response

    def generate_template_response(self, user_sub, explicitness_level, content_mode, user_input) -> str:
        """Generate template-based response"""
        is_premium = user_sub.tier != SubscriptionTier.FREE_TRIAL
        
        # Check if approaching limit for conversion trigger
        usage_ratio = user_sub.messages_used / user_sub.messages_limit
        force_conversion = usage_ratio >= self.conversion_trigger_threshold
        
        return template_manager.get_template(
            explicitness_level, 
            content_mode, 
            is_premium, 
            force_conversion
        )

    def generate_ai_response(self, user_input: str, user_sub, explicitness_level) -> str:
        """Generate AI response (fallback when templates aren't enough)"""
        # This would integrate with Groq API or other AI service
        # For now, return a template-based fallback to save costs
        return template_manager.get_template(
            explicitness_level,
            ContentMode.CHAT,
            user_sub.tier != SubscriptionTier.FREE_TRIAL
        )

    def determine_explicitness_level(self, tier: SubscriptionTier) -> ExplicitnessLevel:
        """Determine content explicitness based on user tier"""
        if tier == SubscriptionTier.FREE_TRIAL:
            return ExplicitnessLevel.SOFT
        elif tier == SubscriptionTier.PREMIUM:
            return ExplicitnessLevel.MEDIUM
        elif tier == SubscriptionTier.VIP:
            return ExplicitnessLevel.EXPLICIT
        elif tier == SubscriptionTier.ULTIMATE:
            return ExplicitnessLevel.EXTREME
        else:
            return ExplicitnessLevel.SOFT

    def determine_content_mode(self, user_input: str) -> ContentMode:
        """Determine content mode based on user input"""
        user_input_lower = user_input.lower()
        
        # Sexual keywords trigger sexting mode
        sexual_keywords = ['fuck', 'sex', 'pussy', 'cock', 'cum', 'horny', 'wet', 'hard', '—Ç—Ä–∞—Ö–∞—Ç—å', '—Å–µ–∫—Å', '–∫–∏—Å–∫–∞', '—á–ª–µ–Ω', '–∫–æ–Ω—á–∞—Ç—å', '–≤–æ–∑–±—É–∂–¥–µ–Ω']
        if any(keyword in user_input_lower for keyword in sexual_keywords):
            return ContentMode.SEXTING
        
        # Flirty keywords trigger flirt mode
        flirt_keywords = ['sexy', 'beautiful', 'hot', 'want', 'desire', 'love', '—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è', '–∫—Ä–∞—Å–∏–≤–∞—è', '–≥–æ—Ä—è—á–∞—è', '—Ö–æ—á—É', '–∂–µ–ª–∞–Ω–∏–µ', '–ª—é–±–ª—é']
        if any(keyword in user_input_lower for keyword in flirt_keywords):
            return ContentMode.FLIRT
        
        return ContentMode.CHAT

    def handle_message_limit_reached(self, message, reason: str):
        """Handle when user reaches message limit"""
        if reason == "message_limit_reached":
            limit_msg = """
üö´ **–õ–ò–ú–ò–¢ –°–û–û–ë–©–ï–ù–ò–ô –î–û–°–¢–ò–ì–ù–£–¢** üö´

–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥! 

üî• **–ê–ü–ì–†–ï–ô–î –°–ï–ô–ß–ê–° –î–õ–Ø –ë–ï–ó–õ–ò–ú–ò–¢–ù–û–ì–û –î–û–°–¢–£–ü–ê:**
‚≠ê PREMIUM: 500 —Å–æ–æ–±—â–µ–Ω–∏–π (‚≠ê150 Stars)
üíé VIP: 2000 —Å–æ–æ–±—â–µ–Ω–∏–π (‚≠ê250 Stars)
üëë ULTIMATE: 10,000 —Å–æ–æ–±—â–µ–Ω–∏–π (‚≠ê500 Stars)

üí≥ **–ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø:**
‚≠ê Telegram Stars: –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
üíé TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: +5% –±–æ–Ω—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üîê –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!

–ù–µ —É–ø—É—Å–∫–∞–π –Ω–∞—à –≥–æ—Ä—è—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç! üî•
            """
        else:  # subscription_expired
            limit_msg = """
‚è∞ **–ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–õ–ê** ‚è∞

–í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! 

üéÅ **–ü–†–û–î–õ–ò–¢–¨ –°–ï–ô–ß–ê–°:**
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 20% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

üíé **–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ù–ê –ü–†–û–î–õ–ï–ù–ò–ï:**
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã: –°–ö–ò–î–ö–ê 30%
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã: –°–ö–ò–î–ö–ê 50%
‚Ä¢ TON –ø–ª–∞—Ç–µ–∂–∏: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 5% –±–æ–Ω—É—Å–∞

–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è? üòà
            """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üí∞ –ê–ü–ì–†–ï–ô–î –°–ï–ô–ß–ê–°", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("üî• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã", callback_data="payment_pricing")
        )
        
        self.bot.send_message(message.chat.id, limit_msg, reply_markup=markup, parse_mode='Markdown')

    def check_conversion_trigger(self, message):
        """Check if we should trigger conversion messaging"""
        user_id = message.from_user.id
        user_sub = premium_manager.get_user_subscription(user_id)
        
        usage_ratio = user_sub.messages_used / user_sub.messages_limit
        
        # Trigger at 50%, 80%, and 95% usage
        if usage_ratio >= 0.95:
            conversion_msg = "üö® –ü–û–°–õ–ï–î–ù–ò–ï 5% –°–û–û–ë–©–ï–ù–ò–ô! –ê–ø–≥—Ä–µ–π–¥ –°–ï–ô–ß–ê–°: /payment üö®"
        elif usage_ratio >= 0.80:
            conversion_msg = "‚ö†Ô∏è 80% —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ! –ù–µ –¥–∞–π —Å–µ–±–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è - –∞–ø–≥—Ä–µ–π–¥: /payment üíé"
        elif usage_ratio >= 0.50:
            conversion_msg = "üìä –ü–æ–ª–æ–≤–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞! –ê–ø–≥—Ä–µ–π–¥ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: /payment ‚≠ê"
        else:
            return
        
        # Send conversion message
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("üí∞ –ê–ü–ì–†–ï–ô–î", callback_data="payment_upgrade"))
        
        self.bot.send_message(message.chat.id, conversion_msg, reply_markup=markup)

    def show_cache_statistics(self, message):
        """Show cache statistics for admin"""
        stats = response_cache.get_cache_stats()
        
        stats_msg = f"""
üìä **CACHE PERFORMANCE** üìä

üíæ **CACHE STATS:**
‚Ä¢ Total Entries: {stats['total_cache_entries']}
‚Ä¢ Hit Rate: {stats['cache_hit_rate']}
‚Ä¢ Total Requests: {stats['total_requests']}
‚Ä¢ API Calls Saved: {stats['api_calls_saved']}

üí∞ **COST SAVINGS:**
‚Ä¢ Total Saved: {stats['cost_saved_usd']}
‚Ä¢ Monthly Projection: {stats['estimated_monthly_savings']}
‚Ä¢ Efficiency: {stats['cache_efficiency']}

üìà **CACHE DISTRIBUTION:**
{self.format_distribution(stats['cache_distribution'])}

üéØ **TIER DISTRIBUTION:**
{self.format_distribution(stats['tier_distribution'])}
        """
        
        self.bot.send_message(message.chat.id, stats_msg, parse_mode='Markdown')

    def format_distribution(self, distribution: dict) -> str:
        """Format distribution data for display"""
        if not distribution:
            return "No data available"
        
        lines = []
        for key, value in distribution.items():
            lines.append(f"‚Ä¢ {key}: {value}")
        
        return "\n".join(lines)

    def run(self):
        """Start the monetized bot"""
        print("üî• Monetized OF Bot starting...")
        print("üí∞ Premium system: ACTIVE")
        print("‚≠ê Telegram Stars payment: INTEGRATED")
        print("üíé TON cryptocurrency: SUPPORTED")
        print("üíæ Response caching: OPTIMIZED for 80% cost reduction")
        print("üîû Adult templates: LOADED")
        print("üí≥ Payment system: READY")
        
        try:
            self.bot.polling(none_stop=True)
        except Exception as e:
            print(f"Bot error: {e}")
            # Restart bot automatically
            self.run()

    def handle_status_command(self, message):
        """Show user status and upsell opportunities"""
        user_id = message.from_user.id
        status_msg = premium_manager.get_user_status_message(user_id)
        
        # Add upsell if appropriate
        user_sub = premium_manager.get_user_subscription(user_id)
        if user_sub.tier != SubscriptionTier.ULTIMATE:
            upsell_msg = template_manager.get_upsell_message(user_sub.tier.value)
            status_msg += f"\n\n{upsell_msg}"
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üí∞ –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        self.bot.send_message(message.chat.id, status_msg, reply_markup=markup, parse_mode='Markdown')

    def show_payment_options(self, message):
        """üí∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        payment_msg = f"""
üíé **–ü–†–ï–ú–ò–£–ú –ê–ü–ì–†–ï–ô–î** üíé

üî• **–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:** {user_sub.tier.value.replace('_', ' ').title()}
üí¨ **–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π:** {user_sub.messages_limit - user_sub.messages_used:,}

üåü **–í–´–ë–ï–†–ò–¢–ï –í–ê–® –ü–õ–ê–ù:**

‚≠ê **PREMIUM** - ‚≠ê150 Stars
‚Ä¢ 500 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–ª–æ–≥–∏

üíé **VIP** - ‚≠ê250 Stars  
‚Ä¢ 2000 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –§–µ—Ç–∏—à –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

üëë **ULTIMATE** - ‚≠ê500 Stars
‚Ä¢ 10,000 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ 24/7
‚Ä¢ –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏

üí≥ **–°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´:**
‚≠ê Telegram Stars (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
üíé TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (+5% –±–æ–Ω—É—Å)
        """
        
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
        if user_sub.tier != SubscriptionTier.PREMIUM:
            markup.add(telebot.types.InlineKeyboardButton("‚≠ê PREMIUM –∑–∞ ‚≠ê150 Stars", callback_data="payment_premium_daily_stars"))
        if user_sub.tier != SubscriptionTier.VIP:
            markup.add(telebot.types.InlineKeyboardButton("üíé VIP –∑–∞ ‚≠ê250 Stars", callback_data="payment_vip_daily_stars"))
        if user_sub.tier != SubscriptionTier.ULTIMATE:
            markup.add(telebot.types.InlineKeyboardButton("üëë ULTIMATE –∑–∞ ‚≠ê500 Stars", callback_data="payment_ultimate_daily_stars"))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã (—Å–∫–∏–¥–∫–∞ 20%)", callback_data="payment_weekly_options"),
            telebot.types.InlineKeyboardButton("üìÖ –ú–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã (—Å–∫–∏–¥–∫–∞ 50%)", callback_data="payment_monthly_options")
        )
        
        markup.add(
            telebot.types.InlineKeyboardButton("üíé TON –ø–ª–∞—Ç–µ–∂–∏", callback_data="payment_method_ton"),
            telebot.types.InlineKeyboardButton("üí∞ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ü–µ–Ω—ã", callback_data="payment_pricing")
        )
        
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        if hasattr(message, 'message_id'):
            self.bot.edit_message_text(payment_msg, message.chat.id, message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        else:
            self.bot.send_message(message.chat.id, payment_msg,
                                reply_markup=markup, parse_mode='Markdown')

    def show_detailed_pricing(self, message):
        """üí∞ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã"""
        pricing_msg = """
üí∞ **–ü–û–î–†–û–ë–ù–´–ï –¶–ï–ù–´** üí∞

‚≠ê **TELEGRAM STARS:**

**‚≠ê PREMIUM**
‚Ä¢ –î–µ–Ω—å: ‚≠ê150 Stars
‚Ä¢ –ù–µ–¥–µ–ª—è: ‚≠ê750 Stars (20% —Å–∫–∏–¥–∫–∞)
‚Ä¢ –ú–µ—Å—è—Ü: ‚≠ê2000 Stars (50% —Å–∫–∏–¥–∫–∞)

**üíé VIP**
‚Ä¢ –î–µ–Ω—å: ‚≠ê250 Stars
‚Ä¢ –ù–µ–¥–µ–ª—è: ‚≠ê1250 Stars (20% —Å–∫–∏–¥–∫–∞)  
‚Ä¢ –ú–µ—Å—è—Ü: ‚≠ê3500 Stars (50% —Å–∫–∏–¥–∫–∞)

**üëë ULTIMATE**
‚Ä¢ –î–µ–Ω—å: ‚≠ê500 Stars
‚Ä¢ –ù–µ–¥–µ–ª—è: ‚≠ê2500 Stars (20% —Å–∫–∏–¥–∫–∞)
‚Ä¢ –ú–µ—Å—è—Ü: ‚≠ê6500 Stars (50% —Å–∫–∏–¥–∫–∞)

üíé **TON CRYPTO (+ 5% –±–æ–Ω—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞):**

**‚≠ê PREMIUM:** 1.2 / 6.0 / 16.0 TON
**üíé VIP:** 2.0 / 10.0 / 28.0 TON  
**üëë ULTIMATE:** 4.0 / 20.0 / 52.0 TON

üéÅ **–ë–û–ù–£–°–´:**
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 20% —Å–∫–∏–¥–∫–∞
‚Ä¢ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 50% —Å–∫–∏–¥–∫–∞
‚Ä¢ TON –ø–ª–∞—Ç–µ–∂–∏: +5% —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: —Å–∫–æ—Ä–æ
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("‚≠ê Stars –ø–ª–∞—Ç–µ–∂", callback_data="payment_method_stars")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üíé TON –ø–ª–∞—Ç–µ–∂", callback_data="payment_method_ton"),
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        if hasattr(message, 'message_id'):
            self.bot.edit_message_text(pricing_msg, message.chat.id, message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        else:
            self.bot.send_message(message.chat.id, pricing_msg,
                                reply_markup=markup, parse_mode='Markdown')

    # =============== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï CALLBACK HANDLERS ===============
    
    def activate_flirt_mode(self, message):
        """üòò –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ñ–ª–∏—Ä—Ç–∞"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        if user_sub.messages_used >= user_sub.messages_limit:
            self.handle_message_limit_reached(message, "message_limit_reached")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        premium_manager.use_message(message.from_user.id)
        
        explicitness = self.determine_explicitness_level(user_sub.tier)
        flirt_response = template_manager.get_template(explicitness, ContentMode.FLIRT, 
                                                     user_sub.tier != SubscriptionTier.FREE_TRIAL)
        
        flirt_msg = f"""
üòò **–†–ï–ñ–ò–ú –§–õ–ò–†–¢–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù** üòò

üíã {flirt_response}

üíï –†–µ–∂–∏–º —Ñ–ª–∏—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω! –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –∏–≥—Ä–∏–≤–æ–º —Å—Ç–∏–ª–µ.
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üíï –ë–æ–ª—å—à–µ —Ñ–ª–∏—Ä—Ç–∞", callback_data="flirt_mode"),
            telebot.types.InlineKeyboardButton("üî• –°–µ–∫—Å–∏ —á–∞—Ç", callback_data="sexy_chat")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu")
        )
        
        self.bot.edit_message_text(flirt_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def activate_sexy_chat(self, message):
        """üî• –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ–∫—Å–∏ —á–∞—Ç–∞"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        if user_sub.tier == SubscriptionTier.FREE_TRIAL:
            upgrade_msg = """
üîí **–°–ï–ö–°–ò –ß–ê–¢ - –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø** üîí

üî• –°–µ–∫—Å–∏ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

üíé **–ê–ø–≥—Ä–µ–π–¥–∏—Ç–µ—Å—å —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ –°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏  
‚Ä¢ –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã

‚≠ê –í—Å–µ–≥–æ –∑–∞ ‚≠ê150 Stars!
            """
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("üíé –ê–ü–ì–†–ï–ô–î –°–ï–ô–ß–ê–°", callback_data="payment_upgrade"),
                telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu")
            )
            
            self.bot.edit_message_text(upgrade_msg, message.chat.id, message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
            return
        
        if user_sub.messages_used >= user_sub.messages_limit:
            self.handle_message_limit_reached(message, "message_limit_reached")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        premium_manager.use_message(message.from_user.id)
        
        explicitness = self.determine_explicitness_level(user_sub.tier)
        sexy_response = template_manager.get_template(explicitness, ContentMode.SEXTING, True)
        
        sexy_msg = f"""
üî• **–°–ï–ö–°–ò –ß–ê–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù** üî•

üíã {sexy_response}

üî• –¢–µ–ø–µ—Ä—å –º—ã –≤ —Å–µ–∫—Å–∏ —Ä–µ–∂–∏–º–µ! –ì–æ—Ç–æ–≤ –∫ –≥–æ—Ä—è—á–µ–º—É –æ–±—â–µ–Ω–∏—é? üòà
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üî• –ï—â–µ –≥–æ—Ä—è—á–µ–µ", callback_data="sexy_chat"),
            telebot.types.InlineKeyboardButton("üé≠ –†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞", callback_data="role_play")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu")
        )
        
        self.bot.edit_message_text(sexy_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def show_roleplay_menu(self, message):
        """üé≠ –ú–µ–Ω—é —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        if user_sub.tier == SubscriptionTier.FREE_TRIAL:
            upgrade_msg = """
üîí **–†–û–õ–ï–í–´–ï –ò–ì–†–´ - –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø** üîí

üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞:**
‚Ä¢ –£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏ —É—á–µ–Ω–∏–∫
‚Ä¢ –ë–æ—Å—Å –∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä—à–∞  
‚Ä¢ –î–æ–∫—Ç–æ—Ä –∏ –ø–∞—Ü–∏–µ–Ω—Ç–∫–∞
‚Ä¢ –ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...

‚≠ê –ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ–≥–æ –∑–∞ ‚≠ê150 Stars!
            """
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("üíé –ê–ü–ì–†–ï–ô–î", callback_data="payment_upgrade"),
                telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu")
            )
        else:
            roleplay_msg = """
üé≠ **–†–û–õ–ï–í–´–ï –ò–ì–†–´** üé≠

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –Ω–∞—à–µ–π –∏–≥—Ä—ã:

üë©‚Äçüè´ **–£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞** - –°—Ç—Ä–æ–≥–∞—è, –Ω–æ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è
üë©‚Äçüíº **–°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞** - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω–∞—è  
üë©‚Äç‚öïÔ∏è **–ú–µ–¥—Å–µ—Å—Ç—Ä–∞** - –ó–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è
üíÜ‚Äç‚ôÄÔ∏è **–ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞** - –†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è
üë∏ **–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞** - –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –æ–±–æ–ª—å—â–µ–Ω–∏–µ
üòà **–î–µ–º–æ–Ω–µ—Å—Å–∞** - –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è

üéØ –ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π!
            """
            
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                telebot.types.InlineKeyboardButton("üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞", callback_data="roleplay_teacher"),
                telebot.types.InlineKeyboardButton("üë©‚Äçüíº –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞", callback_data="roleplay_secretary")
            )
            markup.add(
                telebot.types.InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –ú–µ–¥—Å–µ—Å—Ç—Ä–∞", callback_data="roleplay_nurse"),
                telebot.types.InlineKeyboardButton("üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞", callback_data="roleplay_massage")
            )
            markup.add(
                telebot.types.InlineKeyboardButton("üë∏ –ü—Ä–∏–Ω—Ü–µ—Å—Å–∞", callback_data="roleplay_princess"),
                telebot.types.InlineKeyboardButton("üòà –î–µ–º–æ–Ω–µ—Å—Å–∞", callback_data="roleplay_demon")
            )
            markup.add(
                telebot.types.InlineKeyboardButton("üéØ –°–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="custom_request"),
                telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu")
            )
        
        self.bot.edit_message_text(roleplay_msg if user_sub.tier != SubscriptionTier.FREE_TRIAL else upgrade_msg, 
                                 message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def show_custom_request_menu(self, message):
        """üéØ –ú–µ–Ω—é –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        custom_msg = f"""
üéØ **–ö–ê–°–¢–û–ú–ù–´–ï –ó–ê–ü–†–û–°–´** üéØ

üí° **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è {user_sub.tier.value.replace('_', ' ').title()}:**

üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –∏ —Ñ–∞–Ω—Ç–∞–∑–∏–∏, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!

üåü **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–æ–ª–µ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–µ—Ç–∏—à–∏ (VIP+)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏

‚úçÔ∏è **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!**

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏–º–∏—Ç–∞.
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="show_request_examples"),
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ", callback_data="payment_upgrade")
        )
        markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="content_menu"))
        
        self.bot.edit_message_text(custom_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def claim_daily_bonus(self, message):
        """üéØ –î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        today = datetime.now().strftime("%Y-%m-%d")
        
        bonus_msg = f"""
üéØ **–î–ù–ï–í–ù–û–ô –ë–û–ù–£–°** üéØ

üéÅ **–í–∞—à –±–æ–Ω—É—Å –∑–∞ {today}:**

üí¨ +5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!
‚≠ê –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è
üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—è

{template_manager.get_template(
    self.determine_explicitness_level(user_sub.tier),
    ContentMode.FLIRT,
    user_sub.tier != SubscriptionTier.FREE_TRIAL
)}

üíù –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        if user_sub.messages_used > 5:
            user_sub.messages_used -= 5
            premium_manager.save_users()
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üéÅ –°–ø–∞—Å–∏–±–æ!", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade")
        )
        
        self.bot.edit_message_text(bonus_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def share_bot_menu(self, message):
        """üì¢ –ú–µ–Ω—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"""
        share_msg = """
üì¢ **–ü–û–î–ï–õ–ò–¢–¨–°–Ø –ë–û–¢–û–ú** üì¢

üåü –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!

üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +50 –±–æ–Ω—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +25 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏ –∞–ø–≥—Ä–µ–π–¥–µ –¥—Ä—É–≥–∞: —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
`https://t.me/your_bot_name?start=ref_{message.from_user.id}`

üì± **–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:**
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ª—É—á—à–µ–º AI –∫–æ–º–ø–∞–Ω—å–æ–Ω–µ!

üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
                                             url=f"https://t.me/share/url?url=https://t.me/your_bot_name?start=ref_{message.from_user.id}&text=–ü–æ–ø—Ä–æ–±—É–π –ª—É—á—à–µ–≥–æ AI –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞!")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="show_referrals"),
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        self.bot.edit_message_text(share_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def handle_admin_callback(self, call):
        """‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callbacks"""
        data = call.data
        
        if data == "admin_users":
            self.admin_handler.show_users(call.message)
        elif data == "admin_revenue":
            self.admin_handler.show_revenue(call.message)
        elif data == "admin_stats":
            self.admin_handler.show_stats(call.message)
        elif data == "admin_health":
            self.admin_handler.health_check(call.message)
        else:
            self.bot.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                                     call.message.chat.id, call.message.message_id)

    # =============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï HANDLERS ===============
    
    def handle_start_chatting(self, message):
        """üöÄ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        if user_sub.messages_used >= user_sub.messages_limit:
            self.handle_message_limit_reached(message, "message_limit_reached")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        premium_manager.use_message(message.from_user.id)
        
        explicitness = self.determine_explicitness_level(user_sub.tier)
        chat_response = template_manager.get_template(explicitness, ContentMode.CHAT, 
                                                    user_sub.tier != SubscriptionTier.FREE_TRIAL)
        
        chat_msg = f"""
üöÄ **–û–ë–©–ï–ù–ò–ï –ù–ê–ß–ê–õ–û–°–¨!** üöÄ

üí¨ {chat_response}

üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ! –Ø –æ—Ç–≤–µ—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üíï –§–ª–∏—Ä—Ç —Ä–µ–∂–∏–º", callback_data="flirt_mode"),
            telebot.types.InlineKeyboardButton("üîû –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content_menu")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade")
        )
        
        self.bot.edit_message_text(chat_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def show_user_profile(self, message):
        """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
        user_sub = premium_manager.get_user_subscription(user_id)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days_active = (datetime.now() - user_sub.subscription_start).days
        messages_total = user_sub.messages_used
        money_spent = user_sub.total_paid
        
        profile_msg = f"""
üë§ **–í–ê–® –ü–†–û–§–ò–õ–¨** üë§

üÜî **ID:** {user_id}
üèÜ **–°—Ç–∞—Ç—É—Å:** {user_sub.tier.value.replace('_', ' ').title()}
üìÖ **–ê–∫—Ç–∏–≤–µ–Ω:** {days_active} –¥–Ω–µ–π
üí∞ **–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:** ${money_spent:.2f}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {messages_total:,}
üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {days_active}
üíé –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {user_sub.messages_limit:,}/–ø–µ—Ä–∏–æ–¥
üì± –û—Å—Ç–∞–ª–æ—Å—å: {user_sub.messages_limit - user_sub.messages_used:,}

üèÖ **–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:**
{"üåü –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if days_active > 7 else "üî∞ –ù–æ–≤–∏—á–æ–∫"}
{"üíé VIP –∫–ª–∏–µ–Ω—Ç" if money_spent > 50 else ""}
{"üëë –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if user_sub.tier != SubscriptionTier.FREE_TRIAL else ""}

‚è∞ **–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:** {user_sub.subscription_end.strftime('%d.%m.%Y %H:%M')}
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade"),
            telebot.types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å", callback_data="user_profile"),
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        self.bot.edit_message_text(profile_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def show_settings_menu(self, message):
        """‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_sub = premium_manager.get_user_subscription(message.from_user.id)
        
        settings_msg = f"""
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò** ‚öôÔ∏è

üéØ **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîû –≠–∫—Å–ø–ª–∏—Ü–∏—Ç–Ω–æ—Å—Ç—å: {self.determine_explicitness_level(user_sub.tier).value.title()}
üåê –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π 
üé≠ –†–µ–∂–∏–º: {user_sub.tier.value.replace('_', ' ').title()}

üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–ª–∏—Ü–∏—Ç–Ω–æ—Å—Ç–∏
        markup.add(
            telebot.types.InlineKeyboardButton("üîû –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="explicitness_settings"),
            telebot.types.InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="language_settings")
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ
        markup.add(
            telebot.types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings"),
            telebot.types.InlineKeyboardButton("üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", callback_data="ui_settings")
        )
        
        markup.add(
            telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")
        )
        
        self.bot.edit_message_text(settings_msg, message.chat.id, message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

    def handle_roleplay_callbacks(self, call, roleplay_type):
        """üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä"""
        user_sub = premium_manager.get_user_subscription(call.from_user.id)
        
        if user_sub.messages_used >= user_sub.messages_limit:
            self.handle_message_limit_reached(call.message, "message_limit_reached")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        premium_manager.use_message(call.from_user.id)
        
        roleplay_scenarios = {
            "teacher": {
                "title": "üë©‚Äçüè´ –°—Ç—Ä–æ–≥–∞—è –£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞",
                "intro": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π —É—Ä–æ–∫... –ù–∞–¥–µ—é—Å—å, –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Å–æ–±–æ–º—É –∑–∞–Ω—è—Ç–∏—é? üòè",
                "description": "–Ø –≤–∞—à–∞ —Å—Ç—Ä–æ–≥–∞—è, –Ω–æ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞. –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –æ—Å–æ–±—ã–π —É—Ä–æ–∫..."
            },
            "secretary": {
                "title": "üë©‚Äçüíº –†–∞–∑–≤—Ä–∞—Ç–Ω–∞—è –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞", 
                "intro": "–ë–æ—Å—Å, —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è... —á–∞—Å—Ç–Ω–æ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è? üíã",
                "description": "–Ø –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—à–∞, –≥–æ—Ç–æ–≤–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±—ã–µ –∑–∞–¥–∞–Ω–∏—è..."
            },
            "nurse": {
                "title": "üë©‚Äç‚öïÔ∏è –ò–≥—Ä–∏–≤–∞—è –ú–µ–¥—Å–µ—Å—Ç—Ä–∞",
                "intro": "–ü–∞—Ü–∏–µ–Ω—Ç, –ø–æ—Ä–∞ –Ω–∞ –æ—Å–º–æ—Ç—Ä... –î—É–º–∞—é, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–æ–±–æ–µ –ª–µ—á–µ–Ω–∏–µ üòò",
                "description": "–Ø –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –ª—É—á—à–µ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ..."
            },
            "massage": {
                "title": "üíÜ‚Äç‚ôÄÔ∏è –ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è –ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞",
                "intro": "–†–∞–∑–¥–µ–≤–∞–π—Ç–µ—Å—å –∏ –ª–æ–∂–∏—Ç–µ—Å—å... –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –º–∞—Å—Å–∞–∂ üî•",
                "description": "–ú–æ–∏ —Ä—É–∫–∏ —É–º–µ—é—Ç —Ç–≤–æ—Ä–∏—Ç—å —á—É–¥–µ—Å–∞..."
            },
            "princess": {
                "title": "üë∏ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –û–±–æ–ª—å—â–µ–Ω–∏–µ",
                "intro": "–ü–æ–¥–¥–∞–Ω–Ω—ã–π, –ø–æ–¥–æ–π–¥–∏ –∫–æ –º–Ω–µ –±–ª–∏–∂–µ... –£ –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –∂–µ–ª–∞–Ω–∏—è üëë",
                "description": "–Ø –∫–∞–ø—Ä–∏–∑–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞, –ø—Ä–∏–≤—ã–∫—à–∞—è –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —á—Ç–æ —Ö–æ—á—É..."
            },
            "demon": {
                "title": "üòà –°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è –î–µ–º–æ–Ω–µ—Å—Å–∞",
                "intro": "–°–º–µ—Ä—Ç–Ω—ã–π... –Ø —è–≤–∏–ª–∞—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ–∏ —Å–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è üî•üëπ",
                "description": "–Ø –¥–µ–º–æ–Ω–µ—Å—Å–∞ –∏–∑ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π..."
            }
        }
        
        scenario = roleplay_scenarios.get(roleplay_type, roleplay_scenarios["teacher"])
        
        roleplay_msg = f"""
üé≠ **–†–û–õ–ï–í–ê–Ø –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!** üé≠

{scenario['title']}

üíã {scenario['intro']}

üéØ **–°—Ü–µ–Ω–∞—Ä–∏–π:** {scenario['description']}

üí° –¢–µ–ø–µ—Ä—å –ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–∞–∫ –±—É–¥—Ç–æ —è –∏–≥—Ä–∞—é —ç—Ç—É —Ä–æ–ª—å! –í—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üé≠ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="role_play"),
            telebot.types.InlineKeyboardButton("üî• –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞—Å—Ç–∏", callback_data="sexy_chat")
        )
        markup.add(
            telebot.types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            telebot.types.InlineKeyboardButton("üíé –ê–ø–≥—Ä–µ–π–¥", callback_data="payment_upgrade")
        )
        
        self.bot.edit_message_text(roleplay_msg, call.message.chat.id, call.message.message_id,
                                 reply_markup=markup, parse_mode='Markdown')

# Initialize and run the monetized bot
if __name__ == "__main__":
    monetized_bot = MonetizedBot()
    monetized_bot.run() 