"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞.
"""

import logging
from datetime import datetime, timedelta
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from models import PPVReminder
from utils import (
    get_main_keyboard, get_model_keyboard, get_flirt_style_keyboard,
    get_relationship_stage_keyboard, get_survey_keyboard, parse_time_string,
    get_ppv_style_keyboard
)
from api import generate_groq_response
from config import (
    MODELS, FLIRT_STYLES, RELATIONSHIP_STAGES, SURVEY_STEPS, PPV_STYLES
)
from security import (
    admin_required, rate_limit_check, validate_user_input, secure_format_prompt,
    rate_limiter, ai_rate_limiter, log_security_event, security_stats
)

logger = logging.getLogger("bot_logger")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_manager = None

def set_state_manager(sm):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    global state_manager
    state_manager = sm

# === –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò ===

async def safe_send_message(bot: AsyncTeleBot, chat_id: int, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –¥–ª—è parse_mode"""
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        if "can't parse entities" in str(e) or "bad request" in str(e).lower():
            # –£–±–∏—Ä–∞–µ–º parse_mode –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
            kwargs.pop('parse_mode', None)
            logger.warning(f"HTML parsing failed, retrying without parse_mode for chat {chat_id}")
            return await bot.send_message(chat_id, text, **kwargs)
        else:
            logger.error(f"Failed to send message to {chat_id}: {e}")
            raise e

async def safe_reply_to(bot: AsyncTeleBot, message: types.Message, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å fallback –¥–ª—è parse_mode"""
    try:
        return await bot.reply_to(message, text, **kwargs)
    except Exception as e:
        if "can't parse entities" in str(e) or "bad request" in str(e).lower():
            # –£–±–∏—Ä–∞–µ–º parse_mode –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
            kwargs.pop('parse_mode', None)
            logger.warning(f"HTML parsing failed, retrying without parse_mode for user {message.from_user.id}")
            return await bot.reply_to(message, text, **kwargs)
        else:
            logger.error(f"Failed to reply to message from {message.from_user.id}: {e}")
            raise e

async def safe_edit_message_text(bot: AsyncTeleBot, text: str, chat_id: int, message_id: int, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –¥–ª—è parse_mode"""
    try:
        return await bot.edit_message_text(text, chat_id, message_id, **kwargs)
    except Exception as e:
        if "can't parse entities" in str(e) or "bad request" in str(e).lower():
            # –£–±–∏—Ä–∞–µ–º parse_mode –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
            kwargs.pop('parse_mode', None)
            logger.warning(f"HTML parsing failed, retrying edit without parse_mode for chat {chat_id}")
            return await bot.edit_message_text(text, chat_id, message_id, **kwargs)
        else:
            logger.error(f"Failed to edit message in {chat_id}: {e}")
            raise e

async def send_welcome_message(bot: AsyncTeleBot, chat_id: int, user_state):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        preferences = ""
        if user_state.preferences.completed_survey:
            prefs = []
            if user_state.preferences.content_types:
                prefs.append(f"Content: {', '.join(user_state.preferences.content_types)}")
            if user_state.preferences.price_range:
                prefs.append(f"Price range: {user_state.preferences.price_range}")
            if user_state.preferences.communication_style:
                prefs.append(f"Style: {user_state.preferences.communication_style}")
            preferences = "\n".join(prefs)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        prompt_template = await state_manager.load_prompt('welcome')
        if not prompt_template:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            welcome_text = """ü§ñ *OnlyFans Assistant Bot* - –í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

*üéØ –ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üí¨ *–û–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏* - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ üí∞ *PPV –∫–æ–Ω—Ç–µ–Ω—Ç* - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π (/ppv)
‚Ä¢ üíï *–§–ª–∏—Ä—Ç* - —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è (/flirt)
‚Ä¢ üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞* - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ ‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
‚Ä¢ üé® *–ú–æ–¥–µ–ª–∏ –ò–ò* - –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (/model)

*üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –≤–∞—Å)
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

*‚ö° –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å 24/7 —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞!*"""
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            history_text = "\n".join([
                f"{m['role']}: {m['content']}"
                for m in user_state.history[-3:]
            ])
            
            prompt = secure_format_prompt(
                prompt_template,
                preferences=preferences,
                history=history_text
            )
            
            welcome_text = await generate_groq_response(
                prompt,
                MODELS[user_state.model]['id']
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await safe_send_message(
            bot,
            chat_id,
            welcome_text,
            parse_mode='Markdown'
        )
        
        # –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
        if not user_state.preferences.completed_survey:
            await start_survey(bot, chat_id)
        else:
            # –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            await send_navigation_instructions(bot, chat_id, user_state)
            
    except Exception as e:
        logger.error(f"Error sending welcome message: {str(e)}", exc_info=True)

async def start_survey(bot: AsyncTeleBot, chat_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = state_manager.get_user(chat_id)
        user.current_survey_step = 'content_types'
        
        await safe_send_message(
            bot,
            chat_id,
            "üìã –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!",
            reply_markup=get_survey_keyboard('content_types')
        )
    except Exception as e:
        logger.error(f"Error starting survey: {str(e)}", exc_info=True)

async def send_navigation_instructions(bot: AsyncTeleBot, chat_id: int, user_state):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        prompt_template = await state_manager.load_prompt('instructions')
        if not prompt_template:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            instructions = """üì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

*üí∞ –°–æ–∑–¥–∞–Ω–∏–µ PPV:*
‚Ä¢ /ppv 30 - –æ–±—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ $30
‚Ä¢ /ppv 50 –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π - –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å

*üíï –§–ª–∏—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è:*
‚Ä¢ /flirt - –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–∑ –º–µ–Ω—é
‚Ä¢ /flirt —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π - —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å

*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ /model - –≤—ã–±–æ—Ä –ò–ò –º–æ–¥–µ–ª–∏ (—É–º–Ω–∞—è/–∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è)
‚Ä¢ /survey - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

*‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
‚Ä¢ /reminder 19:00 –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ! - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

*üìä –ú–µ–Ω—é –±–æ—Ç–∞:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.

*üí° –°–æ–≤–µ—Ç:* –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ –æ–ø—Ä–æ—Å–∞!"""
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            preferences = ""
            if user_state.preferences.completed_survey:
                prefs = []
                if user_state.preferences.content_types:
                    prefs.append(f"Content: {', '.join(user_state.preferences.content_types)}")
                if user_state.preferences.price_range:
                    prefs.append(f"Price range: {user_state.preferences.price_range}")
                preferences = "\n".join(prefs)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history = "\n".join([
                f"{m['role']}: {m['content']}"
                for m in user_state.history[-3:]
            ]) if user_state.history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            prompt = secure_format_prompt(
                prompt_template,
                preferences=preferences,
                history=history
            )
            instructions = await generate_groq_response(
                prompt,
                MODELS[user_state.model]['id']
            )
        
        await safe_send_message(
            bot,
            chat_id,
            instructions,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending instructions: {str(e)}", exc_info=True)

# === –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ö–û–ú–ê–ù–î–´ –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ===

@rate_limit_check(rate_limiter)
async def handle_start_command(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        user = state_manager.get_user(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await send_welcome_message(bot, user_id, user)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state_manager.save_data()
        
        log_security_event("USER_START", user_id, f"Username: @{message.from_user.username}")
        
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}", exc_info=True)
        await safe_reply_to(bot, message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_required
async def handle_model_command(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model"""
    try:
        user_id = message.from_user.id
        
        await safe_reply_to(
            bot, message,
            "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:",
            reply_markup=get_model_keyboard()
        )
        
        log_security_event("ADMIN_MODEL_ACCESS", user_id)
        security_stats.increment_admin_access()
        
    except Exception as e:
        logger.error(f"Error in model command: {str(e)}", exc_info=True)
        await safe_reply_to(bot, message, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–æ–¥–µ–ª–∏.")

@rate_limit_check(ai_rate_limiter)  # –°—Ç—Ä–æ–∂–µ rate limiting –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_flirt_command(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /flirt"""
    try:
        user_id = message.from_user.id
        user = state_manager.get_user(user_id)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        try:
            command_parts = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º "/flirt"
            user_input = " ".join(command_parts) if command_parts else ""
            
            if user_input:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                validated_input = validate_user_input(user_input, max_length=500)
                if validated_input != user_input:
                    security_stats.increment_sanitized()
                    log_security_event("INPUT_SANITIZED", user_id, f"Original length: {len(user_input)}")
            else:
                validated_input = ""
        except ValueError as e:
            await safe_reply_to(bot, message, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: {e}")
            return
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ñ–ª–∏—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º
        if not validated_input:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∏–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await safe_reply_to(
                bot, message,
                "üíï –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–ª–∏—Ä—Ç–∞:",
                reply_markup=get_flirt_style_keyboard()
            )
        else:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º secure_format_prompt
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = await state_manager.load_prompt('flirt')
            if not prompt_template:
                prompt_template = """–°–æ–∑–¥–∞–π —Ñ–ª–∏—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ "{style}". 
–£—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}
–ò—Å—Ç–æ—Ä–∏—è: {history}
–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            preferences = f"–°—Ç–∏–ª—å: {user.preferences.communication_style}" if user.preferences.communication_style else "–ù–µ —É–∫–∞–∑–∞–Ω"
            history = "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏" if not user.history else f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {user.history[-1]['content'][:100]}"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç injection
            prompt = secure_format_prompt(
                prompt_template,
                style=validated_input,
                preferences=preferences,
                history=history
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await generate_groq_response(prompt, MODELS[user.model]['id'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            state_manager.add_to_history(user_id, "user", f"flirt: {validated_input}")
            state_manager.add_to_history(user_id, "assistant", response)
            
            await safe_reply_to(bot, message, response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await state_manager.save_data()
            
        log_security_event("FLIRT_COMMAND", user_id, f"Style: {validated_input}")
        
    except Exception as e:
        logger.error(f"Error in flirt command: {str(e)}", exc_info=True)
        await safe_reply_to(bot, message, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–ª–∏—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_ppv_command(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ppv"""
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await safe_reply_to(
                bot,
                message,
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ppv <—Ü–µ–Ω–∞> [—Å—Ç–∏–ª—å]\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /ppv 30 –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n" +
                "\n".join(f"‚Ä¢ {desc}" for desc in PPV_STYLES.values())
            )
            return
        
        price = parts[1]
        style = parts[2].lower() if len(parts) > 2 else None
        
        if style and style not in PPV_STYLES:
            await safe_reply_to(bot, message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", 
                             reply_markup=get_ppv_style_keyboard())
            return
        
        user_id = message.from_user.id
        user = state_manager.get_user(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history_text = "\n".join([
            f"{m['role']}: {m['content']}"
            for m in user.history[-5:]
        ])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç
        prompt_template = await state_manager.load_prompt(f'ppv_{style}' if style else 'ppv')
        if not prompt_template:
            await safe_reply_to(bot, message, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞")
            return
        
        prompt = prompt_template.format(
            price=price,
            history=history_text
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        wait_msg = await safe_reply_to(bot, message, "ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ PPV...")
        
        try:
            response = await generate_groq_response(
                prompt,
                MODELS[user.model]['id']
            )
            
            state_manager.add_to_history(user_id, 'assistant', response)
            await state_manager.save_data()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await bot.delete_message(wait_msg.chat.id, wait_msg.message_id)
            await safe_reply_to(bot, message, response)
            
        except Exception as e:
            error_msg = (f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{str(e)}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ ‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await bot.delete_message(wait_msg.chat.id, wait_msg.message_id)
            await safe_reply_to(bot, message, error_msg)
            
    except Exception as e:
        logger.error(f"Error in PPV handler: {str(e)}", exc_info=True)
        await safe_reply_to(bot, message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PPV")

async def handle_set_ppv_reminder_command(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_ppv_reminder"""
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await safe_reply_to(
                bot,
                message,
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_ppv_reminder <–≤—Ä–µ–º—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
                "–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 30m, 2h, 1d (–º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /set_ppv_reminder 2h üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≥–æ—Ä—è—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
            )
            return
        
        time_str = parts[1].lower()
        reminder_message = parts[2]
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            minutes = parse_time_string(time_str)
            send_time = datetime.now() + timedelta(minutes=minutes)
            
        except ValueError:
            await safe_reply_to(
                bot,
                message,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30m, 2h, 1d"
            )
            return
        
        user_id = message.from_user.id
        user = state_manager.get_user(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = PPVReminder(
            user_id=user_id,
            message=reminder_message,
            scheduled_time=send_time
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user.ppv_reminders.append(reminder)
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å scheduler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await state_manager.save_data()
        
        await safe_reply_to(
            bot,
            message,
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {send_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {reminder_message}"
        )
        
    except Exception as e:
        logger.error(f"Error in set ppv reminder handler: {str(e)}", exc_info=True)
        await safe_reply_to(bot, message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") 