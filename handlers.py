"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è OF Assistant Bot —Å DeepSeek-R1
"""

import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from api_handler import deepseek_handler
from services.ai_integration import ai_service
from enhanced_logging import BotLogger
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logger = BotLogger(
    log_dir="logs",
    log_file="handlers.log",
    logger_name="Handlers"
)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

class BotHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot: AsyncTeleBot):
        self.bot = bot
        self.active_chats = set()  # –ß–∞—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.register_handlers()
        self.setup_scheduler()
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.bot.message_handler(commands=['start'])
        async def start_command(message):
            await self.handle_start(message)
            
        @self.bot.message_handler(commands=['test_deepseek'])
        async def test_deepseek_cmd(message):
            await self.test_deepseek_handler(message)
            
        @self.bot.message_handler(commands=['flirt'])
        async def flirt_command(message):
            await self.handle_flirt(message)
            
        @self.bot.message_handler(commands=['ppv'])
        async def ppv_command(message):
            await self.handle_ppv(message)
            
        @self.bot.message_handler(commands=['stats'])
        async def stats_command(message):
            await self.handle_stats(message)
            
        @self.bot.message_handler(commands=['generate_ppv'])
        async def generate_ppv_command(message):
            await self.handle_generate_ppv(message)
            
        @self.bot.message_handler(func=lambda message: True)
        async def handle_all_messages(message):
            await self.process_user_message(message)
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ PPV –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        
        # PPV –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ 12:00 (–æ–±–µ–¥)
        scheduler.add_job(
            self.ppv_reminder,
            'cron',
            hour=12,
            minute=0,
            args=[self.bot],
            id='ppv_reminder_noon'
        )
        
        # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00  
        scheduler.add_job(
            self.ppv_reminder,
            'cron', 
            hour=20,
            minute=0,
            args=[self.bot],
            id='ppv_reminder_evening'
        )
        
        # –ù–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 23:00 (–ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        scheduler.add_job(
            self.ppv_reminder,
            'cron',
            hour=23,
            minute=0,
            args=[self.bot],
            id='ppv_reminder_night'
        )
        
        scheduler.start()
        logger.log_info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ PPV –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)")

    async def handle_start(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        self.active_chats.add(message.chat.id)
        
        welcome_text = f"""
üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OF Assistant Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 
–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è OnlyFans —Å DeepSeek-R1! 

<b>üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/test_deepseek - –¢–µ—Å—Ç DeepSeek AI
/flirt - –ù–∞—á–∞—Ç—å —Ñ–ª–∏—Ä—Ç üíï
/ppv - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PPV –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üí∞

<b>üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> - —è –æ—Ç–≤–µ—á—É —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ! üòò

<i>Powered by DeepSeek-R1 üöÄ</i>
        """
        
        await self.bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')
        logger.log_info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

    async def test_deepseek_handler(self, message):
        """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DeepSeek"""
        try:
            await self.bot.send_message(message.chat.id, "üß† –¢–µ—Å—Ç–∏—Ä—É—é DeepSeek-R1...")
            
            response = await deepseek_handler.ask_deepseek(
                "–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."
            )
            
            reply_text = f"‚úÖ <b>DeepSeek-R1 —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\nüí¨ <i>–û—Ç–≤–µ—Ç:</i> {response}"
            await self.bot.send_message(message.chat.id, reply_text, parse_mode='HTML')
            
            logger.log_info(f"‚úÖ DeepSeek —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ DeepSeek:</b>\n<code>{str(e)}</code>"
            await self.bot.send_message(message.chat.id, error_text, parse_mode='HTML')
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ DeepSeek: {e}")

    async def handle_flirt(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ñ–ª–∏—Ä—Ç–∞"""
        flirt_prompt = "–ù–∞—á–Ω–∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –Ω–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º"
        
        try:
            response = await deepseek_handler.generate_flirt_response(
                flirt_prompt,
                {"command": "flirt_start", "user_id": message.from_user.id}
            )
            
            await self.bot.send_message(message.chat.id, f"üíï {response}")
            logger.log_info(f"üíã –§–ª–∏—Ä—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            await self.bot.send_message(message.chat.id, "üòò –ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ —Ñ–ª–∏—Ä—Ç–∞: {e}")

    async def handle_ppv(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PPV –∫–æ–º–∞–Ω–¥—ã"""
        ppv_menu = """
üí∞ <b>PPV –ö–æ–Ω—Ç–µ–Ω—Ç –ú–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ - 15$
‚Ä¢ üé• –í–∏–¥–µ–æ (5 –º–∏–Ω) - 25$ 
‚Ä¢ üî• –≠–∫—Å–∫–ª—é–∑–∏–≤ - 50$
‚Ä¢ üíï –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ - 100$

<i>–ü–∏—à–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!</i>
        """
        
        await self.bot.send_message(message.chat.id, ppv_menu, parse_mode='HTML')
        logger.log_info(f"üí∞ PPV –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    async def process_user_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_text = message.text
            user_id = message.from_user.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            self.active_chats.add(message.chat.id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ DeepSeek
            context = {
                "user_id": user_id,
                "username": message.from_user.username or "Anonymous",
                "first_name": message.from_user.first_name or "–ö—Ä–∞—Å–∞–≤—á–∏–∫"
            }
            
            response = await deepseek_handler.generate_flirt_response(user_text, context)
            
            await self.bot.send_message(message.chat.id, response)
            logger.log_info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            await self.bot.send_message(
                message.chat.id, 
                "üòò –ò–∑–≤–∏–Ω–∏, –º–∏–ª—ã–π, —á—Ç–æ-—Ç–æ —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑?"
            )
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def ppv_reminder(self, bot):
        """PPV –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        now = datetime.now().strftime("%d.%m %H:%M")
        
        reminder_messages = [
            f"üî• <b>–í—Ä–µ–º—è –∂–∞—Ä–∫–∏—Ö –Ω–æ–≤–∏–Ω–æ–∫!</b>\n\nüíï –°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ... –ó–∞–≥–ª—è–Ω–∏ –≤ PPV! üòà\n\n<i>‚è∞ {now}</i>",
            f"üí∞ <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∂–¥–µ—Ç!</b>\n\nüéØ –ù–µ –ø—Ä–æ—Å–ø–∏ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–Ω—è! üî•\n\n<i>‚è∞ {now}</i>",
            f"üòà <b>–°—é—Ä–ø—Ä–∏–∑ –≥–æ—Ç–æ–≤!</b>\n\nüíã –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ... –ü—Ä–æ–≤–µ—Ä—å PPV! üíï\n\n<i>‚è∞ {now}</i>"
        ]
        
        import random
        message_text = random.choice(reminder_messages)
        
        sent_count = 0
        for chat_id in list(self.active_chats):
            try:
                await bot.send_message(chat_id, message_text, parse_mode='HTML')
                sent_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except Exception as e:
                logger.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
                self.active_chats.discard(chat_id)
        
        logger.log_info(f"üì¢ PPV –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} —á–∞—Ç–æ–≤")

    async def handle_stats(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
            ai_stats = ai_service.get_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            bot_stats = {
                "active_chats": len(self.active_chats),
                "user_id": message.from_user.id
            }
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OF Assistant Bot</b>

ü§ñ <b>AI –°–µ—Ä–≤–∏—Å (DeepSeek):</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {ai_stats['total_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {ai_stats['successful_requests']}
‚Ä¢ –û—à–∏–±–æ–∫: {ai_stats['failed_requests']}
‚Ä¢ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {ai_stats['cache_hits']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {ai_stats['success_rate']}%
‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {ai_stats['cache_size']}

üí¨ <b>–ë–æ—Ç:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {bot_stats['active_chats']}
‚Ä¢ –í–∞—à ID: {bot_stats['user_id']}

<i>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
            """
            
            await self.bot.send_message(message.chat.id, stats_text, parse_mode='HTML')
            logger.log_info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
        except Exception as e:
            await self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def handle_generate_ppv(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: /generate_ppv —Ç–∏–ø —Ü–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if len(args) < 3:
                help_text = """
üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PPV –ö–æ–Ω—Ç–µ–Ω—Ç–∞</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/generate_ppv [—Ç–∏–ø] [—Ü–µ–Ω–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/generate_ppv —Ñ–æ—Ç–æ 15 –≥–æ—Ä—è—á–µ–µ —Å–µ–ª—Ñ–∏ –≤ –≤–∞–Ω–Ω–æ–π</code>
<code>/generate_ppv –≤–∏–¥–µ–æ 25 —Ç–∞–Ω–µ—Ü –≤ –Ω–∏–∂–Ω–µ–º –±–µ–ª—å–µ</code>
<code>/generate_ppv –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ 100 –≤–∏–¥–µ–æ —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º</code>

<b>–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ, —ç–∫—Å–∫–ª—é–∑–∏–≤
                """
                await self.bot.send_message(message.chat.id, help_text, parse_mode='HTML')
                return
            
            content_type = args[0]
            try:
                price = int(args[1])
            except ValueError:
                await self.bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            
            description = " ".join(args[2:])
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI
            await self.bot.send_message(message.chat.id, "üé¨ –°–æ–∑–¥–∞—é —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
            
            ppv_content = await ai_service.generate_ppv_content(
                content_type=content_type,
                price=price,
                description=description
            )
            
            result_text = f"""
üî• <b>PPV –ö–æ–Ω—Ç–µ–Ω—Ç –ì–æ—Ç–æ–≤!</b>

üí∞ <b>–¶–µ–Ω–∞:</b> ${price}
üéØ <b>–¢–∏–ø:</b> {content_type}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{ppv_content}

<i>ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ DeepSeek AI</i>
            """
            
            await self.bot.send_message(message.chat.id, result_text, parse_mode='HTML')
            logger.log_info(f"üé¨ PPV –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            await self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PPV –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            logger.log_error(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PPV: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(bot: AsyncTeleBot) -> BotHandlers:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    handlers = BotHandlers(bot)
    logger.log_info("üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return handlers 