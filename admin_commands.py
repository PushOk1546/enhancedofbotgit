#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram Stars/TON –±–æ—Ç–∞
–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø—Ä–µ–º–∏—É–º–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π
"""

import telebot
from telebot import types
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from premium_system import premium_manager, SubscriptionTier

class AdminCommands:
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.admin_ids = [int(x) for x in os.getenv('ADMIN_USER_IDS', '377917978').split(',')]
        
    def setup_admin_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        
        # === –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
        @self.bot.message_handler(commands=['admin'])
        def handle_admin_panel(message):
            if self.is_admin(message.from_user.id):
                self.show_admin_panel(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        @self.bot.message_handler(commands=['grant_premium'])
        def handle_grant_premium(message):
            if self.is_admin(message.from_user.id):
                self.grant_premium_command(message)
            else:
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        @self.bot.message_handler(commands=['test_mode'])
        def handle_test_mode(message):
            if self.is_admin(message.from_user.id):
                self.test_mode_command(message)
            else:
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        @self.bot.message_handler(commands=['unlimited'])
        def handle_unlimited(message):
            if self.is_admin(message.from_user.id):
                self.unlimited_command(message)
            else:
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        # === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
        @self.bot.message_handler(commands=['revenue'])
        def handle_revenue(message):
            if self.is_admin(message.from_user.id):
                self.show_revenue(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        @self.bot.message_handler(commands=['stats'])
        def handle_stats(message):
            if self.is_admin(message.from_user.id):
                self.show_stats(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        @self.bot.message_handler(commands=['users'])
        def handle_users(message):
            if self.is_admin(message.from_user.id):
                self.show_users(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # === –°–ò–°–¢–ï–ú–ê ===
        @self.bot.message_handler(commands=['health_check'])
        def handle_health_check(message):
            if self.is_admin(message.from_user.id):
                self.health_check(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        @self.bot.message_handler(commands=['confirm_ton'])
        def handle_confirm_ton(message):
            if self.is_admin(message.from_user.id):
                self.confirm_ton_payment(message)
            else:
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        # === –ü–û–ú–û–©–¨ ===
        @self.bot.message_handler(commands=['help_admin'])
        def handle_help_admin(message):
            if self.is_admin(message.from_user.id):
                self.show_admin_help(message)
            else:
                self.bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # === CALLBACK QUERY HANDLERS ===
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
        def handle_admin_callbacks(call):
            if self.is_admin(call.from_user.id):
                self.handle_admin_callback_query(call)
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in self.admin_ids

    def show_admin_panel(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        markup.add(
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="admin_revenue")
        )
        
        # –í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞
        markup.add(
            types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å Premium", callback_data="admin_grant"),
            types.InlineKeyboardButton("üß™ –¢–µ—Å—Ç-—Ä–µ–∂–∏–º", callback_data="admin_test")
        )
        
        # –°–∏—Å—Ç–µ–º–∞
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="admin_health")
        )
        
        # TON –ø–ª–∞—Ç–µ–∂–∏
        markup.add(
            types.InlineKeyboardButton("üíé –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å TON", callback_data="admin_ton"),
            types.InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="admin_help")
        )
        
        admin_msg = """
üî• **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** üî•

üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {username}
üïê **–í—Ä–µ–º—è:** {time}
üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}
üí∞ **–î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è:** ${daily_revenue:.2f}

‚öôÔ∏è **–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Ö–æ–¥–æ–≤  
‚Ä¢ –í—ã–¥–∞—á–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ TON –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """.format(
            username=message.from_user.username or message.from_user.first_name,
            time=datetime.now().strftime("%H:%M:%S"),
            total_users=len(premium_manager.users),
            daily_revenue=premium_manager.get_daily_revenue(datetime.now().strftime("%Y-%m-%d"))['total_revenue']
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ callback –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤)
            if hasattr(message, 'message_id') and hasattr(message, 'edit_text'):
                # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.bot.edit_message_text(admin_msg, message.chat.id, message.message_id, 
                                         reply_markup=markup, parse_mode='Markdown')
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(message.chat.id, admin_msg, reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(message.chat.id, admin_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                # –ï—Å–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /admin")

    def grant_premium_command(self, message):
        """–í—ã–¥–∞—á–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞"""
        try:
            parts = message.text.split()
            if len(parts) < 4:
                help_msg = """
üéÅ **–í–´–î–ê–ß–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ü–†–ï–ú–ò–£–ú–ê**

**–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**
`/grant_premium @username —Ç–∞—Ä–∏—Ñ –¥–Ω–∏`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/grant_premium @testuser premium 7` - Premium –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ `/grant_premium @reviewer vip 30` - VIP –Ω–∞ 30 –¥–Ω–µ–π  
‚Ä¢ `/grant_premium @tester ultimate 14` - Ultimate –Ω–∞ 14 –¥–Ω–µ–π
‚Ä¢ `/grant_premium 123456789 premium 7` - –ü–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
‚Ä¢ `premium` - 500 —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–µ—Ä–∏–æ–¥
‚Ä¢ `vip` - 2000 —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–µ—Ä–∏–æ–¥
‚Ä¢ `ultimate` - 10000 —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–µ—Ä–∏–æ–¥
                """
                self.bot.reply_to(message, help_msg, parse_mode='Markdown')
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            username_or_id = parts[1]
            tier_str = parts[2].lower()
            days = int(parts[3])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username_or_id.startswith('@'):
                username = username_or_id[1:]
                user_id = self.find_user_by_username(username)
                if not user_id:
                    self.bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            else:
                user_id = int(username_or_id)
                username = self.get_username_by_id(user_id)
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞—Ä–∏—Ñ–æ–≤
            tier_mapping = {
                "premium": SubscriptionTier.PREMIUM,
                "vip": SubscriptionTier.VIP,
                "ultimate": SubscriptionTier.ULTIMATE
            }
            
            if tier_str not in tier_mapping:
                self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –î–æ—Å—Ç—É–ø–Ω–æ: premium, vip, ultimate")
                return
            
            # –í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞
            success = premium_manager.upgrade_subscription(
                user_id=user_id,
                tier=tier_mapping[tier_str],
                duration_days=days,
                payment_amount=0.0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                payment_method="admin_grant",
                transaction_id=f"admin_{message.from_user.id}_{datetime.now().timestamp()}"
            )
            
            if success:
                success_msg = f"""
‚úÖ **–ü–†–ï–ú–ò–£–ú –í–´–î–ê–ù –£–°–ü–ï–®–ù–û!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username} (ID: {user_id})
üíé **–¢–∞—Ä–∏—Ñ:** {tier_str.upper()}
üìÖ **–ü–µ—Ä–∏–æ–¥:** {days} –¥–Ω–µ–π
üéÅ **–°—Ç–∞—Ç—É—Å:** –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤—ã–¥–∞—á–∞
‚è∞ **–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:** {(datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d %H:%M')}

üíå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
                """
                self.bot.reply_to(message, success_msg, parse_mode='Markdown')
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    user_msg = f"""
üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!** üéâ

üéÅ –í–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ **{tier_str.upper()}** —Ç–∞—Ä–∏—Ñ—É!

üìÖ **–°—Ä–æ–∫:** {days} –¥–Ω–µ–π
üíé **–í–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ {premium_manager.message_limits[tier_mapping[tier_str]]:,} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üî• –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!
                    """
                    self.bot.send_message(user_id, user_msg, parse_mode='Markdown')
                except:
                    pass
            else:
                self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏—É–º–∞")
                
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def test_mode_command(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–∞"""
        try:
            parts = message.text.split()
            if len(parts) < 3:
                help_msg = """
üß™ **–¢–ï–°–¢-–†–ï–ñ–ò–ú**

**–§–æ—Ä–º–∞—Ç:**
`/test_mode @username on/off`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/test_mode @tester on` - –í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç
‚Ä¢ `/test_mode @reviewer off` - –í—ã–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç
‚Ä¢ `/test_mode 123456789 on` - –ü–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–í —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
                """
                self.bot.reply_to(message, help_msg, parse_mode='Markdown')
                return
            
            username_or_id = parts[1]
            mode = parts[2].lower()
            
            if username_or_id.startswith('@'):
                username = username_or_id[1:]
                user_id = self.find_user_by_username(username)
                if not user_id:
                    self.bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            else:
                user_id = int(username_or_id)
                username = self.get_username_by_id(user_id)
            
            if mode == 'on':
                # –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º (–±–µ–∑–ª–∏–º–∏—Ç)
                premium_manager.set_test_mode(user_id, True)
                msg = f"‚úÖ –¢–µ—Å—Ç-—Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–ï–ù –¥–ª—è @{username}\nüí° –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã"
            elif mode == 'off':
                # –í—ã–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º
                premium_manager.set_test_mode(user_id, False)
                msg = f"üîí –¢–µ—Å—Ç-—Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù –¥–ª—è @{username}\nüìä –í–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—ã—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã"
            else:
                self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on' –∏–ª–∏ 'off'")
                return
            
            self.bot.reply_to(message, msg)
            
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def unlimited_command(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            parts = message.text.split()
            if len(parts) < 2:
                help_msg = """
‚ôæÔ∏è **–ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø**

**–§–æ—Ä–º–∞—Ç:**
`/unlimited @username`

**–ü—Ä–∏–º–µ—Ä:**
‚Ä¢ `/unlimited @tester` - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ `/unlimited 123456789` - –ü–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–∞–∫—Å–∏–º—É–º.
                """
                self.bot.reply_to(message, help_msg, parse_mode='Markdown')
                return
            
            username_or_id = parts[1]
            
            if username_or_id.startswith('@'):
                username = username_or_id[1:]
                user_id = self.find_user_by_username(username)
                if not user_id:
                    self.bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            else:
                user_id = int(username_or_id)
                username = self.get_username_by_id(user_id)
            
            # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            user_sub = premium_manager.get_user_subscription(user_id)
            premium_manager.reset_message_limit(user_id)
            
            msg = f"""
‚ôæÔ∏è **–õ–ò–ú–ò–¢ –°–ë–†–û–®–ï–ù!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}
üìä **–¢–∞—Ä–∏—Ñ:** {user_sub.tier.value}
üí¨ **–ù–æ–≤—ã–π –ª–∏–º–∏—Ç:** {premium_manager.message_limits[user_sub.tier]:,} —Å–æ–æ–±—â–µ–Ω–∏–π
            """
            
            self.bot.reply_to(message, msg, parse_mode='Markdown')
            
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def show_revenue(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤"""
        today = datetime.now().strftime("%Y-%m-%d")
        today_revenue = premium_manager.get_daily_revenue(today)
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        weekly_revenue = self.calculate_period_revenue(7)
        monthly_revenue = self.calculate_period_revenue(30)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = len(premium_manager.users)
        premium_users = sum(1 for u in premium_manager.users.values() if u.tier != SubscriptionTier.FREE_TRIAL)
        
        revenue_msg = f"""
üí∞ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–•–û–î–û–í** üí∞

üìÖ **–°–ï–ì–û–î–ù–Ø ({today}):**
‚Ä¢ –î–æ—Ö–æ–¥—ã: ${today_revenue['total_revenue']:.2f}
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {today_revenue['new_subscribers']}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏: {len(today_revenue['payments'])}

üìà **–ù–ï–î–ï–õ–Ø:**
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${weekly_revenue:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å: ${weekly_revenue/7:.2f}

üìä **–ú–ï–°–Ø–¶:**
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${monthly_revenue:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å: ${monthly_revenue/30:.2f}

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {(premium_users/total_users*100) if total_users > 0 else 0:.1f}%

üéØ **–ü–†–û–ì–ù–û–ó:**
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π: ${monthly_revenue:.2f}
‚Ä¢ –ì–æ–¥–æ–≤–æ–π: ${monthly_revenue * 12:.2f}
        """
        
        self.bot.send_message(message.chat.id, revenue_msg, parse_mode='Markdown')

    def show_stats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = premium_manager.get_user_statistics()
        
        stats_msg = f"""
üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {stats['active_24h']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}

üíé **–ü–û–î–ü–ò–°–ö–ò:**
‚Ä¢ Free Trial: {stats['free_trial_users']}
‚Ä¢ Premium: {stats['premium_users']}
‚Ä¢ VIP: {stats['vip_users']}
‚Ä¢ Ultimate: {stats['ultimate_users']}

üìà **–ö–û–ù–í–ï–†–°–ò–Ø:**
‚Ä¢ –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']:.1f}%
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ Premium: {stats['premium_conversion']:.1f}%
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ VIP+: {stats['vip_conversion']:.1f}%

üí¨ **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']:,}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats['total_messages']:,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['avg_messages_per_user']:.1f}

‚≠ê **–ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ê–†–ò–§–´:**
1. {stats['most_popular_tier']}
2. Premium
3. VIP
        """
        
        self.bot.send_message(message.chat.id, stats_msg, parse_mode='Markdown')

    def show_users(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = list(premium_manager.users.values())[:20]  # –ü–µ—Ä–≤—ã–µ 20
        
        users_msg = "üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–ø–µ—Ä–≤—ã–µ 20):**\n\n"
        
        for i, user in enumerate(users, 1):
            username = self.get_username_by_id(user.user_id) or "Unknown"
            tier_emoji = {"FREE_TRIAL": "üÜì", "PREMIUM": "‚≠ê", "VIP": "üíé", "ULTIMATE": "üëë"}
            emoji = tier_emoji.get(user.tier.value, "‚ùì")
            
            users_msg += f"{i}. {emoji} @{username} ({user.tier.value})\n"
            users_msg += f"   üí¨ {user.messages_used}/{premium_manager.message_limits[user.tier]}\n"
            users_msg += f"   üìÖ –î–æ: {user.expires_at.strftime('%Y-%m-%d')}\n\n"
        
        if len(premium_manager.users) > 20:
            users_msg += f"... –∏ –µ—â–µ {len(premium_manager.users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        self.bot.send_message(message.chat.id, users_msg, parse_mode='Markdown')

    def health_check(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_msg = "üîß **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        try:
            me = self.bot.get_me()
            health_msg += f"‚úÖ Telegram API: @{me.username}\n"
        except Exception as e:
            health_msg += f"‚ùå Telegram API: {e}\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º—ã
        try:
            stats = premium_manager.get_user_statistics()
            health_msg += f"‚úÖ Premium —Å–∏—Å—Ç–µ–º–∞: {stats['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        except Exception as e:
            health_msg += f"‚ùå Premium —Å–∏—Å—Ç–µ–º–∞: {e}\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        try:
            from response_cache import response_cache
            cache_stats = response_cache.get_stats()
            health_msg += f"‚úÖ –ö–µ—à: {cache_stats['hits']}/{cache_stats['total']} hit rate\n"
        except Exception as e:
            health_msg += f"‚ùå –ö–µ—à: {e}\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        important_files = ['adult_templates.py', 'premium_system.py', 'monetization_config.py']
        for file in important_files:
            if os.path.exists(file):
                health_msg += f"‚úÖ {file}\n"
            else:
                health_msg += f"‚ùå {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        
        health_msg += f"\nüïê –ü—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        self.bot.send_message(message.chat.id, health_msg, parse_mode='Markdown')

    def confirm_ton_payment(self, message):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ TON –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            parts = message.text.split()
            if len(parts) < 5:
                help_msg = """
üíé **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï TON –ü–õ–ê–¢–ï–ñ–ê**

**–§–æ—Ä–º–∞—Ç:**
`/confirm_ton @username —Å—É–º–º–∞_TON —Ç–∞—Ä–∏—Ñ –¥–Ω–∏`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/confirm_ton @user123 2.0 premium 7`
‚Ä¢ `/confirm_ton 123456789 4.0 vip 30`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:** premium, vip, ultimate
                """
                self.bot.reply_to(message, help_msg, parse_mode='Markdown')
                return
            
            username_or_id = parts[1]
            amount = float(parts[2])
            tier_str = parts[3].lower()
            days = int(parts[4])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username_or_id.startswith('@'):
                username = username_or_id[1:]
                user_id = self.find_user_by_username(username)
                if not user_id:
                    self.bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            else:
                user_id = int(username_or_id)
                username = self.get_username_by_id(user_id)
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞—Ä–∏—Ñ–æ–≤
            tier_mapping = {
                "premium": SubscriptionTier.PREMIUM,
                "vip": SubscriptionTier.VIP,
                "ultimate": SubscriptionTier.ULTIMATE
            }
            
            if tier_str not in tier_mapping:
                self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            success = premium_manager.upgrade_subscription(
                user_id=user_id,
                tier=tier_mapping[tier_str],
                duration_days=days,
                payment_amount=amount,
                payment_method="ton_crypto",
                transaction_id=f"ton_confirmed_{message.from_user.id}_{datetime.now().timestamp()}"
            )
            
            if success:
                success_msg = f"""
‚úÖ **TON –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}
üíé **–°—É–º–º–∞:** {amount} TON
üéØ **–¢–∞—Ä–∏—Ñ:** {tier_str.upper()}
üìÖ **–ü–µ—Ä–∏–æ–¥:** {days} –¥–Ω–µ–π
‚è∞ **–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:** {(datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d %H:%M')}
                """
                self.bot.reply_to(message, success_msg, parse_mode='Markdown')
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    user_msg = f"""
‚úÖ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!** ‚úÖ

üíé –í–∞—à TON –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!
üéØ –¢–∞—Ä–∏—Ñ **{tier_str.upper()}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π.

üî• –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!
                    """
                    self.bot.send_message(user_id, user_msg, parse_mode='Markdown')
                except:
                    pass
            else:
                self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def show_admin_help(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–º"""
        help_msg = """
üìã **–°–ü–†–ê–í–ö–ê –ü–û –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–ê–ú**

üéÅ **–í–´–î–ê–ß–ê –ü–†–ï–ú–ò–£–ú–ê:**
‚Ä¢ `/grant_premium @user tier days` - –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º
‚Ä¢ `/test_mode @user on/off` - –¢–µ—Å—Ç-—Ä–µ–∂–∏–º
‚Ä¢ `/unlimited @user` - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç

üí∞ **–ú–û–ù–ò–¢–û–†–ò–ù–ì:**
‚Ä¢ `/revenue` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
‚Ä¢ `/stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
‚Ä¢ `/users` - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üíé **TON –ü–õ–ê–¢–ï–ñ–ò:**
‚Ä¢ `/confirm_ton @user amount tier days` - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å TON

üîß **–°–ò–°–¢–ï–ú–ê:**
‚Ä¢ `/health_check` - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìñ **–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** ADMIN_GUIDE.txt
        """
        
        self.bot.send_message(message.chat.id, help_msg, parse_mode='Markdown')

    def handle_admin_callback_query(self, call):
        """üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω callback queries"""
        try:
            self.bot.answer_callback_query(call.id)
            data = call.data
            
            if data == "admin_users":
                self.show_users_callback(call)
            elif data == "admin_revenue":
                self.show_revenue_callback(call)
            elif data == "admin_grant":
                self.show_grant_menu(call)
            elif data == "admin_test":
                self.show_test_mode_menu(call)
            elif data == "admin_stats":
                self.show_stats_callback(call)
            elif data == "admin_health":
                self.health_check_callback(call)
            elif data == "admin_ton":
                self.show_ton_confirmation_menu(call)
            elif data == "admin_help":
                self.show_admin_help_callback(call)
            elif data == "admin_panel":
                self.show_admin_panel_callback(call)
            else:
                try:
                    self.bot.edit_message_text("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                                             call.message.chat.id, call.message.message_id)
                except:
                    self.bot.send_message(call.message.chat.id, "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as e:
            print(f"Admin callback error: {e}")
            try:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            except:
                pass
    
    def show_admin_panel_callback(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        markup.add(
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="admin_revenue")
        )
        
        # –í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞
        markup.add(
            types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å Premium", callback_data="admin_grant"),
            types.InlineKeyboardButton("üß™ –¢–µ—Å—Ç-—Ä–µ–∂–∏–º", callback_data="admin_test")
        )
        
        # –°–∏—Å—Ç–µ–º–∞
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="admin_health")
        )
        
        # TON –ø–ª–∞—Ç–µ–∂–∏
        markup.add(
            types.InlineKeyboardButton("üíé –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å TON", callback_data="admin_ton"),
            types.InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="admin_help")
        )
        
        admin_msg = """
üî• **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** üî•

üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {username}
üïê **–í—Ä–µ–º—è:** {time}
üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}
üí∞ **–î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è:** ${daily_revenue:.2f}

‚öôÔ∏è **–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Ö–æ–¥–æ–≤  
‚Ä¢ –í—ã–¥–∞—á–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ TON –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """.format(
            username=call.from_user.username or call.from_user.first_name,
            time=datetime.now().strftime("%H:%M:%S"),
            total_users=len(premium_manager.users),
            daily_revenue=premium_manager.get_daily_revenue(datetime.now().strftime("%Y-%m-%d"))['total_revenue']
        )
        
        try:
            self.bot.edit_message_text(admin_msg, call.message.chat.id, call.message.message_id, 
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, admin_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")

    def show_users_callback(self, call):
        """üë• –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
        users = list(premium_manager.users.values())[:15]  # –ü–µ—Ä–≤—ã–µ 15
        
        users_msg = "üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–ò–°–¢–ï–ú–´** üë•\n\n"
        
        for i, user in enumerate(users, 1):
            username = self.get_username_by_id(user.user_id)
            tier_emoji = {"FREE_TRIAL": "üÜì", "PREMIUM": "‚≠ê", "VIP": "üíé", "ULTIMATE": "üëë"}
            emoji = tier_emoji.get(user.tier.value, "‚ùì")
            
            users_msg += f"{i}. {emoji} @{username}\n"
            users_msg += f"   üí¨ {user.messages_used}/{premium_manager.message_limits[user.tier]}\n"
            users_msg += f"   üìÖ {user.expires_at.strftime('%d.%m.%Y')}\n"
            users_msg += f"   üí∞ ${user.total_paid:.2f}\n\n"
        
        if len(premium_manager.users) > 15:
            users_msg += f"... –∏ –µ—â–µ {len(premium_manager.users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        users_msg += f"üìä **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(premium_manager.users)}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(users_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, users_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def show_revenue_callback(self, call):
        """üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ callback"""
        today = datetime.now().strftime("%Y-%m-%d")
        today_revenue = premium_manager.get_daily_revenue(today)
        
        weekly_revenue = self.calculate_period_revenue(7)
        monthly_revenue = self.calculate_period_revenue(30)
        
        total_users = len(premium_manager.users)
        premium_users = sum(1 for u in premium_manager.users.values() if u.tier != SubscriptionTier.FREE_TRIAL)
        
        revenue_msg = f"""
üí∞ **–î–û–•–û–î–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê** üí∞

üìÖ **–°–ï–ì–û–î–ù–Ø ({today}):**
‚Ä¢ üíµ –î–æ—Ö–æ–¥—ã: ${today_revenue['total_revenue']:.2f}
‚Ä¢ üë• –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {today_revenue['new_subscribers']}
‚Ä¢ üí≥ –ü–ª–∞—Ç–µ–∂–∏: {len(today_revenue['payments'])}

üìà **–ü–ï–†–ò–û–î:**
‚Ä¢ üìä –ó–∞ –Ω–µ–¥–µ–ª—é: ${weekly_revenue:.2f}
‚Ä¢ üìä –ó–∞ –º–µ—Å—è—Ü: ${monthly_revenue:.2f}
‚Ä¢ üìä –°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω—å: ${weekly_revenue/7:.2f}

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ üî¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º: {premium_users}
‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {(premium_users/total_users*100) if total_users > 0 else 0:.1f}%

üéØ **–ü–†–û–ì–ù–û–ó–´:**
‚Ä¢ üìä –ú–µ—Å—è—á–Ω—ã–π: ${monthly_revenue:.2f}
‚Ä¢ üìä –ì–æ–¥–æ–≤–æ–π: ${monthly_revenue * 12:.2f}
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_revenue"),
            types.InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(revenue_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, revenue_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö")

    def show_grant_menu(self, call):
        """üéÅ –ú–µ–Ω—é –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞"""
        grant_msg = """
üéÅ **–í–´–î–ê–ß–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ü–†–ï–ú–ò–£–ú–ê** üéÅ

üìù **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**

`/grant_premium @username —Ç–∞—Ä–∏—Ñ –¥–Ω–∏`

üî∏ **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/grant_premium @testuser premium 7`
‚Ä¢ `/grant_premium 123456789 vip 30`
‚Ä¢ `/grant_premium @reviewer ultimate 14`

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
‚Ä¢ `premium` - 500 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ `vip` - 2000 —Å–æ–æ–±—â–µ–Ω–∏–π  
‚Ä¢ `ultimate` - 10000 —Å–æ–æ–±—â–µ–Ω–∏–π

üß™ **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/test_mode @user on` - –ë–µ–∑–ª–∏–º–∏—Ç
‚Ä¢ `/unlimited @user` - –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üß™ –¢–µ—Å—Ç-—Ä–µ–∂–∏–º", callback_data="admin_test")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(grant_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, grant_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞")

    def show_test_mode_menu(self, call):
        """üß™ –ú–µ–Ω—é —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–∞"""
        test_msg = """
üß™ **–¢–ï–°–¢-–†–ï–ñ–ò–ú –ò –û–¢–õ–ê–î–ö–ê** üß™

üîß **–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**

`/test_mode @username on/off`
`/unlimited @username`  
`/reset_limit @username`

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üîÑ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ üîì –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**
–¢–µ—Å—Ç-—Ä–µ–∂–∏–º –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.

üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã:**
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤
        test_users = [user for user in premium_manager.users.values() if getattr(user, 'test_mode', False)]
        if test_users:
            for user in test_users[:5]:
                username = self.get_username_by_id(user.user_id)
                test_msg += f"‚Ä¢ @{username} ({user.tier.value})\n"
        else:
            test_msg += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_grant")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(test_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, test_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–∞")

    def show_ton_confirmation_menu(self, call):
        """üíé –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è TON –ø–ª–∞—Ç–µ–∂–µ–π"""
        ton_msg = """
üíé **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï TON –ü–õ–ê–¢–ï–ñ–ï–ô** üíé

üí∞ **TON –ö–æ—à–µ–ª–µ–∫:**
`UQA4rDEmGdIYKcrjEDwfZGLnISYd-gCYLEpcbSdwcuAW_FXB`

üìù **–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**
`/confirm_ton @username —Å—É–º–º–∞_TON —Ç–∞—Ä–∏—Ñ –¥–Ω–∏`

üî∏ **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/confirm_ton @user123 2.0 premium 7`
‚Ä¢ `/confirm_ton 123456789 4.0 vip 30`  
‚Ä¢ `/confirm_ton @customer 8.0 ultimate 14`

üíé **–¢–∞—Ä–∏—Ñ—ã TON:**
‚Ä¢ Premium: 1.2 TON (–¥–µ–Ω—å)
‚Ä¢ VIP: 2.0 TON (–¥–µ–Ω—å)
‚Ä¢ Ultimate: 4.0 TON (–¥–µ–Ω—å)

üéØ **–ú–µ—Å—è—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
‚Ä¢ Premium: 28 TON (–º–µ—Å—è—Ü)
‚Ä¢ VIP: 48 TON (–º–µ—Å—è—Ü)
‚Ä¢ Ultimate: 88 TON (–º–µ—Å—è—Ü)

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="admin_revenue")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(ton_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, ton_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é TON –ø–ª–∞—Ç–µ–∂–µ–π")

    def show_stats_callback(self, call):
        """üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
        stats = premium_manager.get_user_statistics()
        
        stats_msg = f"""
üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ üî¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (24—á): {stats['active_24h']}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ–¥–µ–ª—è): {stats['active_week']}

üíé **–ü–û–î–ü–ò–°–ö–ò:**
‚Ä¢ üÜì Free Trial: {stats['free_trial_users']}
‚Ä¢ ‚≠ê Premium: {stats['premium_users']} 
‚Ä¢ üíé VIP: {stats['vip_users']}
‚Ä¢ üëë Ultimate: {stats['ultimate_users']}

üìà **–ö–û–ù–í–ï–†–°–ò–Ø:**
‚Ä¢ üéØ –û–±—â–∞—è: {stats['conversion_rate']:.1f}%
‚Ä¢ ‚≠ê –í Premium: {stats['premium_conversion']:.1f}%
‚Ä¢ üíé –í VIP+: {stats['vip_conversion']:.1f}%

üí¨ **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**
‚Ä¢ üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats['total_messages']:,}
‚Ä¢ üìà –ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['avg_messages_per_user']:.1f}

üèÜ **–ü–û–ü–£–õ–Ø–†–ù–´–ô –¢–ê–†–ò–§:** {stats['most_popular_tier'].title()}
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
            types.InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="admin_revenue")
        )
        markup.add(
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        
        try:
            self.bot.edit_message_text(stats_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, stats_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    def health_check_callback(self, call):
        """üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
        health_msg = "üîß **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´** üîß\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        try:
            me = self.bot.get_me()
            health_msg += f"‚úÖ Telegram API: @{me.username}\n"
        except Exception as e:
            health_msg += f"‚ùå Telegram API: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º—ã
        try:
            stats = premium_manager.get_user_statistics()
            health_msg += f"‚úÖ Premium —Å–∏—Å—Ç–µ–º–∞: {stats['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        except Exception as e:
            health_msg += f"‚ùå Premium —Å–∏—Å—Ç–µ–º–∞: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        try:
            from response_cache import response_cache
            cache_stats = response_cache.get_stats()
            health_msg += f"‚úÖ –ö–µ—à: {cache_stats['hits']}/{cache_stats['total']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        except Exception as e:
            health_msg += f"‚ùå –ö–µ—à: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        important_files = ['adult_templates.py', 'premium_system.py', 'monetization_config.py']
        for file in important_files:
            if os.path.exists(file):
                health_msg += f"‚úÖ {file}\n"
            else:
                health_msg += f"‚ùå {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        
        health_msg += f"\nüïê –ü—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin_health"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(health_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, health_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

    def show_admin_help_callback(self, call):
        """üìã –ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–º —á–µ—Ä–µ–∑ callback"""
        help_msg = """
üìã **–°–ü–†–ê–í–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** üìã

üéÅ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò:**
‚Ä¢ `/grant_premium @user tier days` - –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º
‚Ä¢ `/test_mode @user on/off` - –¢–µ—Å—Ç-—Ä–µ–∂–∏–º
‚Ä¢ `/unlimited @user` - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç

üí∞ **–ú–û–ù–ò–¢–û–†–ò–ù–ì:**
‚Ä¢ `/revenue` - –î–æ—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å
‚Ä¢ `/stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/users` - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üíé **TON –ü–õ–ê–¢–ï–ñ–ò:**
‚Ä¢ `/confirm_ton @user amount tier days` - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å TON

üîß **–°–ò–°–¢–ï–ú–ê:**
‚Ä¢ `/health_check` - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìö **–ü–û–õ–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:**
–°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª `ADMIN_GUIDE.txt`
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞", callback_data="admin_grant"),
            types.InlineKeyboardButton("üíé TON –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_ton")
        )
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="admin_health")
        )
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        try:
            self.bot.edit_message_text(help_msg, call.message.chat.id, call.message.message_id,
                                     reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.send_message(call.message.chat.id, help_msg, reply_markup=markup, parse_mode='Markdown')
            except Exception as send_error:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–∫–∏")

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def find_user_by_username(self, username: str) -> Optional[int]:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π premium_manager
        for user_id, user_sub in premium_manager.users.items():
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–≤—è–∑—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö username->user_id
            if username.lower() in str(user_id):  # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                return user_id
        
        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ ID
        try:
            potential_id = int(username)
            if potential_id in premium_manager.users:
                return potential_id
        except ValueError:
            pass
        
        return None
    
    def get_username_by_id(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å username –ø–æ ID"""
        # –í –∏–¥–µ–∞–ª–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–≤—è–∑–∫–æ–π user_id -> username
        # –î–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
        if user_id in premium_manager.users:
            return f"user{user_id}"
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        username_cache = {
            377917978: "admin",  # –ò–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω
        }
        
        return username_cache.get(user_id, f"user{user_id}")
    
    def calculate_period_revenue(self, days: int) -> float:
        """–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        total_revenue = 0.0
        
        for i in range(days):
            date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
            day_revenue = premium_manager.get_daily_revenue(date)
            total_revenue += day_revenue['total_revenue']
        
        return total_revenue

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def setup_admin_commands(bot: telebot.TeleBot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ"""
    admin_commands = AdminCommands(bot)
    admin_commands.setup_admin_commands()
    return admin_commands 