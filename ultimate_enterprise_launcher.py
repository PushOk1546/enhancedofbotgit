#!/usr/bin/env python3
"""
üöÄ ULTIMATE ENTERPRISE BOT LAUNCHER üöÄ
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º:
- Monitoring System (Real-time –º–µ—Ç—Ä–∏–∫–∏)
- Notification System (–ê–ª–µ—Ä—Ç—ã –∞–¥–º–∏–Ω–∞–º)  
- Backup System (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup)
- Monetized Bot (–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
- Admin Commands (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π)

ENTERPRISE-READY PRODUCTION LAUNCHER
"""

import os
import sys
import time
import signal
import atexit
from datetime import datetime
from typing import Dict, Any
import threading

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º
systems_status = {
    'monitoring': False,
    'notifications': False,
    'backup': False,
    'bot': False,
    'admin': False
}

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞"""
    banner = f"""
üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•
‚ïë                                                                           ‚ïë
‚ïë               üöÄ ULTIMATE ENTERPRISE TELEGRAM BOT üöÄ                    ‚ïë
‚ïë                                                                           ‚ïë
‚ïë  üíé Telegram Stars Integration    üîû Adult Content System                ‚ïë
‚ïë  üí∞ TON Cryptocurrency Support    üìä Real-time Analytics                 ‚ïë
‚ïë  üé® Stunning UI/UX Experience     üîî Smart Notifications                 ‚ïë
‚ïë  üíæ Auto Backup & Recovery        ‚ö° Performance Monitoring              ‚ïë
‚ïë  üëë Premium Monetization          üõ°Ô∏è Enterprise Security                ‚ïë
‚ïë                                                                           ‚ïë
‚ïë  üìÖ Launch Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}                              ‚ïë
‚ïë  üåü Version: Enterprise v3.0                                            ‚ïë
‚ïë  üèóÔ∏è Architecture: Production-Ready                                       ‚ïë
‚ïë                                                                           ‚ïë
üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•
    """
    print(banner)

def validate_environment() -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        'BOT_TOKEN': 'Telegram Bot Token',
        'ADMIN_USER_IDS': 'Administrator User IDs'
    }
    
    optional_vars = {
        'GROQ_KEY': 'Groq AI API Key',
        'SMTP_EMAIL': 'Email for notifications',
        'WEBHOOK_URL': 'Webhook URL for alerts'
    }
    
    missing_critical = []
    missing_optional = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_critical.append(f"  ‚ùå {var}: {description}")
        else:
            print(f"  ‚úÖ {var}: Configured")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for var, description in optional_vars.items():
        if not os.getenv(var):
            missing_optional.append(f"  ‚ö†Ô∏è {var}: {description} (optional)")
        else:
            print(f"  ‚úÖ {var}: Configured")
    
    if missing_critical:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–¢–°–£–¢–°–¢–í–£–Æ–¢:")
        for missing in missing_critical:
            print(missing)
        print("\nüí° –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("  set BOT_TOKEN=7843350631:AAHQ6h_BKAH3J4sNkh9ypNt1jih4yKYM_gs")
        print("  set ADMIN_USER_IDS=377917978")
        return False
    
    if missing_optional:
        print("\n‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∏—Ö):")
        for missing in missing_optional:
            print(missing)
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!")
    return True

def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    critical_modules = [
        ('telebot', 'PyTelegramBotAPI'),
        ('requests', 'HTTP requests'),
        ('psutil', 'System monitoring'),
        ('sqlite3', 'Database (built-in)'),
    ]
    
    optional_modules = [
        ('groq', 'Groq AI integration'),
        ('smtplib', 'Email notifications (built-in)'),
    ]
    
    missing_critical = []
    
    for module, description in critical_modules:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}: {description}")
        except ImportError:
            missing_critical.append(module)
            print(f"  ‚ùå {module}: {description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    
    for module, description in optional_modules:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}: {description}")
        except ImportError:
            print(f"  ‚ö†Ô∏è {module}: {description} - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    
    if missing_critical:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_critical)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: python install_deps.py")
        return False
    
    print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    return True

def initialize_monitoring_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        from monitoring_system import monitoring_system
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        time.sleep(2)
        
        systems_status['monitoring'] = True
        print("‚úÖ Monitoring System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def initialize_notification_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        print("üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        from notification_system import notification_system
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_system.send_alert(
            level=notification_system.AlertLevel.INFO,
            title="Bot System Started",
            message="Ultimate Enterprise Bot successfully launched!",
            source="launcher",
            details={
                "launch_time": datetime.now().isoformat(),
                "version": "Enterprise v3.0"
            }
        )
        
        systems_status['notifications'] = True
        print("‚úÖ Notification System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def initialize_backup_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã backup"""
    try:
        print("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è backup —Å–∏—Å—Ç–µ–º—ã...")
        from backup_system import backup_system
        
        # –°–æ–∑–¥–∞–µ–º startup backup
        startup_backup = backup_system.create_backup(
            backup_type="startup",
            description=f"Startup backup - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        if startup_backup:
            print(f"üì¶ Startup backup —Å–æ–∑–¥–∞–Ω: {startup_backup}")
        
        systems_status['backup'] = True
        print("‚úÖ Backup System: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ backup: {e}")
        return False

def initialize_admin_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥...")
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
        systems_status['admin'] = True
        print("‚úÖ Admin System: –ì–û–¢–û–í")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def initialize_main_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –±–æ—Ç
        if systems_status['monitoring']:
            try:
                from monitoring_system import monitoring_system
                print("  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç")
            except:
                pass
        
        systems_status['bot'] = True
        print("‚úÖ Main Bot: –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

def start_main_bot():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –ë–û–¢–ê...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç
        from monetized_bot import MonetizedBot
        
        print("üî• " + "="*70)
        print("üî• ULTIMATE ENTERPRISE TELEGRAM BOT - –ó–ê–ü–£–©–ï–ù!")
        print("üî• " + "="*70)
        print("üí∞ Telegram Stars: –ê–ö–¢–ò–í–ù–´")
        print("üíé TON Payments: –ê–ö–¢–ò–í–ù–´")
        print("üëë Premium System: –ê–ö–¢–ò–í–ù–´")
        print("üîû Adult Templates: –ó–ê–ì–†–£–ñ–ï–ù–´")
        print("‚ö° Response Cache: –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù")
        print("‚öôÔ∏è Admin Commands: –ì–û–¢–û–í–´")
        print("üé® Enhanced UI: –í–ö–õ–Æ–ß–ï–ù")
        print("üìä Monitoring: –†–ê–ë–û–¢–ê–ï–¢")
        print("üîî Notifications: –ê–ö–¢–ò–í–ù–´")
        print("üíæ Auto Backup: –í–ö–õ–Æ–ß–ï–ù")
        print("üî• " + "="*70)
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üë§ –ê–¥–º–∏–Ω ID: {os.getenv('ADMIN_USER_IDS', '377917978')}")
        print(f"üíé TON Wallet: UQA4rDEmGdIYKcrjEDwfZGLnISYd-gCYLEpcbSdwcuAW_FXB")
        print("üî• " + "="*70)
        print("üöÄ BOT IS RUNNING... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        print("üî• " + "="*70)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        if systems_status['notifications']:
            try:
                from notification_system import send_info_alert
                send_info_alert(
                    "Bot Successfully Launched",
                    "Ultimate Enterprise Bot is now running and ready to serve users!",
                    "launcher",
                    {
                        "systems_active": sum(systems_status.values()),
                        "total_systems": len(systems_status),
                        "launch_time": datetime.now().isoformat()
                    }
                )
            except:
                pass
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = MonetizedBot()
        bot.run()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        shutdown_systems()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
        try:
            from notification_system import send_critical_alert
            send_critical_alert(
                "Critical Bot Error",
                f"Bot crashed with error: {str(e)}",
                "launcher",
                {"error": str(e), "timestamp": datetime.now().isoformat()}
            )
        except:
            pass
        
        shutdown_systems()
        sys.exit(1)

def shutdown_systems():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º...")
    
    # –°–æ–∑–¥–∞–µ–º shutdown backup
    if systems_status['backup']:
        try:
            from backup_system import backup_system
            print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º...")
            shutdown_backup = backup_system.create_backup(
                backup_type="shutdown",
                description=f"Shutdown backup - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            if shutdown_backup:
                print(f"‚úÖ Shutdown backup —Å–æ–∑–¥–∞–Ω: {shutdown_backup}")
            backup_system.shutdown()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è shutdown backup: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if systems_status['monitoring']:
        try:
            from monitoring_system import monitoring_system
            monitoring_system.stop_monitoring()
            print("‚úÖ Monitoring System: –û–°–¢–ê–ù–û–í–õ–ï–ù")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if systems_status['notifications']:
        try:
            from notification_system import notification_system, send_info_alert
            send_info_alert(
                "Bot Shutdown",
                "Ultimate Enterprise Bot is shutting down gracefully",
                "launcher"
            )
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_system.shutdown()
            print("‚úÖ Notification System: –û–°–¢–ê–ù–û–í–õ–ï–ù")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    print("üî• –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    def signal_handler(signum, frame):
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        shutdown_systems()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    atexit.register(shutdown_systems)

def show_startup_summary():
    """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–ø—É—Å–∫—É"""
    print("\nüìã –°–í–û–î–ö–ê –ü–û –ó–ê–ü–£–°–ö–£:")
    print("="*50)
    
    total_systems = len(systems_status)
    active_systems = sum(systems_status.values())
    
    for system, status in systems_status.items():
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"  {emoji} {system.title().replace('_', ' ')}: {'–ê–ö–¢–ò–í–ï–ù' if status else '–û–®–ò–ë–ö–ê'}")
    
    print("="*50)
    print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º: {active_systems}/{total_systems}")
    
    if active_systems == total_systems:
        print("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!")
        return True
    elif active_systems >= total_systems * 0.7:  # 70% —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
        return True
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not validate_environment():
        print("\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        sys.exit(1)
    
    print("\nüöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú...")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
    initialization_steps = [
        ("Monitoring System", initialize_monitoring_system),
        ("Notification System", initialize_notification_system),
        ("Backup System", initialize_backup_system),
        ("Admin System", initialize_admin_system),
        ("Main Bot", initialize_main_bot),
    ]
    
    for step_name, step_function in initialization_steps:
        print(f"\nüîÑ {step_name}...")
        success = step_function()
        if success:
            print(f"‚úÖ {step_name}: –£–°–ü–ï–®–ù–û")
        else:
            print(f"‚ùå {step_name}: –û–®–ò–ë–ö–ê")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    if not show_startup_summary():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
    
    print("\nüéØ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç...")
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    start_main_bot()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        sys.exit(1) 