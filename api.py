"""
API –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Groq.
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
- Circuit Breaker –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–±–æ—è–º
- Exponential backoff –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
- Comprehensive error handling –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ó–∞—â–∏—Ç–∞ –æ—Ç API rate limits
"""

import asyncio
import logging
import time
import random
from enum import Enum
from typing import Optional, Dict, Any
from groq import AsyncGroq
from config import GROQ_KEY

logger = logging.getLogger("bot_logger")

class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "closed"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "open"          # API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    HALF_OPEN = "half_open"  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

class CircuitBreaker:
    """
    Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±–æ–µ–≤ API.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–±–æ–∏.
    """
    
    def __init__(
        self, 
        failure_threshold: int = 5, 
        recovery_timeout: int = 60,
        success_threshold: int = 3
    ):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.success_threshold = success_threshold
        
        self.failure_count = 0
        self.success_count = 0
        self.last_failure_time = None
        self.state = CircuitState.CLOSED
        
        logger.info(f"Circuit Breaker initialized: threshold={failure_threshold}, timeout={recovery_timeout}")
    
    async def call(self, func, *args, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ circuit breaker.
        –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        """
        if self.state == CircuitState.OPEN:
            if self._should_attempt_reset():
                self.state = CircuitState.HALF_OPEN
                self.success_count = 0
                logger.info("Circuit Breaker: Attempting recovery (HALF_OPEN)")
            else:
                raise APICircuitBreakerError("Circuit breaker is OPEN - API unavailable")
        
        try:
            result = await func(*args, **kwargs)
            self._on_success()
            return result
        except Exception as e:
            self._on_failure()
            raise e
    
    def _should_attempt_reset(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.last_failure_time is None:
            return True
        return time.time() - self.last_failure_time > self.recovery_timeout
    
    def _on_success(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤"""
        if self.state == CircuitState.HALF_OPEN:
            self.success_count += 1
            if self.success_count >= self.success_threshold:
                self.state = CircuitState.CLOSED
                self.failure_count = 0
                logger.info("Circuit Breaker: Recovery successful (CLOSED)")
        elif self.state == CircuitState.CLOSED:
            self.failure_count = 0
    
    def _on_failure(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤"""
        self.failure_count += 1
        self.last_failure_time = time.time()
        
        if self.state == CircuitState.HALF_OPEN:
            self.state = CircuitState.OPEN
            logger.warning("Circuit Breaker: Recovery failed, back to OPEN")
        elif self.failure_count >= self.failure_threshold:
            self.state = CircuitState.OPEN
            logger.error(f"Circuit Breaker: Too many failures ({self.failure_count}), switching to OPEN")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å circuit breaker"""
        return {
            "state": self.state.value,
            "failure_count": self.failure_count,
            "success_count": self.success_count,
            "last_failure": self.last_failure_time,
            "time_until_retry": max(0, (self.last_failure_time or 0) + self.recovery_timeout - time.time()) if self.last_failure_time else 0
        }

class APIError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ API"""
    pass

class APICircuitBreakerError(APIError):
    """–û—à–∏–±–∫–∞ circuit breaker - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    pass

class APIRateLimitError(APIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass

class APITimeoutError(APIError):
    """–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ API"""
    pass

class EnhancedRetryManager:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Exponential backoff + jitter.
    """
    
    def __init__(
        self,
        max_retries: int = 3,
        base_delay: float = 1.0,
        max_delay: float = 60.0,
        exponential_base: float = 2.0,
        jitter: bool = True
    ):
        self.max_retries = max_retries
        self.base_delay = base_delay
        self.max_delay = max_delay
        self.exponential_base = exponential_base
        self.jitter = jitter
    
    def calculate_delay(self, attempt: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        delay = self.base_delay * (self.exponential_base ** attempt)
        delay = min(delay, self.max_delay)
        
        if self.jitter:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
            jitter_range = delay * 0.1
            delay += random.uniform(-jitter_range, jitter_range)
        
        return max(0, delay)
    
    async def retry_with_backoff(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å exponential backoff"""
        last_exception = None
        
        for attempt in range(self.max_retries + 1):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                last_exception = e
                
                if attempt == self.max_retries:
                    logger.error(f"All retry attempts exhausted. Last error: {e}")
                    break
                
                delay = self.calculate_delay(attempt)
                logger.warning(f"Attempt {attempt + 1}/{self.max_retries + 1} failed: {e}. Retrying in {delay:.2f}s")
                await asyncio.sleep(delay)
        
        raise last_exception

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
circuit_breaker = CircuitBreaker()
retry_manager = EnhancedRetryManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Groq
groq_client = None

def init_groq_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Groq"""
    global groq_client
    if not GROQ_KEY:
        logger.error("üö® CRITICAL: GROQ_KEY not found in environment variables")
        raise APIError("GROQ_KEY not configured")
    
    groq_client = AsyncGroq(api_key=GROQ_KEY)
    logger.info("‚úÖ Groq client initialized successfully")

async def _raw_groq_request(prompt: str, model: str, **kwargs) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫ Groq API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è circuit breaker'–æ–º.
    """
    if groq_client is None:
        init_groq_client()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not prompt or not prompt.strip():
            raise APIError("Empty prompt provided")
        
        if len(prompt) > 32000:  # Groq limit
            logger.warning(f"Prompt too long ({len(prompt)} chars), truncating")
            prompt = prompt[:32000]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        request_params = {
            "model": model,
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": kwargs.get("max_tokens", 1000),
            "temperature": kwargs.get("temperature", 0.7),
            "top_p": kwargs.get("top_p", 0.9),
            "stream": False
        }
        
        logger.debug(f"Making Groq request: model={model}, prompt_length={len(prompt)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = time.time()
        
        try:
            response = await asyncio.wait_for(
                groq_client.chat.completions.create(**request_params),
                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )
        except asyncio.TimeoutError:
            raise APITimeoutError("Groq API request timeout")
        
        elapsed_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if not response or not response.choices:
            raise APIError("Empty response from Groq API")
        
        content = response.choices[0].message.content
        if not content:
            raise APIError("Empty content in Groq response")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.debug(f"Groq request successful: {elapsed_time:.2f}s, response_length={len(content)}")
        
        return content.strip()
        
    except Exception as e:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        error_message = str(e).lower()
        
        if "rate limit" in error_message or "too many requests" in error_message:
            raise APIRateLimitError(f"Rate limit exceeded: {e}")
        elif "timeout" in error_message:
            raise APITimeoutError(f"Request timeout: {e}")
        elif "network" in error_message or "connection" in error_message:
            raise APIError(f"Network error: {e}")
        else:
            raise APIError(f"Groq API error: {e}")

async def generate_groq_response(
    prompt: str, 
    model: str, 
    max_tokens: Optional[int] = None,
    temperature: float = 0.7,
    **kwargs
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Groq —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤.
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    - Circuit breaker –∑–∞—â–∏—Ç–∞
    - Exponential backoff retry
    - Comprehensive error handling
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not prompt or not model:
            raise APIError("Prompt and model are required")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        request_kwargs = kwargs.copy()
        if max_tokens:
            request_kwargs["max_tokens"] = max_tokens
        request_kwargs["temperature"] = temperature
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ circuit breaker –∏ retry manager
        result = await circuit_breaker.call(
            retry_manager.retry_with_backoff,
            _raw_groq_request,
            prompt,
            model,
            **request_kwargs
        )
        
        logger.info(f"‚úÖ Generated response: model={model}, length={len(result)}")
        return result
        
    except APICircuitBreakerError as e:
        logger.error(f"üö® API Circuit Breaker: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
        return "ü§ñ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    except APIRateLimitError as e:
        logger.warning(f"‚ö†Ô∏è API Rate Limit: {e}")
        return "‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        
    except APITimeoutError as e:
        logger.warning(f"‚è∞ API Timeout: {e}")
        return "‚è∞ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        
    except APIError as e:
        logger.error(f"üö® API Error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."
        
    except Exception as e:
        logger.error(f"üö® CRITICAL: Unexpected error in generate_groq_response: {e}", exc_info=True)
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

async def health_check() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    status = {
        "timestamp": time.time(),
        "groq_client": "unknown",
        "circuit_breaker": circuit_breaker.get_status(),
        "overall": "unknown"
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Groq API
        test_response = await generate_groq_response(
            "Test message", 
            "gemma2-2b-it",
            max_tokens=10
        )
        
        if test_response and not test_response.startswith("ü§ñ") and not test_response.startswith("‚ùå"):
            status["groq_client"] = "healthy"
        else:
            status["groq_client"] = "degraded"
            
    except Exception as e:
        status["groq_client"] = "unhealthy"
        status["groq_error"] = str(e)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if status["groq_client"] == "healthy" and status["circuit_breaker"]["state"] == "closed":
        status["overall"] = "healthy"
    elif status["groq_client"] == "degraded":
        status["overall"] = "degraded"
    else:
        status["overall"] = "unhealthy"
    
    return status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
try:
    init_groq_client()
except Exception as e:
    logger.error(f"Failed to initialize Groq client: {e}")
    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, circuit breaker –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—à–∏–±–∫–∏