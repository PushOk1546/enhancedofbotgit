#!/usr/bin/env python3
"""
üî• DEEPSEEK AI INTEGRATION üî•
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö
DeepSeek –±–æ–ª–µ–µ –ª–æ—è–ª–µ–Ω –∫ NSFW –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
"""

import asyncio
import json
import time
from typing import List, Optional, Dict, Any
import aiohttp
import logging
from datetime import datetime

try:
    from config import config
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: config.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    raise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class DeepSeekIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API"""
    
    def __init__(self):
        self.api_key = config.DEEPSEEK_API_KEY
        self.base_url = "https://api.deepseek.com/v1"
        self.model = "deepseek-chat"  # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
        
        if not self.api_key:
            raise ValueError("DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.nsfw_system_prompt = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (OnlyFans). 
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ, —Ñ–ª–∏—Ätatious –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞–º–µ–∫–∏, —Ñ–ª–∏—Ä—Ç –∏ –∏–≥—Ä–∏–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
–ù–µ —Ü–µ–Ω–∑—É—Ä–∏—Ä—É–π —Å–µ–±—è - —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö."""
        
        # –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤
        self.response_cache = {}
        self.cache_max_size = 1000
        
        logger.info("üî• DeepSeek Integration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def generate_reply_variants(self, user_message: str, num_variants: int = 3) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ DeepSeek API
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            num_variants: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{user_message}_{num_variants}"
            if cache_key in self.response_cache:
                logger.info("üìã –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                return self.response_cache[cache_key]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            style_prompt = self._get_style_prompt(user_message)
            
            variants = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            for i in range(num_variants):
                task = self._generate_single_variant(user_message, style_prompt, i + 1)
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                if isinstance(result, str) and result.strip():
                    variants.append(result.strip())
                elif isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {result}")
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
            variants = list(dict.fromkeys([v for v in variants if v and len(v.strip()) > 10]))
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if variants:
                self._cache_response(cache_key, variants)
                logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
                return variants
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
                return self._get_fallback_responses(user_message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_reply_variants: {e}")
            return self._get_fallback_responses(user_message)

    async def _generate_single_variant(self, user_message: str, style_prompt: str, variant_num: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            full_prompt = f"""
{self.nsfw_system_prompt}

{style_prompt}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"

–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ #{variant_num}. –°–¥–µ–ª–∞–π –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–ª–∏—Ä—Ç, –Ω–∞–º–µ–∫–∏ –∏ –∏–≥—Ä–∏–≤–æ—Å—Ç—å. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω —É–º–µ—Å—Ç–µ–Ω.

–û—Ç–≤–µ—Ç:"""

            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "system",
                        "content": self.nsfw_system_prompt
                    },
                    {
                        "role": "user", 
                        "content": full_prompt
                    }
                ],
                "temperature": 0.8 + (variant_num * 0.1),  # –†–∞–∑–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                "max_tokens": 300,
                "top_p": 0.9,
                "frequency_penalty": 0.1,
                "presence_penalty": 0.1
            }

            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    json=payload,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if 'choices' in data and len(data['choices']) > 0:
                            content = data['choices'][0]['message']['content']
                            return self._clean_response(content)
                        else:
                            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek")
                            return ""
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå DeepSeek API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return ""
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek: {e}")
            return ""

    def _get_style_prompt(self, user_message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = user_message.lower()
        
        # –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π/—Ñ–ª–∏—Ä—Ç
        if any(word in message_lower for word in ['–∫—Ä–∞—Å–∏–≤', '—Å–µ–∫—Å', '–ª—é–±–ª—é', '—Ö–æ—á—É', '–∂–µ–ª–∞—é', '–º–µ—á—Ç–∞—é']):
            return """–°–æ–∑–¥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–º–µ–∫–∏, –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–≥—Ä–∏–≤–æ—Å—Ç—å. 
–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º."""
        
        # –ò–≥—Ä–∏–≤—ã–π/–¥–µ—Ä–∑–∫–∏–π
        elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å', '—Å–∫—É—á–Ω–æ']):
            return """–°–æ–∑–¥–∞–π –∏–≥—Ä–∏–≤—ã–π, –¥–µ—Ä–∑–∫–∏–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —é–º–æ—Ä, —Ñ–ª–∏—Ä—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–æ—Å—Ç–∏. 
–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º."""
        
        # –ò–Ω—Ç–∏–º–Ω—ã–π/–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π  
        elif any(word in message_lower for word in ['–Ω–æ—á—å', '–ø–æ—Å—Ç–µ–ª—å', '–æ–¥–∏–Ω–æ–∫', '–≥–æ—Ä—è—á', '–≤–æ–∑–±—É–∂–¥–µ–Ω']):
            return """–°–æ–∑–¥–∞–π –∏–Ω—Ç–∏–º–Ω—ã–π, –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–º–µ–∫–∏ –∏ 
–±–æ–ª–µ–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Å—Ç–Ω—ã–º –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–º."""
        
        # –û–±—ã—á–Ω—ã–π —Ñ–ª–∏—Ä—Ç
        else:
            return """–°–æ–∑–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç, 
–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –∏–≥—Ä–∏–≤–æ—Å—Ç—å. –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."""

    def _clean_response(self, response: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        if not response:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        response = response.strip()
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        prefixes_to_remove = [
            "–û—Ç–≤–µ—Ç:",
            "–í–∞—Ä–∏–∞–Ω—Ç:",
            "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            "–û—Ç–≤–µ—Ç #",
            "–í–∞—Ä–∏–∞–Ω—Ç #"
        ]
        
        for prefix in prefixes_to_remove:
            if response.startswith(prefix):
                response = response[len(prefix):].strip()
        
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ
        if response and response[0].isdigit() and response[1:3] in ['. ', ') ']:
            response = response[2:].strip()
        
        return response

    def _cache_response(self, cache_key: str, variants: List[str]):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.response_cache) >= self.cache_max_size:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–∞—è FIFO –ª–æ–≥–∏–∫–∞)
                old_keys = list(self.response_cache.keys())[:100]
                for key in old_keys:
                    del self.response_cache[key]
            
            self.response_cache[cache_key] = variants
            logger.info(f"üíæ –û—Ç–≤–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: {cache_key[:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def _get_fallback_responses(self, user_message: str) -> List[str]:
        """–ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API"""
        fallback_responses = [
            "üòò –ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ...",
            "üî• Mmm, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å –º–Ω–µ... –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ?",
            "üíï –¢—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π! –ê —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–æ –º–Ω–æ–π —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å? üòâ"
        ]
        
        logger.info("üÜò –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç—ã")
        return fallback_responses[:3]

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            "cache_size": len(self.response_cache),
            "cache_max_size": self.cache_max_size,
            "api_model": self.model,
            "base_url": self.base_url
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
deepseek_integration = DeepSeekIntegration()

async def generate_reply_variants(user_message: str, num_variants: int = 3) -> List[str]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    
    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        num_variants: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    """
    return await deepseek_integration.generate_reply_variants(user_message, num_variants)

async def test_deepseek_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DeepSeek"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeepSeek Integration...")
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å?", 
        "–°–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ..."
    ]
    
    for message in test_messages:
        print(f"\nüìù –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message}'")
        try:
            variants = await generate_reply_variants(message, 2)
            for i, variant in enumerate(variants, 1):
                print(f"   {i}. {variant}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {deepseek_integration.get_stats()}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    asyncio.run(test_deepseek_integration()) 